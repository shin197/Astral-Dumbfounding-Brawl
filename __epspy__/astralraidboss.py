## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import TriggerEditor as TE;
import TriggerEditor as TE
# (Line 2) var BossSpellHP = 0;
BossSpellHP = EUDCreateVariables(1)
_IGVA([BossSpellHP], lambda: [0])
# (Line 3) function RaidBoss(){
@EUDFunc
def RaidBoss():
    # (Line 6) if(
    _t1 = EUDIf()
    # (Line 7) Deaths((7), (10), 7, (153))
    # (Line 8) ){
    if _t1(Deaths((7), (10), 7, (153))):
        # (Line 9) var Random2;
        Random2 = EUDVariable()
        # (Line 10) SetDeaths((7), (7), 0, (184));
        # (Line 11) for(var i = 0 ; i < 6 ; i++){
        DoActions(SetDeaths((7), (7), 0, (184)))
        i = EUDVariable()
        i << (0)
        if EUDWhile()(i >= 6, neg=True):
            def _t3():
                i.__iadd__(1)
            # (Line 12) if(
            _t4 = EUDIf()
            # (Line 13) Deaths((i), (10), 7, (92))
            # (Line 14) ){
            if _t4(Deaths((i), (10), 7, (92))):
                # (Line 15) SetDeaths((7), (8), 1, (184));
                # (Line 16) }
                DoActions(SetDeaths((7), (8), 1, (184)))
                # (Line 17) }
            EUDEndIf()
            # (Line 18) if(
            EUDSetContinuePoint()
            _t3()
        EUDEndWhile()
        _t5 = EUDIf()
        # (Line 19) Deaths((7), (0), 1, (184))
        # (Line 20) ){
        if _t5(Deaths((7), (0), 1, (184))):
            # (Line 21) Random2 = dwrand() % (dwread_epd(EPD(0x58A364 + 48 * 184 + 4 * 7))-1 + 1);
            Random2 << (f_dwrand() % (f_dwread_epd(EPD(0x58A364 + 48 * 184 + 4 * 7)) - 1 + 1))
            # (Line 22) SetDeaths((7), (7), Random2, (153));
            # (Line 23) for(var i = 0 ; i < 5 ; i++){
            DoActions(SetDeaths((7), (7), Random2, (153)))
            i = EUDVariable()
            i << (0)
            if EUDWhile()(i >= 5, neg=True):
                def _t7():
                    i.__iadd__(1)
                # (Line 24) if(
                _t8 = EUDIf()
                # (Line 25) !Deaths((i), (10), 7, (92)) &&
                # (Line 26) Deaths((7), (0), i, (153))
                # (Line 27) ){
                if _t8(EUDSCAnd()(Deaths((i), (10), 7, (92)), neg=True)(Deaths((7), (0), i, (153)))()):
                    # (Line 28) SetDeaths((7), (8), 1, (153));
                    # (Line 29) }
                    DoActions(SetDeaths((7), (8), 1, (153)))
                    # (Line 30) }
                EUDEndIf()
                # (Line 31) SetDeaths((7), (8), 1, (153));
                EUDSetContinuePoint()
                _t7()
            EUDEndWhile()
            # (Line 32) }
            DoActions(SetDeaths((7), (8), 1, (153)))
            # (Line 33) else{
        if EUDElse()():
            # (Line 34) SetDeaths((7), (7), 8, (153));
            # (Line 35) }
            DoActions(SetDeaths((7), (7), 8, (153)))
            # (Line 36) }
        EUDEndIf()
        # (Line 39) if(
    EUDEndIf()
    _t9 = EUDIf()
    # (Line 40) Deaths((6), (10), 27, (212)) &&
    # (Line 41) Memory(0x6283F0, (1), 1698)
    # (Line 42) ){
    if _t9(EUDSCAnd()(Deaths((6), (10), 27, (212)))(Memory(0x6283F0, (1), 1698))()):
        # (Line 43) TE.NumPlyr = TE.GetNumPlyr();
        _ATTW(TE, 'NumPlyr') << (TE.GetNumPlyr())
        # (Line 44) if(
        _t10 = EUDIf()
        # (Line 45) TE.NumPlyr >= 3
        # (Line 46) ){
        if _t10(TE.NumPlyr >= 3):
            # (Line 47) dwwrite(0x65FD00 + 9808 + 114 * 4, dwread(0x65FD00 + 9808 + 114 * 4) + 332800 * (TE.NumPlyr-2));
            f_dwwrite(0x65FD00 + 9808 + 114 * 4, f_dwread(0x65FD00 + 9808 + 114 * 4) + 332800 * (TE.NumPlyr - 2))
            # (Line 48) wwrite(0x65FD00 + 4352 + 114 * 2, wread(0x65FD00 + 4352 + 114 * 2) + 500 * (TE.NumPlyr-2));
            f_wwrite(0x65FD00 + 4352 + 114 * 2, f_wread(0x65FD00 + 4352 + 114 * 2) + 500 * (TE.NumPlyr - 2))
            # (Line 49) }
            # (Line 50) TE.Boss = epdread_epd(EPD(0x628438));
        EUDEndIf()
        _ATTW(TE, 'Boss') << (f_epdread_epd(EPD(0x628438)))
        # (Line 51) BossSpellHP = 332800 * TE.NumPlyr;
        BossSpellHP << (332800 * TE.NumPlyr)
        # (Line 52) if(
        _t11 = EUDIf()
        # (Line 53) Switch((38), (2))
        # (Line 54) ){
        if _t11(Switch((38), (2))):
            # (Line 55) BossSpellHP *= 2;
            BossSpellHP.__imul__(2)
            # (Line 56) }
            # (Line 57) SetDeaths((6), (7), 0, (212));
        EUDEndIf()
        # (Line 58) CreateUnit(1, (114), (152), (7));
        DoActions(SetDeaths((6), (7), 0, (212)))
        # (Line 59) }
        DoActions(CreateUnit(1, (114), (152), (7)))
        # (Line 60) if(
    EUDEndIf()
    _t12 = EUDIf()
    # (Line 61) Command((7), (0), 1, (114)) &&
    # (Line 62) TE.Boss != 0
    # (Line 63) ){
    if _t12(EUDSCAnd()(Command((7), (0), 1, (114)))(TE.Boss == 0, neg=True)()):
        # (Line 64) TE.HealUnit(TE.Boss,106);
        TE.HealUnit(TE.Boss, 106)
        # (Line 65) if(
        _t13 = EUDIf()
        # (Line 66) MemoryEPD(TE.Boss + 0x008 / 4, AtMost, BossSpellHP) &&
        # (Line 67) MemoryEPD(TE.Boss + 0x060 / 4, AtMost, 128) &&
        # (Line 68) Deaths((7), (10), 0, (165))
        # (Line 69) ){
        if _t13(EUDSCAnd()(MemoryEPD(TE.Boss + 0x008 // 4, AtMost, BossSpellHP))(MemoryEPD(TE.Boss + 0x060 // 4, AtMost, 128))(Deaths((7), (10), 0, (165)))()):
            # (Line 70) SetDeaths((7), (7), 1, (165));
            # (Line 71) }
            DoActions(SetDeaths((7), (7), 1, (165)))
            # (Line 72) if(
        EUDEndIf()
        _t14 = EUDIf()
        # (Line 73) Deaths((6), (0), 60, (165)) &&
        # (Line 74) Deaths((8), (10), 3, (165)) &&
        # (Line 75) Deaths((9), (10), 0, (165)) &&
        # (Line 76) Memory(0x6283F0, (1), 1699)
        # (Line 77) ){
        if _t14(EUDSCAnd()(Deaths((6), (0), 60, (165)))(Deaths((8), (10), 3, (165)))(Deaths((9), (10), 0, (165)))(Memory(0x6283F0, (1), 1699))()):
            # (Line 78) SetDeaths((9), (7), 4, (165));
            # (Line 79) MoveLocation((97), (114), (7), (203));
            DoActions(SetDeaths((9), (7), 4, (165)))
            # (Line 80) var Angle = 0;
            DoActions(MoveLocation((97), (114), (7), (203)))
            Angle = EUDVariable()
            Angle << (0)
            # (Line 81) Angle = dwrand() % (23 + 1);
            Angle << (f_dwrand() % (23 + 1))
            # (Line 82) Angle *= 15;
            Angle.__imul__(15)
            # (Line 83) TE.PolarLocation(96,512,Angle);
            TE.PolarLocation(96, 512, Angle)
            # (Line 84) Angle += 90;
            Angle.__iadd__(90)
            # (Line 85) Angle = Angle * 256 / 360;
            Angle << (Angle * 256 // 360)
            # (Line 86) var NewBullet;
            NewBullet = EUDVariable()
            # (Line 87) NewBullet = epdread_epd(EPD(0x628438));
            NewBullet << (f_epdread_epd(EPD(0x628438)))
            # (Line 88) CreateUnit(1, (98), (10), (7));
            # (Line 89) MoveUnit(0, (98), (7), (10), (204));
            DoActions(CreateUnit(1, (98), (10), (7)))
            # (Line 90) SetMemoryEPD(NewBullet + 0x034 / 4, SetTo, 2707);
            DoActions(MoveUnit(0, (98), (7), (10), (204)))
            # (Line 91) bwrite_epd(NewBullet + 0x021 / 4,  0x021 % 4, Angle);
            DoActions(SetMemoryEPD(NewBullet + 0x034 // 4, SetTo, 2707))
            f_bwrite_epd(NewBullet + 0x021 // 4, 0x021 % 4, Angle)
            # (Line 92) bwrite_epd(NewBullet + 0x023 / 4,  0x023 % 4, Angle);
            f_bwrite_epd(NewBullet + 0x023 // 4, 0x023 % 4, Angle)
            # (Line 93) TE.COrderLocEPD(NewBullet,6,96);
            TE.COrderLocEPD(NewBullet, 6, 96)
            # (Line 94) RemoveUnitAt(0, (98), (10), (9));
            # (Line 95) }
            DoActions(RemoveUnitAt(0, (98), (10), (9)))
            # (Line 96) if(
        EUDEndIf()
        _t15 = EUDIf()
        # (Line 97) Deaths((7), (0), 36, (165)) &&
        # (Line 98) Deaths((8), (10), 4, (165))
        # (Line 99) ){
        if _t15(EUDSCAnd()(Deaths((7), (0), 36, (165)))(Deaths((8), (10), 4, (165)))()):
            # (Line 100) MoveLocation((97), (11), (6), (203));
            # (Line 101) if(
            DoActions(MoveLocation((97), (11), (6), (203)))
            _t16 = EUDIf()
            # (Line 102) dwread_epd(EPD(0x58A364 + 48 * 165 + 4 * 7)) % 6 == 0
            # (Line 103) ){
            if _t16(f_dwread_epd(EPD(0x58A364 + 48 * 165 + 4 * 7)) % 6 == 0):
                # (Line 104) GiveUnits(1, (13), (6), (114), (8));
                # (Line 105) CreateUnit(1, (19), (10), (7));
                DoActions(GiveUnits(1, (13), (6), (114), (8)))
                # (Line 106) GiveUnits(1, (19), (7), (10), (8));
                DoActions(CreateUnit(1, (19), (10), (7)))
                # (Line 107) MoveUnit(1, (13), (8), (114), (97));
                DoActions(GiveUnits(1, (19), (7), (10), (8)))
                # (Line 108) MoveUnit(1, (19), (8), (10), (97));
                DoActions(MoveUnit(1, (13), (8), (114), (97)))
                # (Line 109) KillUnitAt(0, (19), (203), (8));
                DoActions(MoveUnit(1, (19), (8), (10), (97)))
                # (Line 110) }
                DoActions(KillUnitAt(0, (19), (203), (8)))
                # (Line 111) if(
            EUDEndIf()
            _t17 = EUDIf()
            # (Line 112) Deaths((9), (0), 60, (165)) &&
            # (Line 113) dwread_epd(EPD(0x58A364 + 48 * 165 + 4 * 7)) % 3 == 0 &&
            # (Line 114) Memory(0x6283F0, (1), 1694)
            # (Line 115) ){
            if _t17(EUDSCAnd()(Deaths((9), (0), 60, (165)))(f_dwread_epd(EPD(0x58A364 + 48 * 165 + 4 * 7)) % 3 == 0)(Memory(0x6283F0, (1), 1694))()):
                # (Line 116) var AddAngle = 0;
                AddAngle = EUDVariable()
                AddAngle << (0)
                # (Line 117) if(
                _t18 = EUDIf()
                # (Line 118) Deaths((9), (0), 75, (165))
                # (Line 119) ){
                if _t18(Deaths((9), (0), 75, (165))):
                    # (Line 120) if(
                    _t19 = EUDIf()
                    # (Line 121) Switch((38), (3))
                    # (Line 122) ){
                    if _t19(Switch((38), (3))):
                        # (Line 123) SetDeaths((9), (7), 0, (165));
                        # (Line 124) KillUnitAt(0, (13), (203), (7));
                        DoActions(SetDeaths((9), (7), 0, (165)))
                        # (Line 125) }
                        DoActions(KillUnitAt(0, (13), (203), (7)))
                        # (Line 126) else{
                    if EUDElse()():
                        # (Line 127) AddAngle = 30;
                        AddAngle << (30)
                        # (Line 128) }
                        # (Line 129) }
                    EUDEndIf()
                    # (Line 130) if(
                EUDEndIf()
                _t20 = EUDIf()
                # (Line 131) Deaths((9), (0), 90, (165))
                # (Line 132) ){
                if _t20(Deaths((9), (0), 90, (165))):
                    # (Line 133) SetDeaths((9), (7), 0, (165));
                    # (Line 134) KillUnitAt(0, (13), (203), (7));
                    DoActions(SetDeaths((9), (7), 0, (165)))
                    # (Line 135) }
                    DoActions(KillUnitAt(0, (13), (203), (7)))
                    # (Line 136) for(var i = 0 ; i < 6 ; i++){
                EUDEndIf()
                i = EUDVariable()
                i << (0)
                if EUDWhile()(i >= 6, neg=True):
                    def _t22():
                        i.__iadd__(1)
                    # (Line 137) MoveLocation((97), (11), (6), (203));
                    # (Line 138) MoveUnit(0, (11), (6), (9), (23));
                    DoActions(MoveLocation((97), (11), (6), (203)))
                    # (Line 139) TE.CreateBullet(7,i*60 + 30 - AddAngle,2707);
                    DoActions(MoveUnit(0, (11), (6), (9), (23)))
                    TE.CreateBullet(7, i * 60 + 30 - AddAngle, 2707)
                    # (Line 140) }
                    # (Line 141) }
                    EUDSetContinuePoint()
                    _t22()
                EUDEndWhile()
                # (Line 142) }
            EUDEndIf()
            # (Line 143) if(
        EUDEndIf()
        _t23 = EUDIf()
        # (Line 144) Deaths((7), (0), 36, (165)) &&
        # (Line 145) Deaths((8), (10), 5, (165))
        # (Line 146) ){
        if _t23(EUDSCAnd()(Deaths((7), (0), 36, (165)))(Deaths((8), (10), 5, (165)))()):
            # (Line 147) if(
            _t24 = EUDIf()
            # (Line 148) Deaths((7), (10), 37, (165))
            # (Line 149) ){
            if _t24(Deaths((7), (10), 37, (165))):
                # (Line 150) GiveUnits(0, (100), (6), (203), (10));
                # (Line 151) foreach(ptr, epd : EUDLoopPlayerUnit(10) ) {
                DoActions(GiveUnits(0, (100), (6), (203), (10)))
                for ptr, epd in EUDLoopPlayerUnit(10):
                    # (Line 152) if(
                    _t25 = EUDIf()
                    # (Line 153) wread_epd(epd + 0x064 / 4,  0x064 % 4) == 100
                    # (Line 154) ){
                    if _t25(f_wread_epd(epd + 0x064 // 4, 0x064 % 4) == 100):
                        # (Line 155) bwrite_epd(epd + 0x117 / 4,  0x117 % 4, 255);
                        f_bwrite_epd(epd + 0x117 // 4, 0x117 % 4, 255)
                        # (Line 156) }
                        # (Line 157) }
                    EUDEndIf()
                    # (Line 158) GiveUnits(0, (100), (10), (203), (6));

                # (Line 159) }
                DoActions(GiveUnits(0, (100), (10), (203), (6)))
                # (Line 160) if(
            EUDEndIf()
            _t26 = EUDIf()
            # (Line 161) Deaths((9), (10), 30, (165)) &&
            # (Line 162) Memory(0x6283F0, (1), 1699)
            # (Line 163) ){
            if _t26(EUDSCAnd()(Deaths((9), (10), 30, (165)))(Memory(0x6283F0, (1), 1699))()):
                # (Line 164) var Battlecruiser;
                Battlecruiser = EUDVariable()
                # (Line 165) var TargetPlayer = 6;
                TargetPlayer = EUDVariable()
                TargetPlayer << (6)
                # (Line 166) if(
                _t27 = EUDIf()
                # (Line 167) Deaths((7), (0), 1, (153)) &&
                # (Line 168) Deaths((7), (1), 6, (153))
                # (Line 169) ){
                if _t27(EUDSCAnd()(Deaths((7), (0), 1, (153)))(Deaths((7), (1), 6, (153)))()):
                    # (Line 170) TargetPlayer = dwread_epd(EPD(0x58A364 + 48 * 153 + 4 * 7)) -1;
                    TargetPlayer << (f_dwread_epd(EPD(0x58A364 + 48 * 153 + 4 * 7)) - 1)
                    # (Line 171) }
                    # (Line 172) Battlecruiser = epdread_epd(EPD(0x628438));
                EUDEndIf()
                Battlecruiser << (f_epdread_epd(EPD(0x628438)))
                # (Line 173) var Zealot = 0;
                Zealot = EUDVariable()
                Zealot << (0)
                # (Line 174) MoveUnit(1, (114), (7), (203), (152));
                # (Line 175) CreateUnit(1, (29), (10), (7));
                DoActions(MoveUnit(1, (114), (7), (203), (152)))
                # (Line 176) ModifyUnitEnergy(0, (29), (7), (10), 100);
                DoActions(CreateUnit(1, (29), (10), (7)))
                # (Line 177) SetInvincibility((4), (29), (7), (10));
                DoActions(ModifyUnitEnergy(0, (29), (7), (10), 100))
                # (Line 178) MoveUnit(1, (29), (7), (10), (83));
                DoActions(SetInvincibility((4), (29), (7), (10)))
                # (Line 179) MoveUnit(1, (114), (7), (152), (203));
                DoActions(MoveUnit(1, (29), (7), (10), (83)))
                # (Line 180) GiveUnits(0, (100), (6), (203), (10));
                DoActions(MoveUnit(1, (114), (7), (152), (203)))
                # (Line 181) foreach(ptr, epd : EUDLoopPlayerUnit(10) ) {
                DoActions(GiveUnits(0, (100), (6), (203), (10)))
                for ptr, epd in EUDLoopPlayerUnit(10):
                    # (Line 182) if(
                    _t28 = EUDIf()
                    # (Line 183) wread_epd(epd + 0x064 / 4,  0x064 % 4) == 100 &&
                    # (Line 184) TE.CBringEPD(epd,133)
                    # (Line 185) ){
                    if _t28(EUDSCAnd()(f_wread_epd(epd + 0x064 // 4, 0x064 % 4) == 100)(TE.CBringEPD(epd, 133))()):
                        # (Line 186) Zealot = ptr;
                        Zealot << (ptr)
                        # (Line 187) break;
                        EUDBreak()
                        # (Line 188) }
                        # (Line 189) }
                    EUDEndIf()
                    # (Line 190) GiveUnits(0, (100), (10), (203), (6));

                # (Line 191) bwrite_epd(Battlecruiser + 0x04D / 4,  0x04D % 4, 113);
                DoActions(GiveUnits(0, (100), (10), (203), (6)))
                f_bwrite_epd(Battlecruiser + 0x04D // 4, 0x04D % 4, 113)
                # (Line 192) if(
                _t29 = EUDIf()
                # (Line 193) Zealot == 0
                # (Line 194) ){
                if _t29(Zealot == 0):
                    # (Line 195) bwrite(0x58D2B0 + 0x207C * ((55) / 46) + (7) * (46 - 31 * ((55) / 46)) + ((55) % 46), 1);
                    f_bwrite(0x58D2B0 + 0x207C * ((55) // 46) + (7) * (46 - 31 * ((55) // 46)) + ((55) % 46), 1)
                    # (Line 196) if(
                    _t30 = EUDIf()
                    # (Line 197) TargetPlayer <= 5 &&
                    # (Line 198) Deaths((TargetPlayer), (10), 7, (92))
                    # (Line 199) ){
                    if _t30(EUDSCAnd()(TargetPlayer <= 5)(Deaths((TargetPlayer), (10), 7, (92)))()):
                        # (Line 200) SetMemoryEPD(Battlecruiser + 0x05C / 4, SetTo, (4*TE.Heroes[TargetPlayer])+0x58A364);
                        # (Line 201) if(
                        DoActions(SetMemoryEPD(Battlecruiser + 0x05C // 4, SetTo, (4 * TE.Heroes[TargetPlayer]) + 0x58A364))
                        _t31 = EUDIf()
                        # (Line 202) Bring((TargetPlayer), (0), 1, (78), (203)) &&
                        # (Line 203) Bring((TargetPlayer), (10), 0, (78), (98))
                        # (Line 204) ){
                        if _t31(EUDSCAnd()(Bring((TargetPlayer), (0), 1, (78), (203)))(Bring((TargetPlayer), (10), 0, (78), (98)))()):
                            # (Line 205) SetMemoryEPD(Battlecruiser + 0x05C / 4, SetTo, (4*TE.SubUnit[TargetPlayer])+0x58A364);
                            # (Line 206) }
                            DoActions(SetMemoryEPD(Battlecruiser + 0x05C // 4, SetTo, (4 * TE.SubUnit[TargetPlayer]) + 0x58A364))
                            # (Line 207) }
                        EUDEndIf()
                        # (Line 208) else{
                    if EUDElse()():
                        # (Line 209) KillUnitAt(0, (29), (9), (7));
                        # (Line 210) }
                        DoActions(KillUnitAt(0, (29), (9), (7)))
                        # (Line 211) }
                    EUDEndIf()
                    # (Line 212) else{
                if EUDElse()():
                    # (Line 213) bwrite(0x58D2B0 + 0x207C * ((55) / 46) + (7) * (46 - 31 * ((55) / 46)) + ((55) % 46), 0);
                    f_bwrite(0x58D2B0 + 0x207C * ((55) // 46) + (7) * (46 - 31 * ((55) // 46)) + ((55) % 46), 0)
                    # (Line 214) SetMemoryEPD(Battlecruiser + 0x05C / 4, SetTo, Zealot);
                    # (Line 215) }
                    DoActions(SetMemoryEPD(Battlecruiser + 0x05C // 4, SetTo, Zealot))
                    # (Line 216) }
                EUDEndIf()
                # (Line 217) }
            EUDEndIf()
            # (Line 218) }
        EUDEndIf()
        # (Line 221) if(
    EUDEndIf()
    _t32 = EUDIf()
    # (Line 222) Deaths((6), (10), 28, (212)) &&
    # (Line 223) Memory(0x6283F0, (1), 1698)
    # (Line 224) ){
    if _t32(EUDSCAnd()(Deaths((6), (10), 28, (212)))(Memory(0x6283F0, (1), 1698))()):
        # (Line 225) TE.NumPlyr = TE.GetNumPlyr();
        _ATTW(TE, 'NumPlyr') << (TE.GetNumPlyr())
        # (Line 226) if(
        _t33 = EUDIf()
        # (Line 227) TE.NumPlyr >= 3
        # (Line 228) ){
        if _t33(TE.NumPlyr >= 3):
            # (Line 229) dwwrite(0x65FD00 + 9808 + 132 * 4, dwread(0x65FD00 + 9808 + 132 * 4) + 384000 * (TE.NumPlyr-2));
            f_dwwrite(0x65FD00 + 9808 + 132 * 4, f_dwread(0x65FD00 + 9808 + 132 * 4) + 384000 * (TE.NumPlyr - 2))
            # (Line 230) wwrite(0x65FD00 + 4352 + 132 * 2, wread(0x65FD00 + 4352 + 132 * 2) + 500 * (TE.NumPlyr-2));
            f_wwrite(0x65FD00 + 4352 + 132 * 2, f_wread(0x65FD00 + 4352 + 132 * 2) + 500 * (TE.NumPlyr - 2))
            # (Line 231) dwwrite(0x65FD00 + 9808 + 35 * 4, dwread(0x65FD00 + 9808 + 35 * 4) + 12800 * (TE.NumPlyr-2));
            f_dwwrite(0x65FD00 + 9808 + 35 * 4, f_dwread(0x65FD00 + 9808 + 35 * 4) + 12800 * (TE.NumPlyr - 2))
            # (Line 232) }
            # (Line 233) BossSpellHP = 64000 * TE.NumPlyr;
        EUDEndIf()
        BossSpellHP << (64000 * TE.NumPlyr)
        # (Line 234) if(
        _t34 = EUDIf()
        # (Line 235) Switch((38), (2))
        # (Line 236) ){
        if _t34(Switch((38), (2))):
            # (Line 237) BossSpellHP *= 2;
            BossSpellHP.__imul__(2)
            # (Line 238) }
            # (Line 239) TE.Boss = epdread_epd(EPD(0x628438));
        EUDEndIf()
        _ATTW(TE, 'Boss') << (f_epdread_epd(EPD(0x628438)))
        # (Line 240) SetDeaths((6), (7), 0, (212));
        # (Line 241) CreateUnit(1, (132), (152), (7));
        DoActions(SetDeaths((6), (7), 0, (212)))
        # (Line 242) TE.QskillCooldownPvE[7] = 15;
        DoActions(CreateUnit(1, (132), (152), (7)))
        _ARRW(TE.QskillCooldownPvE, 7) << (15)
        # (Line 243) TE.WskillCooldownPvE[7] = 5;
        _ARRW(TE.WskillCooldownPvE, 7) << (5)
        # (Line 244) TE.EskillCooldownPvE[7] = 20;
        _ARRW(TE.EskillCooldownPvE, 7) << (20)
        # (Line 245) }
        # (Line 246) if(
    EUDEndIf()
    _t35 = EUDIf()
    # (Line 247) Command((7), (0), 1, (132)) &&
    # (Line 248) Switch((37), (2)) &&
    # (Line 249) TE.Boss != 0
    # (Line 250) ){
    if _t35(EUDSCAnd()(Command((7), (0), 1, (132)))(Switch((37), (2)))(TE.Boss == 0, neg=True)()):
        # (Line 251) if(
        _t36 = EUDIf()
        # (Line 252) Switch((38), (2)) &&
        # (Line 253) MemoryEPD(TE.Boss + 0x008 / 4, AtMost, BossSpellHP) &&
        # (Line 254) MemoryEPD(TE.Boss + 0x060 / 4, AtMost, 128) &&
        # (Line 255) Deaths((7), (10), 0, (165))
        # (Line 256) ){
        if _t36(EUDSCAnd()(Switch((38), (2)))(MemoryEPD(TE.Boss + 0x008 // 4, AtMost, BossSpellHP))(MemoryEPD(TE.Boss + 0x060 // 4, AtMost, 128))(Deaths((7), (10), 0, (165)))()):
            # (Line 257) SetDeaths((7), (7), 1, (165));
            # (Line 258) }
            DoActions(SetDeaths((7), (7), 1, (165)))
            # (Line 259) if(
        EUDEndIf()
        _t37 = EUDIf()
        # (Line 260) Command((7), (0), 1, (35)) &&
        # (Line 261) Deaths((7), (10), 0, (207))
        # (Line 262) ){
        if _t37(EUDSCAnd()(Command((7), (0), 1, (35)))(Deaths((7), (10), 0, (207)))()):
            # (Line 263) var RedLarva = 0;
            RedLarva = EUDVariable()
            RedLarva << (0)
            # (Line 264) var BlueLarva = 0;
            BlueLarva = EUDVariable()
            BlueLarva << (0)
            # (Line 265) var YellowLarva = 0;
            YellowLarva = EUDVariable()
            YellowLarva << (0)
            # (Line 266) var GreenLarva = 0;
            GreenLarva = EUDVariable()
            GreenLarva << (0)
            # (Line 267) var RainbowLarva = 0;
            RainbowLarva = EUDVariable()
            RainbowLarva << (0)
            # (Line 268) var MaxHP = 0;
            MaxHP = EUDVariable()
            MaxHP << (0)
            # (Line 269) var CurrentPhase = 0;
            CurrentPhase = EUDVariable()
            CurrentPhase << (0)
            # (Line 270) MaxHP = dwread(0x65FD00 + 9808 + 132 * 4);
            MaxHP << (f_dwread(0x65FD00 + 9808 + 132 * 4))
            # (Line 271) MaxHP /= 4;
            MaxHP.__ifloordiv__(4)
            # (Line 272) CurrentPhase = dwread_epd(TE.Boss + 0x008 / 4);
            CurrentPhase << (f_dwread_epd(TE.Boss + 0x008 // 4))
            # (Line 273) CurrentPhase = 4-(CurrentPhase/MaxHP);
            CurrentPhase << (4 - (CurrentPhase // MaxHP))
            # (Line 274) foreach(ptr, epd : EUDLoopPlayerUnit(7) ) {
            for ptr, epd in EUDLoopPlayerUnit(7):
                # (Line 275) if(
                _t38 = EUDIf()
                # (Line 276) wread_epd(epd + 0x064 / 4,  0x064 % 4) == 35
                # (Line 277) ){
                if _t38(f_wread_epd(epd + 0x064 // 4, 0x064 % 4) == 35):
                    # (Line 278) var LarvaColor;
                    LarvaColor = EUDVariable()
                    # (Line 279) LarvaColor = dwread_epd(epd + 0x00C / 4);
                    LarvaColor << (f_dwread_epd(epd + 0x00C // 4))
                    # (Line 280) LarvaColor = bread(LarvaColor + 0x0A);
                    LarvaColor << (f_bread(LarvaColor + 0x0A))
                    # (Line 281) if(
                    _t39 = EUDIf()
                    # (Line 282) LarvaColor != 7 &&
                    # (Line 283) Deaths((7), (0), 1, (165))
                    # (Line 284) ){
                    if _t39(EUDSCAnd()(LarvaColor == 7, neg=True)(Deaths((7), (0), 1, (165)))()):
                        # (Line 285) continue;
                        EUDContinue()
                        # (Line 286) }
                        # (Line 287) switch(LarvaColor) {
                    EUDEndIf()
                    EUDSwitch(LarvaColor)
                    # (Line 288) case 7:
                    _t40 = EUDSwitchCase()
                    # (Line 289) if(
                    if _t40(7):
                        _t41 = EUDIf()
                        # (Line 290) Switch((1), (3)) &&
                        # (Line 291) Switch((2), (3))
                        # (Line 292) ){
                        if _t41(EUDSCAnd()(Switch((1), (3)))(Switch((2), (3)))()):
                            # (Line 293) TE.SetUnitColor(ptr,0);
                            TE.SetUnitColor(ptr, 0)
                            # (Line 294) }
                            # (Line 295) if(
                        EUDEndIf()
                        _t42 = EUDIf()
                        # (Line 296) Switch((1), (2)) &&
                        # (Line 297) Switch((2), (3))
                        # (Line 298) ){
                        if _t42(EUDSCAnd()(Switch((1), (2)))(Switch((2), (3)))()):
                            # (Line 299) TE.SetUnitColor(ptr,3);
                            TE.SetUnitColor(ptr, 3)
                            # (Line 300) }
                            # (Line 301) if(
                        EUDEndIf()
                        _t43 = EUDIf()
                        # (Line 302) Switch((1), (3)) &&
                        # (Line 303) Switch((2), (2))
                        # (Line 304) ){
                        if _t43(EUDSCAnd()(Switch((1), (3)))(Switch((2), (2)))()):
                            # (Line 305) TE.SetUnitColor(ptr,4);
                            TE.SetUnitColor(ptr, 4)
                            # (Line 306) }
                            # (Line 307) if(
                        EUDEndIf()
                        _t44 = EUDIf()
                        # (Line 308) Switch((1), (2)) &&
                        # (Line 309) Switch((2), (2))
                        # (Line 310) ){
                        if _t44(EUDSCAnd()(Switch((1), (2)))(Switch((2), (2)))()):
                            # (Line 311) TE.SetUnitColor(ptr,10);
                            TE.SetUnitColor(ptr, 10)
                            # (Line 312) }
                            # (Line 313) if(
                        EUDEndIf()
                        _t45 = EUDIf()
                        # (Line 314) CurrentPhase >= 2 &&
                        # (Line 315) Command((7), (1), CurrentPhase-1, (35))
                        # (Line 316) ){
                        if _t45(EUDSCAnd()(CurrentPhase >= 2)(Command((7), (1), CurrentPhase - 1, (35)))()):
                            # (Line 317) TE.SetUnitColor(ptr,8);
                            TE.SetUnitColor(ptr, 8)
                            # (Line 318) }
                            # (Line 319) break;
                        EUDEndIf()
                        EUDBreak()
                        # (Line 320) case 0:
                    _t46 = EUDSwitchCase()
                    # (Line 321) RedLarva += 1;
                    if _t46(0):
                        RedLarva.__iadd__(1)
                        # (Line 322) if(
                        _t47 = EUDIf()
                        # (Line 323) TE.QskillCooldownPvE[7] >= 1
                        # (Line 324) ){
                        if _t47(TE.QskillCooldownPvE[7] >= 1):
                            # (Line 325) TE.QskillCooldownPvE[7] -= 1;
                            _ARRW(TE.QskillCooldownPvE, 7).__isub__(1)
                            # (Line 326) }
                            # (Line 327) break;
                        EUDEndIf()
                        EUDBreak()
                        # (Line 328) case 3:
                    _t48 = EUDSwitchCase()
                    # (Line 329) BlueLarva += 1;
                    if _t48(3):
                        BlueLarva.__iadd__(1)
                        # (Line 330) if(
                        _t49 = EUDIf()
                        # (Line 331) TE.WskillCooldownPvE[7] >= 1
                        # (Line 332) ){
                        if _t49(TE.WskillCooldownPvE[7] >= 1):
                            # (Line 333) TE.WskillCooldownPvE[7] -= 1;
                            _ARRW(TE.WskillCooldownPvE, 7).__isub__(1)
                            # (Line 334) }
                            # (Line 335) break;
                        EUDEndIf()
                        EUDBreak()
                        # (Line 336) case 4:
                    _t50 = EUDSwitchCase()
                    # (Line 337) YellowLarva += 1;
                    if _t50(4):
                        YellowLarva.__iadd__(1)
                        # (Line 338) if(
                        _t51 = EUDIf()
                        # (Line 339) TE.EskillCooldownPvE[7] >= 1
                        # (Line 340) ){
                        if _t51(TE.EskillCooldownPvE[7] >= 1):
                            # (Line 341) TE.EskillCooldownPvE[7] -= 1;
                            _ARRW(TE.EskillCooldownPvE, 7).__isub__(1)
                            # (Line 342) }
                            # (Line 343) break;
                        EUDEndIf()
                        EUDBreak()
                        # (Line 344) case 10:
                    _t52 = EUDSwitchCase()
                    # (Line 345) GreenLarva += 1;
                    if _t52(10):
                        GreenLarva.__iadd__(1)
                        # (Line 346) TE.HealUnit(TE.Boss,512);
                        TE.HealUnit(TE.Boss, 512)
                        # (Line 347) break;
                        EUDBreak()
                        # (Line 348) case 8:
                    _t53 = EUDSwitchCase()
                    # (Line 349) RedLarva += 1;
                    if _t53(8):
                        RedLarva.__iadd__(1)
                        # (Line 350) BlueLarva += 1;
                        BlueLarva.__iadd__(1)
                        # (Line 351) YellowLarva += 1;
                        YellowLarva.__iadd__(1)
                        # (Line 352) GreenLarva += 1;
                        GreenLarva.__iadd__(1)
                        # (Line 353) RainbowLarva += 1;
                        RainbowLarva.__iadd__(1)
                        # (Line 354) if(
                        _t54 = EUDIf()
                        # (Line 355) TE.QskillCooldownPvE[7] >= 1
                        # (Line 356) ){
                        if _t54(TE.QskillCooldownPvE[7] >= 1):
                            # (Line 357) TE.QskillCooldownPvE[7] -= 1;
                            _ARRW(TE.QskillCooldownPvE, 7).__isub__(1)
                            # (Line 358) }
                            # (Line 359) if(
                        EUDEndIf()
                        _t55 = EUDIf()
                        # (Line 360) TE.WskillCooldownPvE[7] >= 1
                        # (Line 361) ){
                        if _t55(TE.WskillCooldownPvE[7] >= 1):
                            # (Line 362) TE.WskillCooldownPvE[7] -= 1;
                            _ARRW(TE.WskillCooldownPvE, 7).__isub__(1)
                            # (Line 363) }
                            # (Line 364) if(
                        EUDEndIf()
                        _t56 = EUDIf()
                        # (Line 365) TE.EskillCooldownPvE[7] >= 1
                        # (Line 366) ){
                        if _t56(TE.EskillCooldownPvE[7] >= 1):
                            # (Line 367) TE.EskillCooldownPvE[7] -= 1;
                            _ARRW(TE.EskillCooldownPvE, 7).__isub__(1)
                            # (Line 368) }
                            # (Line 369) TE.HealUnit(TE.Boss,512);
                        EUDEndIf()
                        TE.HealUnit(TE.Boss, 512)
                        # (Line 370) break;
                        EUDBreak()
                        # (Line 371) }
                    # (Line 372) }
                    EUDEndSwitch()
                    # (Line 373) }
                EUDEndIf()
                # (Line 374) if(

            _t57 = EUDIf()
            # (Line 375) Bring((14), (0), 1, (230), (98))
            # (Line 376) ){
            if _t57(Bring((14), (0), 1, (230), (98))):
                # (Line 377) if(
                _t58 = EUDIf()
                # (Line 378) RedLarva >= 1
                # (Line 379) ){
                if _t58(RedLarva >= 1):
                    # (Line 380) if(
                    _t59 = EUDIf()
                    # (Line 381) TE.QskillCooldownPvE[7] == 0 &&
                    # (Line 382) Bring((9), (10), 0, (47), (203))
                    # (Line 383) ){
                    if _t59(EUDSCAnd()(TE.QskillCooldownPvE[7] == 0)(Bring((9), (10), 0, (47), (203)))()):
                        # (Line 384) TE.QskillCooldownPvE[7] = 20;
                        _ARRW(TE.QskillCooldownPvE, 7) << (20)
                        # (Line 385) SetDeaths((7), (7), 7, (153));
                        # (Line 386) CreateUnit(1, (47), (10), (7));
                        DoActions(SetDeaths((7), (7), 7, (153)))
                        # (Line 387) GiveUnits(0, (47), (7), (10), (9));
                        DoActions(CreateUnit(1, (47), (10), (7)))
                        # (Line 388) SetInvincibility((4), (47), (9), (10));
                        DoActions(GiveUnits(0, (47), (7), (10), (9)))
                        # (Line 389) MoveUnit(0, (47), (9), (10), (203));
                        DoActions(SetInvincibility((4), (47), (9), (10)))
                        # (Line 390) }
                        DoActions(MoveUnit(0, (47), (9), (10), (203)))
                        # (Line 391) }
                    EUDEndIf()
                    # (Line 392) else{
                if EUDElse()():
                    # (Line 393) TE.QskillCooldownPvE[7] = 15;
                    _ARRW(TE.QskillCooldownPvE, 7) << (15)
                    # (Line 394) }
                    # (Line 395) if(
                EUDEndIf()
                _t60 = EUDIf()
                # (Line 396) BlueLarva >= 1
                # (Line 397) ){
                if _t60(BlueLarva >= 1):
                    # (Line 398) if(
                    _t61 = EUDIf()
                    # (Line 399) TE.WskillCooldownPvE[7] == 0 &&
                    # (Line 400) Bring((14), (0), 1, (47), (204))
                    # (Line 401) ){
                    if _t61(EUDSCAnd()(TE.WskillCooldownPvE[7] == 0)(Bring((14), (0), 1, (47), (204)))()):
                        # (Line 402) TE.WskillCooldownPvE[7] = 30;
                        _ARRW(TE.WskillCooldownPvE, 7) << (30)
                        # (Line 403) MoveLocation((107), (132), (7), (9));
                        # (Line 404) KillUnitAt(0, (47), (107), (14));
                        DoActions(MoveLocation((107), (132), (7), (9)))
                        # (Line 405) CreateUnit(1, (82), (107), (7));
                        DoActions(KillUnitAt(0, (47), (107), (14)))
                        # (Line 406) KillUnitAt(0, (82), (9), (7));
                        DoActions(CreateUnit(1, (82), (107), (7)))
                        # (Line 407) }
                        DoActions(KillUnitAt(0, (82), (9), (7)))
                        # (Line 408) }
                    EUDEndIf()
                    # (Line 409) else{
                if EUDElse()():
                    # (Line 410) TE.WskillCooldownPvE[7] = 5;
                    _ARRW(TE.WskillCooldownPvE, 7) << (5)
                    # (Line 411) }
                    # (Line 412) if(
                EUDEndIf()
                _t62 = EUDIf()
                # (Line 413) YellowLarva >= 1
                # (Line 414) ){
                if _t62(YellowLarva >= 1):
                    # (Line 415) if(
                    _t63 = EUDIf()
                    # (Line 416) Bring((7), (1), 3, (37), (204))
                    # (Line 417) ){
                    if _t63(Bring((7), (1), 3, (37), (204))):
                        # (Line 418) if(
                        _t64 = EUDIf()
                        # (Line 419) TE.EskillCooldownPvE[7] == 0
                        # (Line 420) ){
                        if _t64(TE.EskillCooldownPvE[7] == 0):
                            # (Line 421) TE.EskillCooldownPvE[7] = 45;
                            _ARRW(TE.EskillCooldownPvE, 7) << (45)
                            # (Line 422) CreateUnit(3, (37), (10), (7));
                            # (Line 423) CreateUnit(3, (43), (10), (7));
                            DoActions(CreateUnit(3, (37), (10), (7)))
                            # (Line 424) GiveUnits(0, (43), (7), (10), (9));
                            DoActions(CreateUnit(3, (43), (10), (7)))
                            # (Line 425) for(var i = 0 ; i < 3 ; i++){
                            DoActions(GiveUnits(0, (43), (7), (10), (9)))
                            i = EUDVariable()
                            i << (0)
                            if EUDWhile()(i >= 3, neg=True):
                                def _t66():
                                    i.__iadd__(1)
                                # (Line 426) var Loc = 208+i*2+TE.Random % 2;
                                Loc = EUDVariable()
                                Loc << (208 + i * 2 + TE.Random % 2)
                                # (Line 427) MoveUnit(1, (37), (7), (10), (Loc));
                                # (Line 428) MoveUnit(1, (43), (9), (10), (Loc));
                                DoActions(MoveUnit(1, (37), (7), (10), (Loc)))
                                # (Line 429) }
                                DoActions(MoveUnit(1, (43), (9), (10), (Loc)))
                                # (Line 430) KillUnit((43), (9));
                                EUDSetContinuePoint()
                                _t66()
                            EUDEndWhile()
                            # (Line 431) MoveLocation((97), (230), (14), (98));
                            DoActions(KillUnit((43), (9)))
                            # (Line 432) Order((37), (7), (203), (2), (97));
                            DoActions(MoveLocation((97), (230), (14), (98)))
                            # (Line 433) }
                            DoActions(Order((37), (7), (203), (2), (97)))
                            # (Line 434) }
                        EUDEndIf()
                        # (Line 435) else{
                    if EUDElse()():
                        # (Line 436) TE.EskillCooldownPvE[7] = 20;
                        _ARRW(TE.EskillCooldownPvE, 7) << (20)
                        # (Line 437) }
                        # (Line 438) }
                    EUDEndIf()
                    # (Line 439) else{
                if EUDElse()():
                    # (Line 440) TE.EskillCooldownPvE[7] = 25;
                    _ARRW(TE.EskillCooldownPvE, 7) << (25)
                    # (Line 441) }
                    # (Line 442) if(
                EUDEndIf()
                _t67 = EUDIf()
                # (Line 443) Command((7), (10), 3, (35)) &&
                # (Line 444) CurrentPhase >= 2 &&
                # (Line 445) RainbowLarva == 0
                # (Line 446) ){
                if _t67(EUDSCAnd()(Command((7), (10), 3, (35)))(CurrentPhase >= 2)(RainbowLarva == 0)()):
                    # (Line 447) KillUnitAt(1, (35), (9), (13));
                    # (Line 448) }
                    DoActions(KillUnitAt(1, (35), (9), (13)))
                    # (Line 449) if(
                EUDEndIf()
                _t68 = EUDIf()
                # (Line 450) BlueLarva+GreenLarva-RainbowLarva*2 >= 3 &&
                # (Line 451) Deaths((6), (10), 0, (165)) &&
                # (Line 452) Deaths((7), (10), 0, (165)) &&
                # (Line 453) Deaths((8), (10), 0, (165))
                # (Line 454) ){
                if _t68(EUDSCAnd()(BlueLarva + GreenLarva - RainbowLarva * 2 >= 3)(Deaths((6), (10), 0, (165)))(Deaths((7), (10), 0, (165)))(Deaths((8), (10), 0, (165)))()):
                    # (Line 455) KillUnitAt(1, (35), (9), (7));
                    # (Line 456) SetDeaths((8), (7), 1, (165));
                    DoActions(KillUnitAt(1, (35), (9), (7)))
                    # (Line 457) }
                    DoActions(SetDeaths((8), (7), 1, (165)))
                    # (Line 458) }
                EUDEndIf()
                # (Line 459) }
            EUDEndIf()
            # (Line 460) if(
        EUDEndIf()
        _t69 = EUDIf()
        # (Line 461) Deaths((8), (10), 1, (165)) &&
        # (Line 462) Deaths((6), (1), 228, (165)) &&
        # (Line 463) Deaths((6), (0), 61, (165)) &&
        # (Line 464) dwread_epd(EPD(0x58A364 + 48 * 165 + 4 * 6)) % 3 == 0
        # (Line 465) ){
        if _t69(EUDSCAnd()(Deaths((8), (10), 1, (165)))(Deaths((6), (1), 228, (165)))(Deaths((6), (0), 61, (165)))(f_dwread_epd(EPD(0x58A364 + 48 * 165 + 4 * 6)) % 3 == 0)()):
            # (Line 466) for(var i = 0 ; i < 2 ; i++){
            i = EUDVariable()
            i << (0)
            if EUDWhile()(i >= 2, neg=True):
                def _t71():
                    i.__iadd__(1)
                # (Line 467) MoveLocation((97), (132), (7), (83));
                # (Line 468) TE.CreateBullet(7,dwread_epd(EPD(0x58A364 + 48 * 165 + 4 * 6)) * 3 + 36 + i * 180,1707);
                DoActions(MoveLocation((97), (132), (7), (83)))
                TE.CreateBullet(7, f_dwread_epd(EPD(0x58A364 + 48 * 165 + 4 * 6)) * 3 + 36 + i * 180, 1707)
                # (Line 469) }
                # (Line 470) }
                EUDSetContinuePoint()
                _t71()
            EUDEndWhile()
            # (Line 471) if(
        EUDEndIf()
        _t72 = EUDIf()
        # (Line 472) Deaths((8), (10), 2, (165)) &&
        # (Line 473) Deaths((7), (0), 36, (165)) &&
        # (Line 474) Deaths((7), (1), 215, (165)) &&
        # (Line 475) dwread_epd(EPD(0x58A364 + 48 * 165 + 4 * 7)) % 9 == 0 &&
        # (Line 476) Memory(0x6283F0, (1), 1695)
        # (Line 477) ){
        if _t72(EUDSCAnd()(Deaths((8), (10), 2, (165)))(Deaths((7), (0), 36, (165)))(Deaths((7), (1), 215, (165)))(f_dwread_epd(EPD(0x58A364 + 48 * 165 + 4 * 7)) % 9 == 0)(Memory(0x6283F0, (1), 1695))()):
            # (Line 478) bwrite_epd(TE.Boss + 0x0CA / 4,  0x0CA % 4, 10);
            f_bwrite_epd(TE.Boss + 0x0CA // 4, 0x0CA % 4, 10)
            # (Line 479) for(var i = 0 ; i < 5 ; i++){
            i = EUDVariable()
            i << (0)
            if EUDWhile()(i >= 5, neg=True):
                def _t74():
                    i.__iadd__(1)
                # (Line 480) MoveLocation((97), (132), (7), (83));
                # (Line 481) TE.CreateBullet(9,i*72 + 36 * (dwread_epd(EPD(0x58A364 + 48 * 165 + 4 * 7)) % 2),2707);
                DoActions(MoveLocation((97), (132), (7), (83)))
                TE.CreateBullet(9, i * 72 + 36 * (f_dwread_epd(EPD(0x58A364 + 48 * 165 + 4 * 7)) % 2), 2707)
                # (Line 482) }
                # (Line 483) }
                EUDSetContinuePoint()
                _t74()
            EUDEndWhile()
            # (Line 484) }
        EUDEndIf()
        # (Line 487) }
    EUDEndIf()
