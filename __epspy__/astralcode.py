## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import TriggerEditor as TE;
import TriggerEditor as TE
# (Line 317) function Color(){
@EUDFunc
def Color():
    # (Line 318) switch(dwread_epd(EPD(0x58A364 + 48 * 213 + 4 * 6))) {
    EUDSwitch(f_dwread_epd(EPD(0x58A364 + 48 * 213 + 4 * 6)))
    # (Line 319) case 0:
    _t1 = EUDSwitchCase()
    # (Line 320) TE.SetPColor(8,111,0);
    if _t1(0):
        TE.SetPColor(8, 111, 0)
        # (Line 321) break;
        EUDBreak()
        # (Line 322) case 2:
    _t2 = EUDSwitchCase()
    # (Line 323) TE.SetPColor(8,156,0);
    if _t2(2):
        TE.SetPColor(8, 156, 0)
        # (Line 324) break;
        EUDBreak()
        # (Line 325) case 4:
    _t3 = EUDSwitchCase()
    # (Line 326) TE.SetPColor(8,135,0);
    if _t3(4):
        TE.SetPColor(8, 135, 0)
        # (Line 327) break;
        EUDBreak()
        # (Line 328) case 6:
    _t4 = EUDSwitchCase()
    # (Line 329) TE.SetPColor(8,117,0);
    if _t4(6):
        TE.SetPColor(8, 117, 0)
        # (Line 330) break;
        EUDBreak()
        # (Line 331) case 8:
    _t5 = EUDSwitchCase()
    # (Line 332) TE.SetPColor(8,185,0);
    if _t5(8):
        TE.SetPColor(8, 185, 0)
        # (Line 333) break;
        EUDBreak()
        # (Line 334) case 10:
    _t6 = EUDSwitchCase()
    # (Line 335) TE.SetPColor(8,128,0);
    if _t6(10):
        TE.SetPColor(8, 128, 0)
        # (Line 336) break;
        EUDBreak()
        # (Line 337) case 12:
    _t7 = EUDSwitchCase()
    # (Line 338) TE.SetPColor(8,51,0);
    if _t7(12):
        TE.SetPColor(8, 51, 0)
        # (Line 339) break;
        EUDBreak()
        # (Line 340) case 14:
    _t8 = EUDSwitchCase()
    # (Line 341) TE.SetPColor(8,53,0);
    if _t8(14):
        TE.SetPColor(8, 53, 0)
        # (Line 342) break;
        EUDBreak()
        # (Line 343) case 16:
    _t9 = EUDSwitchCase()
    # (Line 344) TE.SetPColor(8,164,0);
    if _t9(16):
        TE.SetPColor(8, 164, 0)
        # (Line 345) break;
        EUDBreak()
        # (Line 346) case 18:
    _t10 = EUDSwitchCase()
    # (Line 347) TE.SetPColor(8,8,0);
    if _t10(18):
        TE.SetPColor(8, 8, 0)
        # (Line 348) break;
        EUDBreak()
        # (Line 349) case 20:
    _t11 = EUDSwitchCase()
    # (Line 350) TE.SetPColor(8,111,0);
    if _t11(20):
        TE.SetPColor(8, 111, 0)
        # (Line 351) SetDeaths((6), (7), 0, (213));
        # (Line 352) break;
        DoActions(SetDeaths((6), (7), 0, (213)))
        EUDBreak()
        # (Line 353) }
    # (Line 354) SetDeaths((6), (8), 1, (213));
    EUDEndSwitch()
    # (Line 355) if(
    DoActions(SetDeaths((6), (8), 1, (213)))
    _t12 = EUDIf()
    # (Line 356) Switch((19), (2))
    # (Line 357) ){
    if _t12(Switch((19), (2))):
        # (Line 358) foreach(ptr, epd : EUDLoopPlayerUnit(11) ) {
        for ptr, epd in EUDLoopPlayerUnit(11):
            # (Line 359) SetSwitch((19), (5));
            # (Line 360) TE.SetUnitColor(ptr,11);
            DoActions(SetSwitch((19), (5)))
            TE.SetUnitColor(ptr, 11)
            # (Line 361) if(
            _t13 = EUDIf()
            # (Line 362) Switch((26), (2)) &&
            # (Line 363) wread_epd(epd + 0x064 / 4,  0x064 % 4) == 198
            # (Line 364) ){
            if _t13(EUDSCAnd()(Switch((26), (2)))(f_wread_epd(epd + 0x064 // 4, 0x064 % 4) == 198)()):
                # (Line 365) TE.SetUnitColor(ptr,8);
                TE.SetUnitColor(ptr, 8)
                # (Line 366) }
                # (Line 367) }
            EUDEndIf()
            # (Line 368) foreach(ptr, epd : EUDLoopPlayerUnit(9) ) {

        for ptr, epd in EUDLoopPlayerUnit(9):
            # (Line 369) if(
            _t14 = EUDIf()
            # (Line 370) wread_epd(epd + 0x064 / 4,  0x064 % 4) == 87
            # (Line 371) ){
            if _t14(f_wread_epd(epd + 0x064 // 4, 0x064 % 4) == 87):
                # (Line 372) TE.SetUnitColor(ptr,8);
                TE.SetUnitColor(ptr, 8)
                # (Line 373) }
                # (Line 374) }
            EUDEndIf()
            # (Line 375) }

        # (Line 376) if(
    EUDEndIf()
    _t15 = EUDIf()
    # (Line 377) Deaths((6), (10), 0, (207))
    # (Line 378) ){
    if _t15(Deaths((6), (10), 0, (207))):
        # (Line 379) if(
        _t16 = EUDIf()
        # (Line 380) Switch((17), (2)) ||
        # (Line 381) Switch((18), (2))
        # (Line 382) ){
        if _t16(EUDSCOr()(Switch((17), (2)))(Switch((18), (2)))()):
            # (Line 383) foreach(ptr, epd : EUDLoopPlayerUnit(11) ) {
            for ptr, epd in EUDLoopPlayerUnit(11):
                # (Line 384) if(
                _t17 = EUDIf()
                # (Line 385) wread_epd(epd + 0x064 / 4,  0x064 % 4) == 195 ||
                # (Line 386) wread_epd(epd + 0x064 / 4,  0x064 % 4) == 111 ||
                # (Line 387) wread_epd(epd + 0x064 / 4,  0x064 % 4) == 113
                # (Line 388) ){
                if _t17(EUDSCOr()(f_wread_epd(epd + 0x064 // 4, 0x064 % 4) == 195)(f_wread_epd(epd + 0x064 // 4, 0x064 % 4) == 111)(f_wread_epd(epd + 0x064 // 4, 0x064 % 4) == 113)()):
                    # (Line 389) TE.SetUnitColor(ptr,11);
                    TE.SetUnitColor(ptr, 11)
                    # (Line 390) }
                    # (Line 391) }
                EUDEndIf()
                # (Line 392) }

            # (Line 393) foreach(ptr, epd : EUDLoopPlayerUnit(9) ) {
        EUDEndIf()
        for ptr, epd in EUDLoopPlayerUnit(9):
            # (Line 394) if(
            _t18 = EUDIf()
            # (Line 395) wread_epd(epd + 0x064 / 4,  0x064 % 4) == 19 ||
            # (Line 396) wread_epd(epd + 0x064 / 4,  0x064 % 4) == 79 ||
            # (Line 397) wread_epd(epd + 0x064 / 4,  0x064 % 4) == 76 ||
            # (Line 398) wread_epd(epd + 0x064 / 4,  0x064 % 4) == 115
            # (Line 399) ){
            if _t18(EUDSCOr()(f_wread_epd(epd + 0x064 // 4, 0x064 % 4) == 19)(f_wread_epd(epd + 0x064 // 4, 0x064 % 4) == 79)(f_wread_epd(epd + 0x064 // 4, 0x064 % 4) == 76)(f_wread_epd(epd + 0x064 // 4, 0x064 % 4) == 115)()):
                # (Line 400) TE.SetUnitColor(ptr,9);
                TE.SetUnitColor(ptr, 9)
                # (Line 401) }
                # (Line 402) }
            EUDEndIf()
            # (Line 403) }

        # (Line 404) }
    EUDEndIf()
    # (Line 405) function Potential(){

@EUDFunc
def Potential():
    # (Line 407) if(
    _t1 = EUDIf()
    # (Line 408) Deaths((6), (10), 9, (212))
    # (Line 409) ){
    if _t1(Deaths((6), (10), 9, (212))):
        # (Line 410) SetDeaths((6), (7), 0, (212));
        # (Line 411) bwrite(0x58D2B0 + 0x207C * ((9) / 46) + (6) * (46 - 31 * ((9) / 46)) + ((9) % 46), 5);
        DoActions(SetDeaths((6), (7), 0, (212)))
        f_bwrite(0x58D2B0 + 0x207C * ((9) // 46) + (6) * (46 - 31 * ((9) // 46)) + ((9) % 46), 5)
        # (Line 412) bwrite(0x58D2B0 + 0x207C * ((2) / 46) + (6) * (46 - 31 * ((2) / 46)) + ((2) % 46), 5);
        f_bwrite(0x58D2B0 + 0x207C * ((2) // 46) + (6) * (46 - 31 * ((2) // 46)) + ((2) % 46), 5)
        # (Line 413) bwrite(0x58D2B0 + 0x207C * ((13) / 46) + (6) * (46 - 31 * ((13) / 46)) + ((13) % 46), 5);
        f_bwrite(0x58D2B0 + 0x207C * ((13) // 46) + (6) * (46 - 31 * ((13) // 46)) + ((13) % 46), 5)
        # (Line 414) bwrite(0x58D2B0 + 0x207C * ((3) / 46) + (6) * (46 - 31 * ((3) / 46)) + ((3) % 46), 5);
        f_bwrite(0x58D2B0 + 0x207C * ((3) // 46) + (6) * (46 - 31 * ((3) // 46)) + ((3) % 46), 5)
        # (Line 415) bwrite(0x58D2B0 + 0x207C * ((9) / 46) + (7) * (46 - 31 * ((9) / 46)) + ((9) % 46), 5);
        f_bwrite(0x58D2B0 + 0x207C * ((9) // 46) + (7) * (46 - 31 * ((9) // 46)) + ((9) % 46), 5)
        # (Line 416) bwrite(0x58D2B0 + 0x207C * ((2) / 46) + (7) * (46 - 31 * ((2) / 46)) + ((2) % 46), 5);
        f_bwrite(0x58D2B0 + 0x207C * ((2) // 46) + (7) * (46 - 31 * ((2) // 46)) + ((2) % 46), 5)
        # (Line 417) bwrite(0x58D2B0 + 0x207C * ((13) / 46) + (7) * (46 - 31 * ((13) / 46)) + ((13) % 46), 5);
        f_bwrite(0x58D2B0 + 0x207C * ((13) // 46) + (7) * (46 - 31 * ((13) // 46)) + ((13) % 46), 5)
        # (Line 418) bwrite(0x58D2B0 + 0x207C * ((3) / 46) + (7) * (46 - 31 * ((3) / 46)) + ((3) % 46), 5);
        f_bwrite(0x58D2B0 + 0x207C * ((3) // 46) + (7) * (46 - 31 * ((3) // 46)) + ((3) % 46), 5)
        # (Line 419) bwrite(0x58D2B0 + 0x207C * ((9) / 46) + (9) * (46 - 31 * ((9) / 46)) + ((9) % 46), 5);
        f_bwrite(0x58D2B0 + 0x207C * ((9) // 46) + (9) * (46 - 31 * ((9) // 46)) + ((9) % 46), 5)
        # (Line 420) bwrite(0x58D2B0 + 0x207C * ((2) / 46) + (9) * (46 - 31 * ((2) / 46)) + ((2) % 46), 5);
        f_bwrite(0x58D2B0 + 0x207C * ((2) // 46) + (9) * (46 - 31 * ((2) // 46)) + ((2) % 46), 5)
        # (Line 421) bwrite(0x58D2B0 + 0x207C * ((13) / 46) + (9) * (46 - 31 * ((13) / 46)) + ((13) % 46), 5);
        f_bwrite(0x58D2B0 + 0x207C * ((13) // 46) + (9) * (46 - 31 * ((13) // 46)) + ((13) % 46), 5)
        # (Line 422) bwrite(0x58D2B0 + 0x207C * ((3) / 46) + (9) * (46 - 31 * ((3) / 46)) + ((3) % 46), 5);
        f_bwrite(0x58D2B0 + 0x207C * ((3) // 46) + (9) * (46 - 31 * ((3) // 46)) + ((3) % 46), 5)
        # (Line 423) }
        # (Line 424) if(
    EUDEndIf()
    _t2 = EUDIf()
    # (Line 425) Deaths((6), (10), 12, (212))
    # (Line 426) ){
    if _t2(Deaths((6), (10), 12, (212))):
        # (Line 427) SetDeaths((6), (7), 0, (212));
        # (Line 428) bwrite(0x65FD00 + 16592 + 87 * 1, 18);
        DoActions(SetDeaths((6), (7), 0, (212)))
        f_bwrite(0x65FD00 + 16592 + 87 * 1, 18)
        # (Line 429) }
        # (Line 430) if(
    EUDEndIf()
    _t3 = EUDIf()
    # (Line 431) Deaths((6), (10), 19, (212))
    # (Line 432) ){
    if _t3(Deaths((6), (10), 19, (212))):
        # (Line 433) SetDeaths((6), (7), 0, (212));
        # (Line 434) SetMemoryEPD(EPD(0x58D2B0 + 0x207C * ((32) / 46) + (6) * (46 - 31 * ((32) / 46)) + ((32) % 46)), (8), bitlshift(1, 8 * (((6) * (46 - 31 * ((32) / 46)) + ((32) % 46)) % 4)));
        DoActions(SetDeaths((6), (7), 0, (212)))
        # (Line 435) SetMemoryEPD(EPD(0x58D2B0 + 0x207C * ((32) / 46) + (7) * (46 - 31 * ((32) / 46)) + ((32) % 46)), (8), bitlshift(1, 8 * (((7) * (46 - 31 * ((32) / 46)) + ((32) % 46)) % 4)));
        DoActions(SetMemoryEPD(EPD(0x58D2B0 + 0x207C * ((32) // 46) + (6) * (46 - 31 * ((32) // 46)) + ((32) % 46)), (8), f_bitlshift(1, 8 * (((6) * (46 - 31 * ((32) // 46)) + ((32) % 46)) % 4))))
        # (Line 436) dwwrite(0x65FD00 + 9808 + 76 * 4, dwread(0x65FD00 + 9808 + 76 * 4) + 51200);
        DoActions(SetMemoryEPD(EPD(0x58D2B0 + 0x207C * ((32) // 46) + (7) * (46 - 31 * ((32) // 46)) + ((32) % 46)), (8), f_bitlshift(1, 8 * (((7) * (46 - 31 * ((32) // 46)) + ((32) % 46)) % 4))))
        f_dwwrite(0x65FD00 + 9808 + 76 * 4, f_dwread(0x65FD00 + 9808 + 76 * 4) + 51200)
        # (Line 437) wwrite(0x65FD00 + 4352 + 76 * 2, wread(0x65FD00 + 4352 + 76 * 2) + 500);
        f_wwrite(0x65FD00 + 4352 + 76 * 2, f_wread(0x65FD00 + 4352 + 76 * 2) + 500)
        # (Line 438) bwrite(0x65FD00 + 456 + 76 * 1, bread(0x65FD00 + 456 + 76 * 1) + 2);
        f_bwrite(0x65FD00 + 456 + 76 * 1, f_bread(0x65FD00 + 456 + 76 * 1) + 2)
        # (Line 439) bwrite(0x65FD00 + 16592 + 76 * 1, bread(0x65FD00 + 16592 + 76 * 1) + 1);
        f_bwrite(0x65FD00 + 16592 + 76 * 1, f_bread(0x65FD00 + 16592 + 76 * 1) + 1)
        # (Line 440) wwrite(0x6564E0 + 2512 + 71 * 2, wread(0x6564E0 + 2512 + 71 * 2) + 10);
        f_wwrite(0x6564E0 + 2512 + 71 * 2, f_wread(0x6564E0 + 2512 + 71 * 2) + 10)
        # (Line 441) wwrite(0x6564E0 + 4504 + 71 * 2, wread(0x6564E0 + 4504 + 71 * 2) + 1);
        f_wwrite(0x6564E0 + 4504 + 71 * 2, f_wread(0x6564E0 + 4504 + 71 * 2) + 1)
        # (Line 442) bwrite(0x6564E0 + 2776 + 52 * 1, bread(0x6564E0 + 2776 + 52 * 1) + -15);
        f_bwrite(0x6564E0 + 2776 + 52 * 1, f_bread(0x6564E0 + 2776 + 52 * 1) + -15)
        # (Line 443) ModifyUnitHitPoints(0, (76), (9), (9), 100);
        # (Line 444) wwrite(0x65FD00 + 4352 + 115 * 2, wread(0x65FD00 + 4352 + 115 * 2) + -100);
        DoActions(ModifyUnitHitPoints(0, (76), (9), (9), 100))
        f_wwrite(0x65FD00 + 4352 + 115 * 2, f_wread(0x65FD00 + 4352 + 115 * 2) + -100)
        # (Line 445) dwwrite(0x65FD00 + 9808 + 3 * 4, dwread(0x65FD00 + 9808 + 3 * 4) + 25600);
        f_dwwrite(0x65FD00 + 9808 + 3 * 4, f_dwread(0x65FD00 + 9808 + 3 * 4) + 25600)
        # (Line 446) }
        # (Line 447) if(
    EUDEndIf()
    _t4 = EUDIf()
    # (Line 448) Deaths((6), (10), 20, (212))
    # (Line 449) ){
    if _t4(Deaths((6), (10), 20, (212))):
        # (Line 450) SetDeaths((6), (7), 0, (212));
        # (Line 451) bwrite(0x58CF44 + 0x21FC * ((3) / 24) + (0) * (24 - 4 * ((3) / 24)) + ((3) % 24), 1);
        DoActions(SetDeaths((6), (7), 0, (212)))
        f_bwrite(0x58CF44 + 0x21FC * ((3) // 24) + (0) * (24 - 4 * ((3) // 24)) + ((3) % 24), 1)
        # (Line 452) bwrite(0x58CF44 + 0x21FC * ((3) / 24) + (1) * (24 - 4 * ((3) / 24)) + ((3) % 24), 1);
        f_bwrite(0x58CF44 + 0x21FC * ((3) // 24) + (1) * (24 - 4 * ((3) // 24)) + ((3) % 24), 1)
        # (Line 453) bwrite(0x58CF44 + 0x21FC * ((3) / 24) + (2) * (24 - 4 * ((3) / 24)) + ((3) % 24), 1);
        f_bwrite(0x58CF44 + 0x21FC * ((3) // 24) + (2) * (24 - 4 * ((3) // 24)) + ((3) % 24), 1)
        # (Line 454) bwrite(0x58CF44 + 0x21FC * ((3) / 24) + (3) * (24 - 4 * ((3) / 24)) + ((3) % 24), 1);
        f_bwrite(0x58CF44 + 0x21FC * ((3) // 24) + (3) * (24 - 4 * ((3) // 24)) + ((3) % 24), 1)
        # (Line 455) bwrite(0x58CF44 + 0x21FC * ((3) / 24) + (4) * (24 - 4 * ((3) / 24)) + ((3) % 24), 1);
        f_bwrite(0x58CF44 + 0x21FC * ((3) // 24) + (4) * (24 - 4 * ((3) // 24)) + ((3) % 24), 1)
        # (Line 456) bwrite(0x58CF44 + 0x21FC * ((3) / 24) + (5) * (24 - 4 * ((3) / 24)) + ((3) % 24), 1);
        f_bwrite(0x58CF44 + 0x21FC * ((3) // 24) + (5) * (24 - 4 * ((3) // 24)) + ((3) % 24), 1)
        # (Line 457) }
        # (Line 458) if(
    EUDEndIf()
    _t5 = EUDIf()
    # (Line 459) Deaths((6), (10), 21, (212))
    # (Line 460) ){
    if _t5(Deaths((6), (10), 21, (212))):
        # (Line 461) SetDeaths((6), (7), 0, (212));
        # (Line 462) bwrite(0x58CF44 + 0x21FC * ((16) / 24) + (0) * (24 - 4 * ((16) / 24)) + ((16) % 24), 1);
        DoActions(SetDeaths((6), (7), 0, (212)))
        f_bwrite(0x58CF44 + 0x21FC * ((16) // 24) + (0) * (24 - 4 * ((16) // 24)) + ((16) % 24), 1)
        # (Line 463) bwrite(0x58CF44 + 0x21FC * ((16) / 24) + (1) * (24 - 4 * ((16) / 24)) + ((16) % 24), 1);
        f_bwrite(0x58CF44 + 0x21FC * ((16) // 24) + (1) * (24 - 4 * ((16) // 24)) + ((16) % 24), 1)
        # (Line 464) bwrite(0x58CF44 + 0x21FC * ((16) / 24) + (2) * (24 - 4 * ((16) / 24)) + ((16) % 24), 1);
        f_bwrite(0x58CF44 + 0x21FC * ((16) // 24) + (2) * (24 - 4 * ((16) // 24)) + ((16) % 24), 1)
        # (Line 465) bwrite(0x58CF44 + 0x21FC * ((16) / 24) + (3) * (24 - 4 * ((16) / 24)) + ((16) % 24), 1);
        f_bwrite(0x58CF44 + 0x21FC * ((16) // 24) + (3) * (24 - 4 * ((16) // 24)) + ((16) % 24), 1)
        # (Line 466) bwrite(0x58CF44 + 0x21FC * ((16) / 24) + (4) * (24 - 4 * ((16) / 24)) + ((16) % 24), 1);
        f_bwrite(0x58CF44 + 0x21FC * ((16) // 24) + (4) * (24 - 4 * ((16) // 24)) + ((16) % 24), 1)
        # (Line 467) bwrite(0x58CF44 + 0x21FC * ((16) / 24) + (5) * (24 - 4 * ((16) / 24)) + ((16) % 24), 1);
        f_bwrite(0x58CF44 + 0x21FC * ((16) // 24) + (5) * (24 - 4 * ((16) // 24)) + ((16) % 24), 1)
        # (Line 468) }
        # (Line 470) }
    EUDEndIf()
    # (Line 471) function Carrier(){

@EUDFunc
def Carrier():
    # (Line 473) if(
    _t1 = EUDIf()
    # (Line 474) Command((6), (0), 1, (72)) ||
    # (Line 475) Command((7), (0), 1, (72))
    # (Line 476) ){
    if _t1(EUDSCOr()(Command((6), (0), 1, (72)))(Command((7), (0), 1, (72)))()):
        # (Line 477) if(
        _t2 = EUDIf()
        # (Line 478) Deaths((6), (10), 0, (210))
        # (Line 479) ){
        if _t2(Deaths((6), (10), 0, (210))):
            # (Line 480) foreach(ptr, epd : EUDLoopPlayerUnit(6) ) {
            for ptr, epd in EUDLoopPlayerUnit(6):
                # (Line 481) if(
                _t3 = EUDIf()
                # (Line 482) wread_epd(epd + 0x064 / 4,  0x064 % 4) == 72 &&
                # (Line 483) MemoryEPD(epd + 0x060 / 4, AtMost, 255) &&
                # (Line 484) MemoryEPD(epd + 0x008 / 4, AtLeast, 2560) &&
                # (Line 485) bread_epd(epd + 0x04D / 4,  0x04D % 4) != 0
                # (Line 486) ){
                if _t3(EUDSCAnd()(f_wread_epd(epd + 0x064 // 4, 0x064 % 4) == 72)(MemoryEPD(epd + 0x060 // 4, AtMost, 255))(MemoryEPD(epd + 0x008 // 4, AtLeast, 2560))(f_bread_epd(epd + 0x04D // 4, 0x04D % 4) == 0, neg=True)()):
                    # (Line 487) TE.COrderLocEPD(epd,158,10);
                    TE.COrderLocEPD(epd, 158, 10)
                    # (Line 488) }
                    # (Line 489) }
                EUDEndIf()
                # (Line 490) foreach(ptr, epd : EUDLoopPlayerUnit(7) ) {

            for ptr, epd in EUDLoopPlayerUnit(7):
                # (Line 491) if(
                _t4 = EUDIf()
                # (Line 492) wread_epd(epd + 0x064 / 4,  0x064 % 4) == 72 &&
                # (Line 493) MemoryEPD(epd + 0x060 / 4, AtMost, 255) &&
                # (Line 494) MemoryEPD(epd + 0x008 / 4, AtLeast, 2560) &&
                # (Line 495) bread_epd(epd + 0x04D / 4,  0x04D % 4) != 0
                # (Line 496) ){
                if _t4(EUDSCAnd()(f_wread_epd(epd + 0x064 // 4, 0x064 % 4) == 72)(MemoryEPD(epd + 0x060 // 4, AtMost, 255))(MemoryEPD(epd + 0x008 // 4, AtLeast, 2560))(f_bread_epd(epd + 0x04D // 4, 0x04D % 4) == 0, neg=True)()):
                    # (Line 497) TE.COrderLocEPD(epd,158,11);
                    TE.COrderLocEPD(epd, 158, 11)
                    # (Line 498) }
                    # (Line 499) }
                EUDEndIf()
                # (Line 500) }

            # (Line 501) }
        EUDEndIf()
        # (Line 503) }
    EUDEndIf()
