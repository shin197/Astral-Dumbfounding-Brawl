[File "C:\Users\하늘바라군\Desktop\만능폴더\게임\Scmdraft 2\EUD Editor2 0.17.9.7\Data\eudplibdata\TriggerEditor.eps"]
-------------------------------------------------

              import tempcustomText as tct;
              
              var txtPtr, btnPtr, btnPos, oldCP;
              const trgk = $T('Artanis & safhfh');
              const Heroes = [0, 0, 0, 0, 0, 0, 0, 0];
              const SubUnit = [0, 0, 0, 0, 0, 0, 0, 0];
              const Gateway = [0, 0, 0, 0, 0, 0, 0, 0];
              var Random = 0;
              const ProbeShield = [0, 0, 0, 0, 0, 0, 0, 0];
              const CounterShield = [0, 0, 0, 0, 0, 0, 0, 0];
              var Boss = 0;
              const MinionWaves = [0, 0, 0, 0, 0, 0, 0, 0];
              const HeroPvE = [0, 0, 0, 0, 0, 0, 0, 0];
              const HeroesPtr = [0, 0, 0, 0, 0, 0, 0, 0];
              const Qskills = [0, 0, 0, 0, 0, 0, 0, 0];
              const HeroPvEPtr = [0, 0, 0, 0, 0, 0, 0, 0];
              const QskillCooldownPvE = [0, 0, 0, 0, 0, 0, 0, 0];
              const WskillCooldownPvE = [0, 0, 0, 0, 0, 0, 0, 0];
              const EskillCooldownPvE = [0, 0, 0, 0, 0, 0, 0, 0];
              const ObserverPvE = [0, 0, 0, 0, 0, 0, 0, 0];
              var NumPlyr = 0;
              const Upgrades = [0, 0, 0, 0, 0, 0, 0, 0];
              var DronePoisonTarget = 0;
              var DronePoisonTimer = 0;
              const WidowMines = [0, 0, 0, 0, 0, 0, 0, 0];
              var NewMineIndex = 0;
              const WidowMinesPtr = [0, 0, 0, 0, 0, 0, 0, 0];
              const Scanner = [0, 0, 0, 0, 0, 0, 0, 0];
              
              import astralcode;
              import astralraidboss;
              object MinionWave{
              var mob1;
              var mob2;
              var mob3;
              var mob4;
              var mob5;
              };
              object Qskill{
              var type;
              var target;
              var expire;
              };
              object Upgrade{
              var atk;
              var dfn;
              var ckn;
              var svp;
              var ref;
              };
              
              function COrderLocEPD(UnitEPD, order, loc);
              function PolarLocation(loc, length, angle);
              function HeroBring(loc);
              function CreateBullet(Player, Angle, Speed);
              function COrderUnitEPD(UnitEPD, order, target);
              function SetLocation(Location, X, Y, Width, Height);
              function GetNumPlyr();
              function LocationAngle(origin, dest);
              function CBringEPD(Epd, Loc);
              function RemoveStatusFlagsEPD(epd, flags);
              function AddStatusFlagsEPD(epd, flags);
              function hotkeyUnitEPD(epd, player, hotkey, slot);
              function UnitXposEPD(unit);
              function UnitYposEPD(unit);
              function FastDistance(x1, y1, x2, y2);
              function FastDistanceUnit(unit1, unit2);
              function HealBeacon(HeroType);
              function SetUnitColor(UnitPTR, Color);
              function SetPColor(pnum, color, m);
              function BuildResetEPD(unitEPD);
              function BuildCheckEPD(unitEPD, Unit);
              function GenerateMobWave();
              function DamageUnitEPD(unitEPD, type, amount);
              function DamageCircle(x, y, radius, plyr, type, amount);
              function DamageCircleUnit(unitEPD, radius, plyr, type, amount);
              function QskillInit(Type);
              function CenterCPU(i);
              function CapturePointCPU(i);
              function DefendBaseCPU(i);
              function PushLaneCPU(i);
              function JungleCPU(i);
              function BackdoorCPU(i);
              function FindHealCPU(i, Range, HeroType, EngageHP);
              function FallbackLowCPU(i, Range, DangerHP);
              function HealUnit(epd, amount);
              function CreateChicken(plyr);
              function SetLocationToUnitEPD(Location, UnitEPD, X, Y);
              function HealCooldownMsg();
              function COrderLocEPD(UnitEPD ,order ,loc) {
                  /*ToolTip
                  Korean
                  구조오프셋EPD;
                  var UnitEPD;
                  이;
                  var loc;
                  으로;
                  var order;
                  를 실행합니다.;
                  Korean
                  English
                  English
                  */
                  const locTable = loc * 5;
                  DoActions(locTable.AddNumber(EPD(0x58DC60)));
                  const x1 = dwread_epd(locTable);
                  DoActions(locTable.AddNumber(1));
                  const y1 = dwread_epd(locTable);
                  DoActions(locTable.AddNumber(1));
                  const x2 = dwread_epd(locTable);
                  DoActions(locTable.AddNumber(1));
                  const y2 = dwread_epd(locTable);
                  bwrite_epd(UnitEPD + 0x04D / 4,  0x04D % 4, order);
                  wwrite_epd(UnitEPD + 0x058 / 4,  0x058 % 4, (x1+x2) / 2);
                  wwrite_epd(UnitEPD + 0x05A / 4,  0x05A % 4, (y1+y2) / 2);
              }
              function PolarLocation(loc ,length ,angle) {
                  /*ToolTip
                  Korean
                  var loc;
                  을;
                  var length;
                  만큼;
                  var angle;
                  ° 으로 이동시킵니다.;
                  Korean
                  English
                  English
                  */
                  const x, y = lengthdir(length, angle);
                  const locTable = EPD(0x58DC60) + loc * 5;
                  SetMemoryEPD(locTable, Add, x);
                  SetMemoryEPD(locTable + 2, Add, x);
                  SetMemoryEPD(locTable + 1, Add, y);
                  SetMemoryEPD(locTable + 3, Add, y);
              }
              function HeroBring(loc) {
                  /*ToolTip
                  Korean
                  로케이션;
                  var loc;
                  안에 있는 영웅 수를 반환합니다.;
                  Korean
                  English
                  English
                  */
                  var rev = 0;
                  for(var i = 0 ; i < 6 ; i++){
                      var HeroType;
                      if(
                          Heroes[i] == 0 || 
                          MemoryEPD(Heroes[i] + 0x00C / 4, Exactly, 0)
                      ){
                          continue;
                      }
                      HeroType = wread_epd(Heroes[i] + 0x064 / 4,  0x064 % 4);
                      if(
                          Bring((i), (0), 1, (HeroType), (loc+1))
                      ){
                          rev += 1;
                      }
                  }
                  return rev;
              }
              function CreateBullet(Player ,Angle ,Speed) {
                  var Angle2 = Angle;
                  PolarLocation(96,48,Angle);
                  var NewBullet;
                  NewBullet = epdread_epd(EPD(0x628438));
                  Angle += 90;
                  Angle *= 256;
                  Angle /= 360;
                  while(
                      Angle >= 256
                  ){
                      Angle -= 256;
                  }
                  bwrite(0x65FD00 + 2288 + 98 * 1, Angle / 8);
                  CreateUnit(1, (98), (10), (7));
                  MoveUnit(0, (98), (7), (10), (97));
                  bwrite_epd(NewBullet + 0x04C / 4,  0x04C % 4, Player);
                  SetMemoryEPD(NewBullet + 0x034 / 4, SetTo, Speed);
                  bwrite_epd(NewBullet + 0x021 / 4,  0x021 % 4, Angle);
                  bwrite_epd(NewBullet + 0x023 / 4,  0x023 % 4, Angle);
                  PolarLocation(96,512,Angle2);
                  COrderLocEPD(NewBullet,6,96);
                  RemoveUnitAt(0, (98), (10), (Player));
                  return NewBullet;
              }
              function COrderUnitEPD(UnitEPD ,order ,target) {
                  /*ToolTip
                  Korean
                  구조오프셋EPD;
                  var UnitEPD;
                  이 구조오프셋Ptr;
                  var target;
                  에게;
                  var order;
                  를 실행합니다.;
                  Korean
                  English
                  English
                  */
                  bwrite_epd(UnitEPD + 0x04D / 4,  0x04D % 4, order);
                  SetMemoryEPD(UnitEPD + 0x05C / 4, SetTo, target);
              }
              function SetLocation(Location ,X ,Y ,Width ,Height) {
                  /*ToolTip
                  Korean
                  var Location;
                  의 중심 좌표를;
                  var X;
                  ,;
                  var Y;
                  로 넓이를;
                  var Width;
                  ,;
                  var Height;
                  로 변경합니다.;
                  Korean
                  English
                  English
                  */
                  setloc(Location, X, Y);
                  dilateloc(Location, Width/2, Height/2);
              }
              function GetNumPlyr() {
                  var rev = 0;
                  for(var i = 0 ; i < 6 ; i++){
                      if(
                          Bring((i), (0), 1, (215), (65))
                      ){
                          rev += 1;
                      }
                  }
                  return rev;
              }
              function LocationAngle(origin ,dest) {
                  /*ToolTip
                  Korean
                  var origin;
                  을 기준으로;
                  var dest;
                  간의 각도를 반환합니다.;
                  Korean
                  English
                  English
                  */
                  const locOrigin, locDest = origin * 5, dest * 5;
                  DoActions(list(
                  locOrigin.AddNumber(EPD(0x58DC60)),
                  locDest.AddNumber(EPD(0x58DC60)),
                  ));
                  
                  const x1 = dwread_epd(locOrigin);
                  const x3 = dwread_epd(locDest);
                  DoActions(list(
                  locOrigin.AddNumber(1),
                  locDest.AddNumber(1),
                  ));
                  const y1 = dwread_epd(locOrigin);
                  const y3 = dwread_epd(locDest);
                  DoActions(list(
                  locOrigin.AddNumber(1),
                  locDest.AddNumber(1),
                  ));
                  const x2 = dwread_epd(locOrigin);
                  const x4 = dwread_epd(locDest);
                  DoActions(list(
                  locOrigin.AddNumber(1),
                  locDest.AddNumber(1),
                  ));
                  const y2 = dwread_epd(locOrigin);
                  const y4 = dwread_epd(locDest);
                  
                  const ox, oy = (x1+x2)/2, (y1+y2)/2;
                  const dx, dy = (x3+x4)/2, (y3+y4)/2;
                  
                  return atan2((dx - ox), (oy - dy));
              }
              function CBringEPD(Epd ,Loc) {
                  /*ToolTip
                  Korean
                  구조오프셋 EPD;
                  var Epd;
                  이 로케이션;
                  var Loc;
                  안에 있는지 확인합니다.;
                  Korean
                  English
                  English
                  */
                  const LocTable = EPD(0x58DC60) + Loc*5;
                  const UnitPos_epd = py_eval('f_readgen_epd(0x1FFF1FFF, (0, lambda x: x if x < 8192 else 0), (0, lambda y: y >> 16))');
                  const PosX, PosY = UnitPos_epd(Epd + 0x28/4);
                  if(
                      MemoryXEPD(LocTable + 0, AtMost, PosX, 0x1FFF) &&
                      MemoryXEPD(LocTable + 1, AtMost, PosY, 0x1FFF) &&
                      MemoryXEPD(LocTable + 2, AtLeast, PosX, 0x1FFF) &&
                      MemoryXEPD(LocTable + 3, AtLeast, PosY, 0x1FFF)
                  ){
                      return True;
                  }
                  else{
                      return False;
                  }
              }
              function RemoveStatusFlagsEPD(epd ,flags) {
                  /*ToolTip
                  Korean
                  구조오프셋EPD;
                  var epd;
                  의 스테이터스 플래그;
                  var flags;
                  을 제거합니다.;
                  Korean
                  English
                  English
                  */
[      1 ]        dwsubtract_epd(epd + 0xDC / 4, flags & dwread_epd(epd + 0xDC / 4));
              }
              function AddStatusFlagsEPD(epd ,flags) {
                  /*ToolTip
                  Korean
                  구조오프셋EPD;
                  var epd;
                  의 스테이터스 플래그;
                  var flags;
                  을 추가합니다.;
                  Korean
                  English
                  English
                  */
                  SetMemoryXEPD(epd + 0xDC/4, SetTo, flags, flags);
              }
              function hotkeyUnitEPD(epd ,player ,hotkey ,slot) {
                  /*ToolTip
                  Korean
                  구조오프셋EPD;
                  var epd;
                  를;
                  var player;
                  의 부대;
                  var hotkey;
                  에;
                  var slot;
                  위치로 부대지정합니다.;
                  Korean
                  English
                  English
                  */
                  const targetOrderSpecial = dwread_epd(epd + 0xA5 / 4) & 0xFF00;
                  var alphaID = 0;
                  if(
                      epd == 19025
                  ){
                      alphaID = 1 + targetOrderSpecial * 8;
                  }
                  else{
                      alphaID = 1701 - (0x27821 - epd) / 0x54 + targetOrderSpecial * 8;
                  }
[      2 ]        SetMemoryEPD(EPD(0x57FE60) + 216 * player + 12 * hotkey + slot, SetTo, alphaID);
              }
              function UnitXposEPD(unit) {
                  return wread_epd(unit + 0x028 / 4,  0x028 % 4);
              }
              function UnitYposEPD(unit) {
                  return wread_epd(unit + 0x02A / 4,  0x02A % 4);
              }
              function FastDistance(x1 ,y1 ,x2 ,y2) {
                  var x;
                  var y;
                  var t;
                  if(
                      x1 < x2
                  ){
                      t = x1;
                      x1 = x2;
[      1 ]            x2 = t;
                  }
                  if(
                      y1 < y2
                  ){
                      t = y1;
                      y1 = y2;
                      y2 = t;
                  }
                  x = x1-x2;
                  y = y1-y2;
                  if(
                      x < y
                  ){
                      t = x;
                      x = y;
                      y = t;
                  }
                  var d;
                  if(
[      1 ]            y+y >= x
                  ){
                      d = y+y-x;
                  }
                  else{
                      d = 0;
                  }
                  d += y;
[      1 ]        return x + d / 5;
              }
              function FastDistanceUnit(unit1 ,unit2) {
                  var x1 = wread_epd(unit1 + 0x028 / 4,  0x028 % 4);
[      1 ]        var y1 = wread_epd(unit1 + 0x02A / 4,  0x02A % 4);
[      1 ]        var x2 = wread_epd(unit2 + 0x028 / 4,  0x028 % 4);
                  var y2 = wread_epd(unit2 + 0x02A / 4,  0x02A % 4);
[      1 ]        return FastDistance(x1,y1,x2,y2);
              }
              function HealBeacon(HeroType) {
                  if(
                      HeroType != 74 && 
                      HeroType != 61 && 
                      HeroType != 76
                  ){
                      if(
                          Deaths((13), (10), 0, (198))
                      ){
                          ModifyUnitHitPoints(0, (HeroType), (13), (9), 100);
                          ModifyUnitShields(0, (HeroType), (13), (9), 100);
                          SetDeaths((13), (7), 41, (198));
                          SetDeaths((13), (7), 6, (204));
                      }
                      else{
                          SetDeaths((13), (7), 108, (204));
                      }
                  }
                  else{
                      if(
                          Deaths((13), (10), 0, (198))
                      ){
                          KillUnitAt(0, (HeroType), (64), (13));
                          SetDeaths((13), (7), 7, (212));
                          SetDeaths((13), (7), 10, (204));
                      }
                      else{
                          SetDeaths((13), (7), 109, (204));
                      }
                  }
              }
              function SetUnitColor(UnitPTR ,Color) {
                  var spritePTR;
[      5 ]        spritePTR = dwread(UnitPTR + 0x00C);
[      8 ]        bwrite(spritePTR + 0x0A, Color);
              }
              function SetPColor(pnum ,color ,m) {
                  /*ToolTip
                  Korean
                  var pnum;
                  의 색상을;
                  var color;
                  로 바꿉니다.;
                  var m;
                  미니맵적용;
                  Korean
                  English
                  English
                  */
[      6 ]        const pcolor_dst = 0x581D76 + 8 * pnum;
                  const mcolor_dst = 0x581DD6 + pnum;
[     24 ]        bwrite(pcolor_dst, color);
[      1 ]        if(m)
                  bwrite(mcolor_dst, color);
              }
              function BuildResetEPD(unitEPD) {
                  /*ToolTip
                  Korean
                  구조오프셋EPD;
                  var unitEPD;
                  의 생산 대기열을 초기화합니다.;
                  Korean
                  English
                  English
                  */
                  unitEPD += 0x098 / 4;
                  const oldcp = getcurpl();
                  setcurpl(unitEPD);
                  DoActions(list(
                  SetDeaths(CurrentPlayer, SetTo, 0xE400E4, 0),
                  SetMemory(0x6509B0, Add, 1),
                  SetDeaths(CurrentPlayer, SetTo, 0xE400E4, 0),
                  SetMemory(0x6509B0, Add, 1),
                  SetDeathsX(CurrentPlayer, SetTo, 228, 0, 0xFFFF),
                  SetMemory(0x6509B0, Add, 1),
                  SetDeathsX(CurrentPlayer, SetTo, 0x20000, 0, 0xFF0000),
                  ));
                  setcurpl(oldcp);
              }
              function BuildCheckEPD(unitEPD ,Unit) {
                  /*ToolTip
                  Korean
                  구조오프셋EPD;
                  var unitEPD;
                  이;
                  var Unit;
                  를 생산중인지 확인합니다.;
                  Korean
                  English
                  English
                  */
                  if(
                      wread_epd(unitEPD + 0x098 / 4,  0x098 % 4) == Unit || 
                      wread_epd(unitEPD + 0x09A / 4,  0x09A % 4) == Unit || 
                      wread_epd(unitEPD + 0x09C / 4,  0x09C % 4) == Unit || 
                      wread_epd(unitEPD + 0x09E / 4,  0x09E % 4) == Unit || 
[    896 ]            wread_epd(unitEPD + 0x0A0 / 4,  0x0A0 % 4) == Unit
                  ){
                      return True;
                  }
[      8 ]        return False;
              }
              function GenerateMobWave() {
[      1 ]        const NewWave = MinionWave.cast(MinionWaves[getcurpl()]);
                  if(
                      NewWave.mob1 >= 1
                  ){
                      CreateUnit(NewWave.mob1, (104), (10), (13));
                  }
                  if(
                      NewWave.mob2 >= 1
                  ){
[      1 ]            CreateUnit(NewWave.mob2, (38), (10), (13));
                  }
                  if(
                      NewWave.mob3 >= 1
                  ){
[      1 ]            CreateUnit(NewWave.mob3, (65), (10), (13));
                  }
                  if(
                      NewWave.mob4 >= 1
                  ){
                      CreateUnit(NewWave.mob4, (66), (10), (13));
                  }
                  if(
                      NewWave.mob5 >= 1
                  ){
                      CreateUnit(NewWave.mob5, (22), (10), (13));
                  }
              }
              function DamageUnitEPD(unitEPD ,type ,amount) {
                  /*ToolTip
                  Korean
                  구조오프셋EPD;
                  var unitEPD;
                  에게;
                  var type;
                  타입 으로;
                  var amount;
                  의 데미지를 줍니다.;
                  Korean
                  English
                  English
                  */
                  var Owner;
                  var UnitType;
                  var Invincibility = 0;
                  if(
                      MemoryEPD(unitEPD + 0x00C / 4, Exactly, 0) || 
                      bread_epd(unitEPD + 0x04D / 4,  0x04D % 4) == 0 || 
                      wread_epd(unitEPD + 0x064 / 4,  0x064 % 4) == 14 || 
                      wread_epd(unitEPD + 0x064 / 4,  0x064 % 4) == 101 || 
                      wread_epd(unitEPD + 0x064 / 4,  0x064 % 4) == 202 || 
                      wread_epd(unitEPD + 0x064 / 4,  0x064 % 4) == 105
                  ){
                      return;
                  }
                  Invincibility = dwread_epd(unitEPD + 0x0DC / 4);
                  if(
                      Invincibility & 0x4000000 >= 1
                  ){
                      return;
                  }
                  Owner = bread_epd(unitEPD + 0x04C / 4,  0x04C % 4);
                  UnitType = wread_epd(unitEPD + 0x064 / 4,  0x064 % 4);
                  var AcidSpore = 0;
                  AcidSpore = bread_epd(unitEPD + 0x126 / 4,  0x126 % 4);
                  amount += f_bitlshift(AcidSpore,8);
                  if(
                      bread_epd(unitEPD + 0x114 / 4,  0x114 % 4) >= 2 && 
                      wread_epd(unitEPD + 0x112 / 4,  0x112 % 4) >= 1
                  ){
                      if(
                          wread_epd(unitEPD + 0x112 / 4,  0x112 % 4) >= amount
                      ){
                          SetMemoryEPD(unitEPD + 0x112 / 4, Add, -amount * 65536);
                          amount = 128;
                      }
                      else{
                          amount -= wread_epd(unitEPD + 0x112 / 4,  0x112 % 4);
                          wwrite_epd(unitEPD + 0x112 / 4,  0x112 % 4, 0);
                          bwrite_epd(unitEPD + 0x114 / 4,  0x114 % 4, 1);
                      }
                  }
                  if(
                      bread(0x65FD00 + 19120 + UnitType * 1) >= 1 && 
                      MemoryEPD(unitEPD + 0x060 / 4, AtLeast, 256)
                  ){
                      var ShieldArmor = 0;
                      ShieldArmor = f_bitlshift(bread(0x58D2B0 + 15 + 46 * Owner),8);
                      if(
                          type <= 3
                      ){
                          if(
                              amount >= ShieldArmor
                          ){
                              amount -= ShieldArmor;
                          }
                          else{
                              amount = 128;
                          }
                      }
                      if(
                          MemoryEPD(unitEPD + 0x060 / 4, AtLeast, amount)
                      ){
                          SetMemoryEPD(unitEPD + 0x060 / 4, Add, -amount * 1);
                          return;
                      }
                      else{
                          amount -= dwread_epd(unitEPD + 0x060 / 4);
                          SetMemoryEPD(unitEPD + 0x060 / 4, SetTo, 0);
                      }
                  }
                  if(
                      type <= 3
                  ){
                      var Armor;
                      var ArmorUpgradeType;
                      var ArmorBonus;
                      Armor = bread(0x65FD00 + 456 + UnitType * 1);
                      ArmorUpgradeType = bread(0x65FD00 + 14544 + UnitType * 1);
                      ArmorBonus = bread(0x58D2B0 + ArmorUpgradeType + 46 * Owner);
                      if(
                          (UnitType == 39 || UnitType == 48) && 
                          (((dwread(0x65FD00 + 17280 + UnitType * 4) & 0x40) != 0) || (bread(0x58F32C + 52 + 15 * Owner) != 0))
                      ){
                          ArmorBonus += 2;
                      }
                      ArmorBonus = ArmorBonus & 255;
                      Armor += ArmorBonus;
                      Armor = f_bitlshift(Armor,8);
                      if(
                          amount >= Armor
                      ){
                          amount -= Armor;
                      }
                      else{
                          amount = 128;
                      }
                  }
                  var UnitSize;
                  UnitSize = bread(0x65FD00 + 9344 + UnitType * 1);
                  var DamageCoefficient = 0;
                  DamageCoefficient = dwread_epd(EPD((0x515B88) + (0x14*type) + (0x4*UnitSize)));
                  amount *= DamageCoefficient;
                  amount = f_bitrshift(amount,8);
                  if(
                      amount <= 128
                  ){
                      amount = 128;
                  }
                  if(
                      !MemoryEPD(unitEPD + 0x008 / 4, AtMost, amount)
                  ){
                      SetMemoryEPD(unitEPD + 0x008 / 4, Add, -amount * 1);
                  }
                  else{
                      SetDeaths((Owner), (8), 1, (UnitType));
                      bwrite_epd(unitEPD + 0x04D / 4,  0x04D % 4, 0);
                  }
              }
              function DamageCircle(x ,y ,radius ,plyr ,type ,amount) {
                  /*ToolTip
                  Korean
                  중심좌표;
                  var x;
                  ,;
                  var y;
                  을 중심으로 반경;
                  var radius;
                  내의 플레이어;
                  var plyr;
                  의 유닛에게;
                  var type;
                  타입 으로;
                  var amount;
                  의 데미지를 줍니다.;
                  Korean
                  English
                  English
                  */
                  foreach(ptr, epd :EUDLoopPlayerUnit(plyr) ) {;
                  if(
[      7 ]            FastDistance(x,y,wread_epd(epd + 0x028 / 4,  0x028 % 4),wread_epd(epd + 0x02A / 4,  0x02A % 4)) <= radius
                  ){
                      DamageUnitEPD(epd,type,amount);
                  }
                  };
              }
              function DamageCircleUnit(unitEPD ,radius ,plyr ,type ,amount) {
                  /*ToolTip
                  Korean
                  구조오프셋;
                  var unitEPD;
                  을 중심으로 반경;
                  var radius;
                  내의 플레이어;
                  var plyr;
                  의 유닛에게;
                  var type;
                  타입 으로;
                  var amount;
                  의 데미지를 줍니다.;
                  Korean
                  English
                  English
                  */
                  var x = wread_epd(unitEPD + 0x028 / 4,  0x028 % 4);
                  var y = wread_epd(unitEPD + 0x02A / 4,  0x02A % 4);
[      7 ]        DamageCircle(x,y,radius,plyr,type,amount);
              }
              function QskillInit(Type) {
                  SetDeaths((13), (7), 6, (153));
                  SetDeaths((13), (7), 0, (47));
[      2 ]        Qskill.cast(Qskills[getcurpl()]).type = Type;
                  switch(Type) {
                      case 1:
                          Qskill.cast(Qskills[getcurpl()]).expire = 12;
                          if(
                              Deaths((13), (10), 1, (121)) || 
                              Deaths((13), (10), 4, (121)) || 
                              Deaths((13), (10), 8, (121)) || 
                              Deaths((13), (10), 13, (121))
                          ){
[      1 ]                    Qskill.cast(Qskills[getcurpl()]).type = 2;
                          }
                      break;
                      case 2:
                          Qskill.cast(Qskills[getcurpl()]).expire = 12;
                      break;
                      case 3:
                          Qskill.cast(Qskills[getcurpl()]).expire = 36;
                      break;
                      case 4:
                          Qskill.cast(Qskills[getcurpl()]).expire = 12;
                      break;
                      case 5:
                          Qskill.cast(Qskills[getcurpl()]).expire = 48;
                      break;
                      case 6:
                          Qskill.cast(Qskills[getcurpl()]).expire = 12;
                      break;
                  }
              }
              function CenterCPU(i) {
                  if(
                      Switch((1), (2)) && 
                      Bring((7), (0), 1, (231), (98)) && 
                      Bring((14), (0), 1, (230), (98))
                  ){
                      SetDeaths((i), (7), 3, (150));
                  }
              }
              function CapturePointCPU(i) {
                  if(
                      Switch((3), (2))
                  ){
                      if(
                          Switch((17), (2)) && 
                          Switch((18), (3))
                      ){
                          SetDeaths((i), (7), 7, (150));
                      }
                      if(
                          Switch((18), (2)) && 
                          Switch((17), (3))
                      ){
                          SetDeaths((i), (7), 8, (150));
                      }
                      if(
                          Switch((17), (2)) && 
                          Switch((18), (2))
                      ){
                          if(
                              Switch((4), (2))
                          ){
                              SetDeaths((i), (7), 7, (150));
                          }
                          else{
                              SetDeaths((i), (7), 8, (150));
                          }
                      }
                  }
              }
              function DefendBaseCPU(i) {
                  if(
                      Switch((2), (2)) && 
                      HeroBring(157) >= 1
                  ){
                      SetDeaths((i), (7), 4, (150));
                  }
              }
              function PushLaneCPU(i) {
                  if(
                      Switch((5), (2))
                  ){
                      SetDeaths((i), (7), 1, (150));
                  }
                  else{
                      SetDeaths((i), (7), 2, (150));
                  }
              }
              function JungleCPU(i) {
                  for(var j = 0 ; j < 6 ; j++){
                      if(
                          Deaths((j), (10), 9, (150))
                      ){
                          return;
                      }
                  }
                  if(
                      Bring((17), (0), 1, (79), (9)) || 
                      Bring((17), (0), 1, (19), (9))
                  ){
                      if(
                          Switch((4), (2))
                      ){
                          SetDeaths((i), (7), 9, (150));
                      }
                  }
              }
              function BackdoorCPU(i) {
                  if(
                      Switch((3), (2)) && 
                      Switch((4), (2)) && 
                      Command((6), (10), 0, (124))
                  ){
                      SetDeaths((i), (7), 12, (150));
                  }
              }
              function FindHealCPU(i ,Range ,HeroType ,EngageHP) {
                  if(
                      i != 2 && 
                      i != 5 && 
                      MemoryEPD(HeroPvE[i] + 0x008 / 4, AtMost, EngageHP) && 
                      Bring((17), (0), 1, (219), (Range))
                  ){
                      MoveLocation((97), (219), (17), (Range));
                      Order((HeroType), (13), (9), (0), (97));
                  }
              }
              function FallbackLowCPU(i ,Range ,DangerHP) {
                  if(
                      MemoryEPD(HeroPvE[i] + 0x008 / 4, AtMost, DangerHP) && 
                      Bring((17), (1), 0, (219), (Range))
                  ){
                      SetDeaths((i), (7), 5, (150));
                  }
              }
              function HealUnit(epd ,amount) {
                  var HeroType;
[      3 ]        HeroType = wread_epd(epd + 0x064 / 4,  0x064 % 4);
                  var HeroHP;
[      7 ]        HeroHP = dwread(0x65FD00 + 9808 + HeroType * 4);
                  SetMemoryEPD(epd + 0x008 / 4, Add, amount * 1);
                  if(
                      MemoryEPD(epd + 0x008 / 4, AtLeast, HeroHP)
                  ){
                      SetMemoryEPD(epd + 0x008 / 4, SetTo, HeroHP);
                  }
              }
              function CreateChicken(plyr) {
                  CreateUnit(1, (55), (10), (plyr));
                  MoveUnit(0, (55), (0), (10), (48));
                  MoveUnit(0, (55), (1), (10), (109));
                  MoveUnit(0, (55), (2), (10), (110));
                  MoveUnit(0, (55), (3), (10), (111));
                  MoveUnit(0, (55), (4), (10), (112));
                  MoveUnit(0, (55), (5), (10), (113));
                  SetDeaths((plyr), (7), 120, (91));
              }
              function SetLocationToUnitEPD(Location ,UnitEPD ,X ,Y) {
                  /*ToolTip
                  Korean
                  구조오프셋EPD;
                  var UnitEPD;
                  의;
                  var X;
                  ,;
                  var Y;
                  로;
                  var Location;
                  을 이동합니다.;
                  Korean
                  English
                  English
                  */
                  const xpos = wread_epd(UnitEPD + X / 4, 0);
                  const ypos = wread_epd(UnitEPD + Y / 4, 2);
                  setloc(Location, xpos, ypos);
              }
              function HealCooldownMsg() {
              }
              
              const ClassicTriggerExecTimer0 = [0, 0, 0, 0, 0, 0, 0, 0];
              function ClassicTriggerExec0() {
[     36 ]        if (ClassicTriggerExecTimer0[getcurpl()] == 1) {
                      foreach(ptr, epd : EUDLoopUnit() ) {
                          if(
                              wread(ptr + 0x064) == 107 && 
[      4 ]                    bread(ptr + 0x04C) == getcurpl()
                          ){
                              Scanner[getcurpl()] = epd;
                              hotkeyUnitEPD(epd,getcurpl(),2,0);
                          }
                          if(
                              wread(ptr + 0x064) == 164 && 
[      5 ]                    bread(ptr + 0x04C) == getcurpl()
                          ){
                              hotkeyUnitEPD(epd,getcurpl(),3,0);
                          }
                          if(
                              wread(ptr + 0x064) == 155 && 
[      9 ]                    bread(ptr + 0x04C) == getcurpl()
                          ){
                              hotkeyUnitEPD(epd,getcurpl(),4,0);
                          }
                      }
                  }
[     55 ]        if (ClassicTriggerExecTimer0[getcurpl()] > 0) {
[     42 ]            ClassicTriggerExecTimer0[getcurpl()] += 1;
                  }
              
              }
              const ClassicTriggerExecTimer1 = [0, 0, 0, 0, 0, 0, 0, 0];
              function ClassicTriggerExec1() {
[     46 ]        if (ClassicTriggerExecTimer1[getcurpl()] == 1) {
                      foreach(ptr, epd : EUDLoopUnit() ) {
                          if(
                              wread(ptr + 0x064) == 63 && 
                              bread(ptr + 0x04C) == getcurpl()
                          ){
                              hotkeyUnitEPD(epd,getcurpl(),5,0);
                          }
                      }
                  }
[     42 ]        if (ClassicTriggerExecTimer1[getcurpl()] > 0) {
                      ClassicTriggerExecTimer1[getcurpl()] += 1;
                  }
              
              }
              const ClassicTriggerExecTimer2 = [0, 0, 0, 0, 0, 0, 0, 0];
              function ClassicTriggerExec2() {
[     36 ]        if (ClassicTriggerExecTimer2[getcurpl()] == 1) {
                      DisplayText("\n\x13\x17[!] \x1E스캐너 \x1F업그레이드 \x07완료 \x17[!]\n", (0));
                  }
[     35 ]        if (ClassicTriggerExecTimer2[getcurpl()] > 0) {
                      ClassicTriggerExecTimer2[getcurpl()] += 1;
                  }
              
              }
              const ClassicTriggerExecTimer3 = [0, 0, 0, 0, 0, 0, 0, 0];
              function ClassicTriggerExec3() {
[     52 ]        if (ClassicTriggerExecTimer3[getcurpl()] == 1) {
                      CreateUnit(1, (38), (133), (13));
                      CreateUnit(2, (104), (133), (13));
                      MinionWave.cast(MinionWaves[getcurpl()]).mob1 += 2;
                      MinionWave.cast(MinionWaves[getcurpl()]).mob2 += 1;
                      SetInvincibility((4), (230), (13), (133));
                      MoveUnit(0, (230), (0), (133), (25));
                      MoveUnit(0, (230), (1), (133), (38));
                      MoveUnit(0, (230), (2), (133), (36));
                      MoveUnit(0, (230), (3), (133), (39));
                      MoveUnit(0, (230), (4), (133), (37));
                      MoveUnit(0, (230), (5), (133), (40));
                  }
[     51 ]        if (ClassicTriggerExecTimer3[getcurpl()] > 0) {
[     28 ]            ClassicTriggerExecTimer3[getcurpl()] += 1;
                  }
              
              }
              const ClassicTriggerExecTimer4 = [0, 0, 0, 0, 0, 0, 0, 0];
              function ClassicTriggerExec4() {
[     41 ]        if (ClassicTriggerExecTimer4[getcurpl()] == 1) {
                      MinionWave.cast(MinionWaves[getcurpl()]).mob1 += 2;
                      MinionWave.cast(MinionWaves[getcurpl()]).mob2 += 1;
                      SetResources((7), (8), 300, (1));
                      wwrite(0x655700 + 1152 + 14 * 2, wread(0x655700 + 1152 + 14 * 2) + -750);
                      wwrite(0x655700 + 576 + 14 * 2, wread(0x655700 + 576 + 14 * 2) + -75);
                      wwrite(0x655700 + 1152 + 6 * 2, wread(0x655700 + 1152 + 6 * 2) + -750);
                      wwrite(0x655700 + 576 + 6 * 2, wread(0x655700 + 576 + 6 * 2) + -75);
                      wwrite(0x655700 + 1152 + 12 * 2, wread(0x655700 + 1152 + 12 * 2) + -750);
                      wwrite(0x655700 + 576 + 12 * 2, wread(0x655700 + 576 + 12 * 2) + -75);
                      wwrite(0x655700 + 1152 + 4 * 2, wread(0x655700 + 1152 + 4 * 2) + -750);
                      wwrite(0x655700 + 576 + 4 * 2, wread(0x655700 + 576 + 4 * 2) + -75);
                      wwrite(0x6564E0 + 2512 + 52 * 2, wread(0x6564E0 + 2512 + 52 * 2) + 105);
                      bwrite(0x6564E0 + 536 + 52 * 1, 3);
                      for(var i = 0 ; i < 6 ; i++){
                          bwrite(0x58D088 + 0x21F0 * ((14) / 46) + (i) * (46 - 31 * ((14) / 46)) + ((14) % 46), 20);
                          bwrite(0x58D088 + 0x21F0 * ((6) / 46) + (i) * (46 - 31 * ((6) / 46)) + ((6) % 46), 20);
                          bwrite(0x58D088 + 0x21F0 * ((12) / 46) + (i) * (46 - 31 * ((12) / 46)) + ((12) % 46), 5);
                          bwrite(0x58D088 + 0x21F0 * ((4) / 46) + (i) * (46 - 31 * ((4) / 46)) + ((4) % 46), 5);
                      }
                  }
[     45 ]        if (ClassicTriggerExecTimer4[getcurpl()] > 0) {
                      ClassicTriggerExecTimer4[getcurpl()] += 1;
                  }
              
              }
              function ClassicTriggerStarter0() {
                  if(
                      Command((13), (0), 1, (164)) && 
                      Command((13), (0), 1, (155)) && 
[     16 ]            Command((13), (0), 1, (107))
                  ){
[     40 ]            if (ClassicTriggerExecTimer0[getcurpl()] == 0){
                          ClassicTriggerExecTimer0[getcurpl()] = 1;
[     18 ]                ClassicTriggerExec0();
                      }
                  }
              }
              function ClassicTriggerStarter1() {
                  if(
[      5 ]            Command((13), (0), 1, (63))
                  ){
                      if (ClassicTriggerExecTimer1[getcurpl()] == 0){
                          ClassicTriggerExecTimer1[getcurpl()] = 1;
                          ClassicTriggerExec1();
                      }
                  }
              }
              function ClassicTriggerStarter2() {
                  if(
[    127 ]            bread(0x58D2B0 + 0x207C * ((39) / 46) + (getcurpl()) * (46 - 31 * ((39) / 46)) + ((39) % 46)) == 1
                  ){
                      if (ClassicTriggerExecTimer2[getcurpl()] == 0){
                          ClassicTriggerExecTimer2[getcurpl()] = 1;
                          ClassicTriggerExec2();
                      }
                  }
              }
              function ClassicTriggerStarter3() {
                  if(
[      8 ]            Switch((0), (2))
                  ){
[     44 ]            if (ClassicTriggerExecTimer3[getcurpl()] == 0){
                          ClassicTriggerExecTimer3[getcurpl()] = 1;
                          ClassicTriggerExec3();
                      }
                  }
              }
              function ClassicTriggerStarter4() {
                  if(
[      1 ]            Switch((37), (2))
                  ){
                      if (ClassicTriggerExecTimer4[getcurpl()] == 0){
                          ClassicTriggerExecTimer4[getcurpl()] = 1;
                          ClassicTriggerExec4();
                      }
                  }
              }
              function ClassicTriggerExec() {
[    146 ]        ClassicTriggerExec0();
[     96 ]        ClassicTriggerExec1();
[     79 ]        ClassicTriggerExec2();
[    139 ]        ClassicTriggerExec3();
[     95 ]        ClassicTriggerExec4();
              }
              function ClassicTriggerStarter() {
                  //플레이어 1
[      8 ]        if (playerexist(0)){
[      1 ]            setcurpl(0);
[     21 ]            ClassicTriggerStarter0();
[      3 ]            ClassicTriggerStarter1();
[     33 ]            ClassicTriggerStarter2();
[     13 ]            ClassicTriggerStarter3();
                  }
                  //플레이어 2
[      4 ]        if (playerexist(1)){
[      4 ]            setcurpl(1);
[     13 ]            ClassicTriggerStarter0();
[      3 ]            ClassicTriggerStarter1();
[     23 ]            ClassicTriggerStarter2();
[      5 ]            ClassicTriggerStarter3();
                  }
                  //플레이어 3
[      4 ]        if (playerexist(2)){
[      5 ]            setcurpl(2);
[     16 ]            ClassicTriggerStarter0();
[      3 ]            ClassicTriggerStarter1();
[     22 ]            ClassicTriggerStarter2();
[     14 ]            ClassicTriggerStarter3();
                  }
                  //플레이어 4
[      6 ]        if (playerexist(3)){
                      setcurpl(3);
[      9 ]            ClassicTriggerStarter0();
[      2 ]            ClassicTriggerStarter1();
[     12 ]            ClassicTriggerStarter2();
[     10 ]            ClassicTriggerStarter3();
                  }
                  //플레이어 5
[      5 ]        if (playerexist(4)){
[      1 ]            setcurpl(4);
[     13 ]            ClassicTriggerStarter0();
[      6 ]            ClassicTriggerStarter1();
[     29 ]            ClassicTriggerStarter2();
[     10 ]            ClassicTriggerStarter3();
                  }
                  //플레이어 6
[      6 ]        if (playerexist(5)){
                      setcurpl(5);
[     14 ]            ClassicTriggerStarter0();
[      1 ]            ClassicTriggerStarter1();
[     16 ]            ClassicTriggerStarter2();
[      8 ]            ClassicTriggerStarter3();
                  }
                  //플레이어 7
[      4 ]        if (playerexist(6)){
                      setcurpl(6);
                  }
                  //플레이어 8
[      1 ]        if (playerexist(7)){
[      1 ]            setcurpl(7);
[      3 ]            ClassicTriggerStarter4();
                  }
              }
              function WaitableTriggerExec() {
              }
              function onPluginStart() {
                  randomize();
                  SetMemory(0x515BB8, (7), 192);
                  SetMemory(0x515BBC, (7), 128);
                  EUDPlayerLoop()();
                      if (getcurpl() == 6 || getcurpl() == 7) {
                          if(
                              Command((13), (0), 1, (160)) && 
                              Gateway[getcurpl()] == 0
                          ){
                              foreach(ptr, epd : EUDLoopUnit() ) {
                                  if(
                                      bread_epd(epd + 0x04C / 4,  0x04C % 4) == getcurpl() && 
                                      wread_epd(epd + 0x064 / 4,  0x064 % 4) == 160 && 
                                      wread_epd(epd + 0x02A / 4,  0x02A % 4) >= 832
                                  ){
                                      Gateway[getcurpl()] = epd;
                                  }
                              }
                          }
                      }
                  EUDEndPlayerLoop();
                  SetPColor(2,156,1);
                  SetPColor(4,135,1);
                  SetPColor(1,128,1);
                  SetPColor(3,165,1);
                  SetPColor(5,164,1);
                  SetPColor(7,0,1);
                  SetPColor(9,125,1);
                  SetPColor(10,186,1);
                  SetPColor(11,125,1);
                  for(var i = 0 ; i < 8 ; i++){
                      MinionWaves[i] = MinionWave.alloc();
                      MinionWave.cast(MinionWaves[i]).mob1 = 0;
                      MinionWave.cast(MinionWaves[i]).mob2 = 0;
                      MinionWave.cast(MinionWaves[i]).mob3 = 0;
                      MinionWave.cast(MinionWaves[i]).mob4 = 0;
                      MinionWave.cast(MinionWaves[i]).mob5 = 0;
                      Qskills[i] = Qskill.alloc();
                      Qskill.cast(Qskills[i]).type = 0;
                      Qskill.cast(Qskills[i]).target = 0;
                      Qskill.cast(Qskills[i]).expire = 0;
                      Upgrades[i] = Upgrade.alloc();
                      Upgrade.cast(Upgrades[i]).atk = 0;
                      Upgrade.cast(Upgrades[i]).dfn = 0;
                      Upgrade.cast(Upgrades[i]).ckn = 0;
                      Upgrade.cast(Upgrades[i]).svp = 0;
                      Upgrade.cast(Upgrades[i]).ref = 0;
                  }
              
              }
              function beforeTriggerExec() {
[     12 ]        EUDPlayerLoop()();
[      8 ]            WaitableTriggerExec();
[    561 ]            ClassicTriggerExec();
[     44 ]        EUDEndPlayerLoop();
[    353 ]        ClassicTriggerStarter();
[      6 ]        SetMemory(0x6509A0, SetTo, 1);
[     16 ]        EUDPlayerLoop()();
[     85 ]            if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
[     17 ]                var CP = getcurpl();
[     17 ]                var ForceNum = CP & 1;
[      9 ]                var EnemyCPU = 7 - ForceNum;
                          if(
[      9 ]                    Switch((37), (2))
                          ){
                              EnemyCPU = 7;
                          }
[     14 ]                var EnemyForce = 19 - ForceNum;
[     60 ]                var Hero = Heroes[CP];
                          var HeroNumber;
                          var HeroType;
                          var Hitbox;
                          var Range;
                          var Place;
                          var Target;
                          var LockOnStatus;
[    102 ]                HeroType = wread_epd(Hero + 0x064 / 4,  0x064 % 4);
[     70 ]                HeroNumber = dwread_epd((getcurpl()) + (121) * 12);
                          //HeroGen
                          if(
[     10 ]                    Deaths((13), (10), 1, (212))
                          ){
                              SetDeaths((13), (7), 0, (212));
                              Heroes[CP] = epdread_epd(EPD(0x628438));
                              switch(HeroNumber) {
                                  case 1:
                                      CreateUnit(1, (20), (10), (13));
                                  break;
                                  case 2:
                                      CreateUnit(1, (53), (10), (13));
                                  break;
                                  case 3:
                                      CreateUnit(1, (77), (10), (13));
                                  break;
                                  case 4:
                                      CreateUnit(1, (10), (10), (13));
                                  break;
                                  case 5:
                                      CreateUnit(1, (54), (10), (13));
                                  break;
                                  case 6:
                                      CreateUnit(1, (78), (10), (13));
                                  break;
                                  case 7:
                                      CreateUnit(1, (61), (125), (13));
                                  break;
                                  case 8:
                                      CreateUnit(1, (1), (10), (13));
                                  break;
                                  case 9:
[      1 ]                            CreateUnit(1, (103), (10), (13));
                                  break;
                                  case 10:
[      1 ]                            CreateUnit(1, (64), (10), (13));
                                  break;
                                  case 11:
                                      CreateUnit(1, (95), (10), (13));
                                  break;
                                  case 12:
                                      CreateUnit(1, (76), (125), (13));
                                  break;
                                  case 13:
                                      CreateUnit(1, (17), (10), (13));
                                  break;
                                  case 14:
                                      CreateUnit(1, (39), (10), (13));
                                  break;
                                  case 15:
                                      CreateUnit(1, (67), (10), (13));
                                  break;
                              }
[      2 ]                    hotkeyUnitEPD(Heroes[CP],getcurpl(),1,0);
                          }
                          if(
                              Deaths((13), (10), 2, (212))
                          ){
                              SetDeaths((13), (7), 0, (212));
                              Heroes[CP] = epdread_epd(EPD(0x628438));
                              CreateUnit(1, (74), (125), (13));
                              hotkeyUnitEPD(Heroes[CP],getcurpl(),1,0);
                          }
                          //HeroGen
                          //SubUnitGen
                          if(
                              Deaths((13), (10), 3, (212)) && 
[      6 ]                    Deaths((13), (10), 6, (121))
                          ){
                              SetDeaths((13), (7), 0, (212));
                              SubUnit[CP] = epdread_epd(EPD(0x628438));
                              CreateUnit(1, (69), (118), (6));
                          }
                          if(
                              Deaths((13), (10), 3, (212)) && 
[     11 ]                    Deaths((13), (10), 9, (121))
                          ){
                              SetDeaths((13), (7), 0, (212));
                              SubUnit[CP] = epdread_epd(EPD(0x628438));
                              CreateUnit(1, (46), (10), (13));
                          }
                          //SubUnitGen
                          //SkillUse
                          if(
[     11 ]                    Deaths((13), (0), 1, (192))
                          ){
                              if(
[    269 ]                        BuildCheckEPD(Hero,70)
                              ){
                                  if(
[      1 ]                            wread_epd(Hero + 0x09A / 4,  0x09A % 4) == 70
                                  ){
                                      SetResources((13), (8), 10, (1));
                                      if(
                                          wread_epd(Hero + 0x09C / 4,  0x09C % 4) == 70
                                      ){
                                          SetResources((13), (8), 10, (1));
                                          if(
                                              wread_epd(Hero + 0x09E / 4,  0x09E % 4) == 70
                                          ){
                                              SetResources((13), (8), 10, (1));
                                              if(
                                                  wread_epd(Hero + 0x0A0 / 4,  0x0A0 % 4) == 70
                                              ){
                                                  SetResources((13), (8), 10, (1));
                                              }
                                          }
                                      }
                                  }
[      1 ]                        BuildResetEPD(Hero);
[     14 ]                        CreateUnit(1, (70), (61), (13));
                              }
                              if(
[    265 ]                        BuildCheckEPD(Heroes[CP],72)
                              ){
                                  BuildResetEPD(Heroes[CP]);
[      2 ]                        CreateUnit(1, (72), (61), (13));
                              }
                              if(
[    250 ]                        BuildCheckEPD(Heroes[CP],71)
                              ){
                                  BuildResetEPD(Heroes[CP]);
[      2 ]                        CreateUnit(1, (71), (61), (13));
                              }
                              if(
[    262 ]                        BuildCheckEPD(Heroes[CP],86)
                              ){
                                  BuildResetEPD(Heroes[CP]);
                                  CreateUnit(1, (60), (61), (13));
                              }
                          }
                          if(
                              Command((13), (0), 1, (74)) && 
[     26 ]                    BuildCheckEPD(Hero,72)
                          ){
                              BuildResetEPD(Hero);
                              CreateUnit(1, (72), (61), (13));
                          }
                          if(
                              Command((13), (0), 1, (74)) && 
[     17 ]                    BuildCheckEPD(Hero,74)
                          ){
                              BuildResetEPD(Hero);
                              CreateUnit(1, (60), (61), (13));
                          }
                          if(
[     41 ]                    SubUnit[CP] != 0
                          ){
                              if(
                                  Command((13), (0), 1, (69))
                              ){
                                  if(
                                      Bring((13), (0), 1, (69), (61))
                                  ){
                                      SetMemoryEPD(SubUnit[CP] + 0x060 / 4, Add, 192 * 1);
                                  }
                                  if(
                                      BuildCheckEPD(SubUnit[CP],72)
                                  ){
                                      BuildResetEPD(SubUnit[CP]);
                                      CreateUnit(1, (72), (61), (13));
                                  }
                              }
                          }
                          //SkillUse
                          //HeroSetting
                          if(
                              Switch((0), (2)) && 
                              MemoryEPD(Hero + 0x00C / 4, AtLeast, 1) && 
[     60 ]                    bread_epd(Hero + 0x04D / 4,  0x04D % 4) != 0
                          ){
[     14 ]                    switch(CP) {
                                  case 0:
[      1 ]                            Hitbox = 49;
                                      Range = 55;
                                      Place = 48;
[      1 ]                            Target = 84;
                                  break;
                                  case 1:
[      1 ]                            Hitbox = 50;
                                      Range = 56;
[      1 ]                            Place = 109;
                                      Target = 85;
[      1 ]                        break;
                                  case 2:
                                      Hitbox = 51;
[      1 ]                            Range = 57;
                                      Place = 110;
                                      Target = 86;
[      1 ]                        break;
                                  case 3:
                                      Hitbox = 52;
                                      Range = 58;
[      1 ]                            Place = 111;
                                      Target = 87;
                                  break;
                                  case 4:
[      1 ]                            Hitbox = 53;
                                      Range = 59;
                                      Place = 112;
                                      Target = 88;
[      1 ]                        break;
                                  case 5:
[      2 ]                            Hitbox = 54;
                                      Range = 60;
                                      Place = 113;
[      1 ]                            Target = 89;
                                  break;
                              }
                              //LocSettings
                              if(
[    302 ]                        Bring((13), (0), 1, (HeroType), (9))
                              ){
[    112 ]                        MoveLocation((Hitbox), (HeroType), (13), (9));
[    106 ]                        MoveLocation((Range), (HeroType), (13), (9));
[     87 ]                        MoveLocation((91), (HeroType), (13), (9));
[     91 ]                        MoveLocation((128), (HeroType), (13), (9));
[     68 ]                        MoveLocation((142), (HeroType), (13), (9));
[     95 ]                        MoveLocation((181), (HeroType), (13), (9));
                                  if(
[     59 ]                            Bring((13), (10), 0, (HeroType), (Place))
                                  ){
                                      if(
                                          Deaths((13), (10), 2, (165)) && 
[      1 ]                                Bring((13), (0), 1, (HeroType), (206))
                                      ){
                                          DisplayText("스펠카드 도중엔 나갈 수 없습니다.", (0));
                                          MoveUnit(0, (HeroType), (13), (9), (Place));
                                      }
                                      else{
[     13 ]                                MoveLocation((Place), (HeroType), (13), (9));
                                      }
                                  }
                              }
                              if(
[    170 ]                        Bring((13), (0), 1, (94), (9))
                              ){
                                  MoveLocation((Hitbox), (94), (13), (9));
                                  MoveLocation((Range), (94), (13), (9));
                                  MoveLocation((91), (94), (13), (9));
                                  MoveLocation((128), (94), (13), (9));
                              }
                              //LocSettings
                              //MissileGen
                              if(
                                  Deaths((13), (0), 1, (47)) && 
[     23 ]                        Deaths((13), (1), 9, (47))
                              ){
[      1 ]                        var MissileType = dwread_epd(EPD(0x58A364 + 48 * 47 + 4 * CP));
[      3 ]                        QskillInit(MissileType);
                                  if(
                                      MissileType != 5
                                  ){
[      1 ]                            CreateUnit(1, (47), (10), (13));
[      3 ]                            MoveUnit(0, (47), (13), (10), (Hitbox));
                                  }
                                  else{
                                      CreateUnit(1, (98), (10), (13));
                                      MoveUnit(0, (98), (13), (10), (Hitbox));
                                  }
                              }
                              //MissileGen
                              //MissileAim
                              if(
[    151 ]                        Qskill.cast(Qskills[CP]).expire >= 1
                              ){
[     46 ]                        var LockOnStatus = dwread_epd(EPD(0x58A364 + 48 * 153 + 4 * CP));
[      6 ]                        switch(LockOnStatus) {
                                      case 0:
                                          //FollowPlyr
[      1 ]                                MoveLocation((Target), (HeroType), (13), (Range));
                                          Qskill.cast(Qskills[CP]).expire -= 1;
                                          if(
[      3 ]                                    Bring((14), (0), 1, (230), (Range))
                                          ){
                                              SetDeaths((13), (7), 6, (153));
                                          }
                                          //FollowPlyr
                                      break;
                                      case 1:
                                          //CPU
                                          if(
[      2 ]                                    Command((13), (0), 1, (10))
                                          ){
                                              MoveLocation((Target), (230), (EnemyCPU), (Target));
                                              if(
                                                  Bring((EnemyCPU), (10), 0, (230), (Target))
                                              ){
                                                  MoveLocation((Target), (231), (EnemyCPU), (Target));
                                                  if(
                                                      Bring((EnemyCPU), (10), 0, (231), (Target))
                                                  ){
                                                  }
                                                  SetDeaths((13), (7), 6, (153));
                                              }
                                          }
                                          else{
[      5 ]                                    MoveLocation((Target), (230), (EnemyCPU), (Target));
                                              if(
[      2 ]                                        Bring((EnemyCPU), (10), 0, (230), (Target))
                                              ){
                                                  SetDeaths((13), (7), 6, (153));
                                              }
                                          }
                                          //CPU
                                      break;
                                      case 2:
                                          //EnemyUnit
[     17 ]                                MoveLocation((Target), (230), (EnemyForce), (Target));
                                          if(
[     12 ]                                    Bring((EnemyForce), (10), 0, (230), (Target))
                                          ){
                                              SetDeaths((13), (7), 6, (153));
                                          }
                                          //EnemyUnit
[      2 ]                            break;
                                      case 3:
                                          //RaidBoss
[      2 ]                                MoveLocation((Target), (Qskill.cast(Qskills[CP]).target), (14), (Target));
                                          if(
[      1 ]                                    Bring((14), (10), 0, (Qskill.cast(Qskills[CP]).target), (Target))
                                          ){
                                              SetDeaths((13), (7), 6, (153));
                                          }
                                          //RaidBoss
                                      break;
                                      case 4:
                                          //Hero
                                          MoveLocation((Target), (Qskill.cast(Qskills[CP]).target), (14), (Target));
                                          if(
                                              Bring((14), (10), 0, (Qskill.cast(Qskills[CP]).target), (Target))
                                          ){
                                              SetDeaths((13), (7), 6, (153));
                                          }
                                          //Hero
                                      break;
                                      case 5:
                                          //Soul
                                          MoveLocation((Target), (74), (14), (Target));
                                          if(
[      2 ]                                    Bring((14), (10), 0, (74), (Target))
                                          ){
                                              SetDeaths((13), (7), 6, (153));
                                          }
                                          //Soul
                                      break;
                                      case 6:
                                          //LockOn
                                          MoveLocation((Target), (HeroType), (13), (Range));
                                          //Priority 5: Soul
                                          if(
[      1 ]                                    Bring((14), (0), 1, (74), (Range))
                                          ){
                                              SetDeaths((13), (7), 5, (153));
                                              MoveLocation((Target), (74), (14), (Range));
                                              break;
                                          }
                                          //Priority 5: Soul
                                          //Priority 4: Hero
                                          var MinDis = 720;
                                          if(
                                              Switch((37), (3))
                                          ){
                                              //Heroes
                                              if(
                                                  Bring((14), (0), 1, (20), (Range))
                                              ){
                                                  Qskill.cast(Qskills[CP]).target = 20;
                                              }
                                              if(
                                                  Bring((14), (0), 1, (53), (Range))
                                              ){
                                                  Qskill.cast(Qskills[CP]).target = 53;
                                              }
                                              if(
                                                  Bring((14), (0), 1, (77), (Range))
                                              ){
[      1 ]                                        Qskill.cast(Qskills[CP]).target = 77;
                                              }
                                              if(
                                                  Bring((14), (0), 1, (10), (Range))
                                              ){
                                                  Qskill.cast(Qskills[CP]).target = 10;
                                              }
                                              if(
                                                  Bring((14), (0), 1, (54), (Range))
                                              ){
                                                  Qskill.cast(Qskills[CP]).target = 54;
                                              }
                                              if(
[      1 ]                                        Bring((14), (0), 1, (78), (Range))
                                              ){
                                                  Qskill.cast(Qskills[CP]).target = 78;
                                              }
                                              if(
                                                  Bring((14), (0), 1, (61), (Range))
                                              ){
                                                  Qskill.cast(Qskills[CP]).target = 61;
                                              }
                                              if(
                                                  Bring((14), (0), 1, (1), (Range))
                                              ){
                                                  Qskill.cast(Qskills[CP]).target = 1;
                                              }
                                              if(
                                                  Bring((14), (0), 1, (103), (Range))
                                              ){
                                                  Qskill.cast(Qskills[CP]).target = 103;
                                              }
                                              if(
                                                  Bring((14), (0), 1, (64), (Range))
                                              ){
                                                  Qskill.cast(Qskills[CP]).target = 64;
                                              }
                                              if(
                                                  Bring((14), (0), 1, (95), (Range))
                                              ){
                                                  Qskill.cast(Qskills[CP]).target = 95;
                                              }
                                              if(
                                                  Bring((14), (0), 1, (76), (Range))
                                              ){
                                                  Qskill.cast(Qskills[CP]).target = 76;
                                              }
                                              if(
                                                  Bring((14), (0), 1, (17), (Range))
                                              ){
                                                  Qskill.cast(Qskills[CP]).target = 17;
                                              }
                                              if(
                                                  Bring((14), (0), 1, (39), (Range))
                                              ){
                                                  Qskill.cast(Qskills[CP]).target = 39;
                                              }
                                              if(
                                                  Bring((14), (0), 1, (67), (Range))
                                              ){
                                                  Qskill.cast(Qskills[CP]).target = 67;
                                              }
[      1 ]                                    MoveLocation((Target), (Qskill.cast(Qskills[CP]).target), (14), (Range));
                                              //Heroes
                                          }
                                          else{
                                              //Heroes
                                              if(
                                                  Bring((14), (0), 1, (23), (Range))
                                              ){
                                                  Qskill.cast(Qskills[CP]).target = 23;
                                              }
                                              if(
                                                  Bring((14), (0), 1, (51), (Range))
                                              ){
                                                  Qskill.cast(Qskills[CP]).target = 51;
                                              }
                                              if(
                                                  Bring((14), (0), 1, (68), (Range))
                                              ){
                                                  Qskill.cast(Qskills[CP]).target = 68;
                                              }
                                              if(
                                                  Bring((14), (0), 1, (2), (Range))
                                              ){
                                                  Qskill.cast(Qskills[CP]).target = 2;
                                              }
                                              if(
                                                  Bring((14), (0), 1, (41), (Range))
                                              ){
                                                  Qskill.cast(Qskills[CP]).target = 41;
                                              }
                                              if(
                                                  Bring((14), (0), 1, (86), (Range))
                                              ){
                                                  Qskill.cast(Qskills[CP]).target = 86;
                                              }
                                              //Heroes
                                          }
                                          if(
                                              Deaths((13), (10), 4, (153))
                                          ){
                                              break;
                                          }
                                          //Priority 4: Hero
                                          //Priority 3: RaidBoss
                                          SetDeaths((13), (7), 3, (153));
                                          if(
                                              Switch((37), (2))
                                          ){
                                              if(
                                                  Bring((7), (0), 1, (114), (Range))
                                              ){
                                                  MoveLocation((Target), (114), (7), (Range));
                                                  break;
                                              }
                                              if(
                                                  Bring((7), (0), 1, (132), (Range))
                                              ){
                                                  MoveLocation((Target), (132), (7), (Range));
                                                  break;
                                              }
                                          }
                                          if(
                                              Bring((EnemyCPU), (0), 1, (87), (Range))
                                          ){
                                              MoveLocation((Target), (87), (EnemyCPU), (Range));
                                              break;
                                          }
                                          if(
                                              Bring((EnemyCPU), (0), 1, (76), (Range))
                                          ){
                                              MoveLocation((Target), (76), (EnemyCPU), (Range));
                                              break;
                                          }
                                          if(
                                              Bring((EnemyCPU), (0), 1, (79), (Range))
                                          ){
                                              MoveLocation((Target), (79), (EnemyCPU), (Range));
                                              break;
                                          }
                                          if(
                                              Bring((EnemyCPU), (0), 1, (19), (Range))
                                          ){
                                              MoveLocation((Target), (19), (EnemyCPU), (Range));
                                              break;
                                          }
                                          //Priority 3: RaidBoss
                                          //Priority 2: EnemyUnit
                                          if(
                                              Switch((37), (3)) && 
                                              Bring((EnemyForce), (0), 1, (230), (Range))
                                          ){
                                              MoveLocation((Target), (230), (EnemyForce), (Range));
                                              SetDeaths((13), (7), 2, (153));
                                              break;
                                          }
                                          //Priority 2: EnemyUnit
                                          //Priority 1: CPU
                                          if(
                                              Bring((14), (0), 1, (230), (Range))
                                          ){
                                              MoveLocation((Target), (230), (EnemyCPU), (Range));
                                              SetDeaths((13), (7), 1, (153));
                                          }
                                          else{
                                              if(
                                                  Command((13), (0), 1, (10))
                                              ){
                                                  if(
                                                      Bring((EnemyCPU), (0), 1, (231), (Range))
                                                  ){
                                                      MoveLocation((Target), (231), (EnemyCPU), (Range));
                                                      SetDeaths((13), (7), 1, (153));
                                                  }
                                                  else{
                                                      SetDeaths((13), (7), 0, (153));
                                                  }
                                              }
                                              else{
                                                  SetDeaths((13), (7), 0, (153));
                                              }
                                          }
                                          //Priority 1: CPU
                                          //LockOn
                                      break;
                                  }
                                  if(
                                      Qskill.cast(Qskills[CP]).type == 5 && 
                                      LockOnStatus <= 3 && 
[     64 ]                            Qskill.cast(Qskills[CP]).expire >= 1
                                  ){
                                      Qskill.cast(Qskills[CP]).expire -= 1;
                                  }
                                  if(
[     50 ]                            Qskill.cast(Qskills[CP]).expire >= 1
                                  ){
[     48 ]                            Order((47), (13), (9), (0), (Target));
[     38 ]                            Order((98), (13), (9), (0), (Target));
                                  }
                                  else{
                                      KillUnitAt(0, (47), (9), (13));
[      2 ]                            KillUnitAt(0, (98), (9), (13));
                                      if(
[      1 ]                                Qskill.cast(Qskills[CP]).type == 5
                                      ){
                                          SetDeaths((13), (7), 13, (47));
                                      }
                                  }
                              }
                              //MissileAim
                              //MissileHit
                              if(
                                  Bring((13), (0), 1, (47), (9)) && 
[    101 ]                        Qskill.cast(Qskills[CP]).expire >= 1
                              ){
[      2 ]                        MoveLocation((62), (47), (13), (9));
                                  if(
                                      Bring((14), (0), 1, (230), (62)) || 
                                      Bring((14), (0), 1, (114), (62)) || 
                                      Bring((14), (0), 1, (132), (62)) || 
                                      (Command((13), (0), 1, (10)) && Bring((14), (0), 1, (231), (62))) // 파이어뱃이면서 미사일이 건물에 닿았을때
[      1 ]                        ){
[      2 ]                            var MissileType = Qskill.cast(Qskills[CP]).type;
[      1 ]                            switch(MissileType) {
                                          case 1:
                                              SetDeaths((13), (7), 10, (47));
                                          break;
                                          case 2:
                                              SetDeaths((13), (7), 11, (47));
                                          break;
                                          case 3:
                                              SetDeaths((13), (7), 12, (47));
                                          break;
                                          case 4:
                                              SetDeaths((13), (7), 10, (47));
                                          break;
                                          case 6:
                                              SetDeaths((13), (7), 10, (47));
                                          break;
                                      }
                                  }
                              }
                              //MissileHit
                              //BulletHit
                              if(
[     39 ]                        Bring((7), (0), 1, (98), (Hitbox))
                              ){
                                  KillUnitAt(1, (98), (Hitbox), (7));
                                  if(
                                      Switch((38), (3))
                                  ){
                                      DamageUnitEPD(Hero,3,12800);
                                  }
                                  else{
                                      DamageUnitEPD(Hero,3,25600);
                                  }
                              }
                              else{
                                  if(
[      6 ]                            Bring((9), (0), 1, (98), (Hitbox))
                                  ){
                                      KillUnitAt(1, (98), (Hitbox), (9));
                                      if(
                                          Switch((38), (3))
                                      ){
                                          DamageUnitEPD(Hero,3,12800);
                                      }
                                      else{
                                          DamageUnitEPD(Hero,3,25600);
                                      }
                                  }
                              }
                              //BulletHit
                              //Special,Passive
                              if(
[     14 ]                        Deaths((13), (10), 1, (192))
                              ){
                                  if(
                                      Deaths((13), (10), 6, (212)) && 
[     10 ]                            Deaths((13), (10), 1, (121))
                                  ){
                                      SetDeaths((13), (7), 0, (212));
                                      var MarineHP;
                                      MarineHP = dwread(0x65FD00 + 9808 + 20 * 4);
                                      MarineHP /= 10;
                                      HealUnit(Hero,MarineHP);
                                  }
                                  if(
                                      Deaths((13), (10), 3, (121)) && 
                                      Deaths((13), (0), 144, (200)) && 
                                      bread_epd(Hero + 0x055 / 4,  0x055 % 4) >= 1 && 
[     14 ]                            Deaths((13), (10), 0, (119))
                                  ){
[      1 ]                            KillUnit((100), (13));
                                      SetDeaths((13), (7), 8, (119));
[      1 ]                            SetMemoryEPD(Hero + 0x060 / 4, Add, 6400 + 640 * Upgrade.cast(Upgrades[CP]).dfn * 1);
                                  }
                                  if(
                                      Deaths((13), (10), 3, (121)) && 
[     13 ]                            Deaths((13), (10), 216, (200))
                                  ){
                                      if(
                                          Switch((37), (3))
                                      ){
                                          for(var i = 0 ; i < 3 ; i++){
                                              var EnemyPlayer = i * 2 +(1 - CP % 2);
                                              if(
                                                  Heroes[EnemyPlayer] != 0 && 
                                                  !MemoryEPD(Heroes[EnemyPlayer] + 0x00C / 4, Exactly, 0) && 
                                                  FastDistanceUnit(Hero,Heroes[EnemyPlayer]) < 272
                                              ){
                                                  if(
                                                      Deaths((EnemyPlayer), (1), 72, (208))
                                                  ){
                                                      SetDeaths((EnemyPlayer), (7), 72, (208));
                                                  }
                                                  if(
                                                      bread_epd(Heroes[EnemyPlayer] + 0x116 / 4,  0x116 % 4) <= 3
                                                  ){
                                                      bwrite_epd(Heroes[EnemyPlayer] + 0x116 / 4,  0x116 % 4, 3);
                                                  }
                                              }
                                          }
                                      }
                                      else{
                                          for(var i = 0 ; i < 6 ; i++){
                                              if(
                                                  HeroPvE[i] != 0 && 
                                                  bread_epd(HeroPvE[i] + 0x04D / 4,  0x04D % 4) != 0 && 
                                                  !MemoryEPD(HeroPvE[i] + 0x00C / 4, Exactly, 0) && 
                                                  FastDistanceUnit(Hero,HeroPvE[i]) < 272
                                              ){
                                                  if(
                                                      Deaths((i), (1), 72, (208))
                                                  ){
                                                      SetDeaths((i), (7), 72, (208));
                                                  }
                                                  if(
                                                      bread_epd(HeroPvE[i] + 0x116 / 4,  0x116 % 4) <= 3
                                                  ){
                                                      bwrite_epd(HeroPvE[i] + 0x116 / 4,  0x116 % 4, 3);
                                                  }
                                              }
                                          }
                                      }
                                  }
                                  if(
                                      Deaths((13), (0), 1, (208)) && 
[     11 ]                            Switch((37), (3))
                                  ){
                                      AddStatusFlagsEPD(Hero,262144);
                                  }
                                  if(
                                      bread_epd(Hero + 0x04D / 4,  0x04D % 4) == 116 && 
[     63 ]                            Deaths((13), (10), 0, (35))
                                  ){
                                      SetDeaths((13), (7), 13, (138));
                                      SetDeaths((13), (7), 60, (35));
                                      if(
                                          Deaths((13), (10), 5, (121))
                                      ){
                                          SetDeaths((13), (9), 24, (35));
                                      }
                                      if(
                                          Deaths((13), (10), 9, (121))
                                      ){
                                          SetDeaths((13), (7), 1, (119));
                                          SetDeaths((13), (8), 12, (138));
                                      }
                                  }
                                  if(
[     74 ]                            dwread_epd(Hero + 0x0DC / 4) & 16
                                  ){
                                      if(
                                          Deaths((13), (10), 2, (121))
                                      ){
                                          HealUnit(Hero,256);
                                      }
                                      else{
[      6 ]                                HealUnit(Hero,128);
                                      }
                                  }
                                  if(
[      7 ]                            Deaths((13), (10), 14, (121))
                                  ){
                                      if(
                                          Deaths((13), (0), 1, (158))
                                      ){
[      1 ]                                HealUnit(Hero,128);
                                      }
                                      else{
[      3 ]                                HealUnit(Hero,64);
                                      }
                                  }
                                  if(
[      6 ]                            Deaths((13), (1), 30, (158))
                                  ){
                                      if(
[      7 ]                                Deaths((13), (10), 0, (158))
                                      ){
[     15 ]                                SetMemoryEPD(Hero + 0x060 / 4, Add, 192 * 1);
                                      }
                                      else{
                                          if(
[      1 ]                                    Deaths((13), (10), 15, (121))
                                          ){
                                              SetMemoryEPD(Hero + 0x060 / 4, Add, 192 * 1);
                                          }
                                      }
                                  }
                                  if(
[     52 ]                            bread_epd(Hero + 0x090 / 4,  0x090 % 4) <= 7
                                  ){
                                      SetDeaths((13), (7), 60, (158));
                                      SetMemoryEPD(Hero + 0x090 / 4, Add, 8 * 1);
                                  }
                                  if(
                                      Deaths((13), (10), 8, (121)) || 
[     18 ]                            Deaths((13), (10), 15, (121))
                                  ){
                                      if(
                                          Deaths((13), (10), 8, (121)) && 
[     23 ]                                wread_epd(Hero + 0x0A2 / 4,  0x0A2 % 4) >= 9
                                      ){
                                          if(
[     15 ]                                    bread_epd(Hero + 0x0A6 / 4,  0x0A6 % 4) != 109
                                          ){
[      7 ]                                    SetMemoryEPD(Hero + 0x0A2 / 4, Add, 18 * 65536);
                                          }
                                          else{
                                              SetMemoryEPD(Hero + 0x0A2 / 4, Add, -9 * 65536);
                                          }
                                      }
                                      if(
[      9 ]                                wread_epd(Hero + 0x0A2 / 4,  0x0A2 % 4) > 12800
                                      ){
                                          wwrite_epd(Hero + 0x0A2 / 4,  0x0A2 % 4, 12800);
                                      }
                                  }
                                  if(
                                      Deaths((13), (10), 9, (121)) && 
                                      Deaths((13), (0), 1, (119)) && 
[     13 ]                            bread_epd(Hero + 0x055 / 4,  0x055 % 4) >= 35
                                  ){
                                      SetDeaths((13), (7), 0, (119));
[      1 ]                            MoveUnit(0, (103), (13), (9), (23));
                                  }
                                  if(
                                      Deaths((13), (10), 10, (121)) && 
[      6 ]                            Deaths((13), (0), 96, (200))
                                  ){
                                      if(
                                          Deaths((13), (0), 132, (200))
                                      ){
                                          ProbeShield[CP] = dwread_epd(Hero + 0x060 / 4);
                                          ModifyUnitShields(0, (64), (13), (9), 100);
                                          CounterShield[CP] = dwread_epd(Hero + 0x060 / 4);
                                      }
                                      if(
                                          !MemoryEPD(Hero + 0x060 / 4, AtLeast, CounterShield[CP])
                                      ){
                                          var Counter = CounterShield[getcurpl()];
                                          if(
                                              !MemoryEPD(Hero + 0x060 / 4, AtLeast, 256)
                                          ){
                                              DisplayText("쉴드 파괴됨!", (4));
                                              SetDeaths((13), (7), 96, (200));
                                          }
                                          Counter -= dwread_epd(Hero + 0x060 / 4);
                                          Counter /= 2560;
                                          SetDeaths((13), (8), Counter, (88));
                                          CounterShield[CP] = dwread_epd(Hero + 0x060 / 4);
                                      }
                                      else{
                                          SetMemoryEPD(Hero + 0x060 / 4, SetTo, CounterShield[CP]);
                                      }
                                      if(
                                          Deaths((13), (10), 96, (200))
                                      ){
                                          SetMemoryEPD(Hero + 0x060 / 4, SetTo, ProbeShield[CP]);
                                          SetMemoryEPD(Hero + 0x060 / 4, Add, 25600 * 1);
                                      }
                                  }
                                  if(
[      5 ]                            Deaths((13), (10), 12, (121))
                                  ){
                                      bwrite(0x58D2B0 + 0x207C * ((13) / 46) + (getcurpl()) * (46 - 31 * ((13) / 46)) + ((13) % 46), bread(0x58D2B0 + 14 + 46 * CP));
                                      bwrite(0x58D2B0 + 0x207C * ((3) / 46) + (getcurpl()) * (46 - 31 * ((3) / 46)) + ((3) % 46), bread(0x58D2B0 + 6 + 46 * CP));
                                  }
                                  else{
[    190 ]                            bwrite(0x58D2B0 + 0x207C * ((13) / 46) + (getcurpl()) * (46 - 31 * ((13) / 46)) + ((13) % 46), 0);
[    169 ]                            bwrite(0x58D2B0 + 0x207C * ((3) / 46) + (getcurpl()) * (46 - 31 * ((3) / 46)) + ((3) % 46), 0);
                                  }
                                  if(
                                      Deaths((13), (10), 14, (121)) && 
[      7 ]                            Deaths((13), (0), 144, (200))
                                  ){
                                      AddStatusFlagsEPD(Hero,268435456);
                                      if(
                                          Deaths((13), (0), 179, (200))
                                      ){
                                          bwrite_epd(Hero + 0x055 / 4,  0x055 % 4, 0);
                                      }
                                      if(
                                          bread_epd(Hero + 0x055 / 4,  0x055 % 4) >= 1 && 
                                          bread_epd(Hero + 0x04D / 4,  0x04D % 4) == 10 && 
                                          !MemoryEPD(Hero + 0x05C / 4, Exactly, 0) && 
                                          Deaths((13), (1), 3, (119))
                                      ){
                                          var TargetUnit;
                                          TargetUnit = dwread_epd(Hero + 0x05C / 4);
                                          TargetUnit = EPD(TargetUnit);
                                          if(
                                              FastDistanceUnit(Hero,TargetUnit) <= 96
                                          ){
                                              SetDeaths((13), (7), 60, (119));
                                              bwrite_epd(TargetUnit + 0x126 / 4,  0x126 % 4, 5);
                                              bwrite_epd(TargetUnit + 0x127 / 4,  0x127 % 4, 30);
                                              bwrite_epd(TargetUnit + 0x128 / 4,  0x128 % 4, 30);
                                              bwrite_epd(TargetUnit + 0x129 / 4,  0x129 % 4, 30);
                                              bwrite_epd(TargetUnit + 0x12A / 4,  0x12A % 4, 30);
                                              bwrite_epd(TargetUnit + 0x12B / 4,  0x12B % 4, 30);
                                              if(
                                                  Switch((37), (3))
                                              ){
                                                  for(var i = 0 ; i < 4 ; i++){
                                                      var EnemyPlayer = i * 2 +(1 - CP % 2);
[      4 ]                                            DamageCircleUnit(TargetUnit,32,EnemyPlayer,3,20480 + 2048 * Upgrade.cast(Upgrades[CP]).atk);
                                                  }
                                              }
                                              else{
                                                  DamageCircleUnit(TargetUnit,32,7,3,20480 + 2048 * Upgrade.cast(Upgrades[CP]).atk);
                                              }
                                          }
                                      }
                                      if(
                                          Deaths((13), (10), 144, (200))
                                      ){
                                          RemoveStatusFlagsEPD(Hero,268435456);
                                      }
                                  }
                                  if(
[      1 ]                            Deaths((13), (10), 15, (121))
                                  ){
                                      SetMemoryEPD(Hero + 0x034 / 4, SetTo, 1133);
                                      wwrite_epd(Hero + 0x048 / 4,  0x048 % 4, 47);
                                  }
                                  //HealKit
                                  if(
                                      Deaths((13), (10), 0, (140)) && 
                                      Deaths((13), (10), 0, (198)) && 
                                      Bring((9), (0), 1, (140), (35)) && 
[     79 ]                            Bring((13), (10), 0, (140), (35))
                                  ){
                                      GiveUnits(1, (140), (9), (35), (13));
                                  }
                                  if(
[     34 ]                            Bring((13), (0), 1, (60), (61))
                                  ){
                                      RemoveUnitAt(0, (60), (61), (13));
                                      if(
                                          Bring((13), (0), 1, (140), (35)) && 
                                          Deaths((13), (10), 0, (198)) && 
                                          Deaths((13), (10), 0, (138))
                                      ){
                                          var HeroType;
                                          HeroType = wread_epd(Hero + 0x064 / 4,  0x064 % 4);
                                          bwrite_epd(Hero + 0x117 / 4,  0x117 % 4, 21);
                                          MoveLocation((129), (HeroType), (13), (9));
                                          MoveUnit(1, (HeroType), (13), (9), (129));
                                      }
                                  }
                                  if(
[     47 ]                            bread_epd(Hero + 0x117 / 4,  0x117 % 4) >= 1
                                  ){
                                      if(
                                          bread_epd(Hero + 0x117 / 4,  0x117 % 4) <= 2
                                      ){
                                          SetDeaths((13), (7), 84, (140));
                                          GiveUnits(1, (140), (13), (35), (9));
                                          SetDeaths((13), (8), 40, (198));
                                          var HeroType;
                                          HeroType = wread_epd(Hero + 0x064 / 4,  0x064 % 4);
                                          ModifyUnitHitPoints(0, (HeroType), (13), (9), 100);
                                          ModifyUnitShields(0, (HeroType), (13), (9), 100);
                                          bwrite_epd(Hero + 0x117 / 4,  0x117 % 4, 0);
                                          DisplayText("\x07체력을 완전히 회복했다.", (0));
                                          const btntemp1 = wread_epd(EPD(0x6615AA), 2);
                                          SetMemoryX(0x6615AA, SetTo, 0x20000, 0xFFFF0000);
                                          const btntemp2, btntemp3 = cunitepdread_epd(EPD(0x628438));
                                          CreateUnit(1, 73, 64, 7);
                                          if(!Memory(0x628438, Exactly, btntemp2)) {
                                          wwrite_epd(btntemp3 + 0x110/4, 0, 1);
                                          wwrite_epd(EPD(0x6615AA), 2, btntemp1);
                                          };
                                      }
                                      if(
                                          Deaths((13), (10), 60, (158))
                                      ){
                                          SetDeaths((13), (7), 84, (140));
                                          GiveUnits(1, (140), (13), (35), (9));
                                          bwrite_epd(Hero + 0x117 / 4,  0x117 % 4, 0);
                                          const btntemp1 = wread_epd(EPD(0x6615AA), 2);
                                          SetMemoryX(0x6615AA, SetTo, 0x20000, 0xFFFF0000);
                                          const btntemp2, btntemp3 = cunitepdread_epd(EPD(0x628438));
                                          CreateUnit(1, 73, 64, 7);
                                          if(!Memory(0x628438, Exactly, btntemp2)) {
                                          wwrite_epd(btntemp3 + 0x110/4, 0, 1);
                                          wwrite_epd(EPD(0x6615AA), 2, btntemp1);
                                          };
                                      }
                                  }
                                  //HealKit
                              }
                              //Special,Passive
                              //Subattack
                              if(
                                  Bring((13), (0), 1, (55), (9)) && 
[    221 ]                        Deaths((6), (10), 0, (207))
                              ){
                                  Order((55), (13), (9), (0), (Hitbox));
                                  MoveLocation((97), (229), (14), (Range));
                                  Order((55), (13), (128), (2), (97));
                              }
                              if(
                                  Deaths((6), (10), 0, (207)) && 
[     16 ]                        Bring((13), (10), 0, (84), (142))
                              ){
[     14 ]                        Order((84), (13), (9), (0), (Place));
                              }
                              //Subattack
                              //ItemGet
                              if(
                                  Bring((13), (0), 1, (HeroType), (121)) && 
                                  Bring((17), (0), 1, (219), (181)) && 
                                  HeroType != 74 && 
[    222 ]                        HeroType != 61
                              ){
[      1 ]                        DisplayText("영웅의 \x07체력이 100 회복\x02되었습니다.", (4));
                                  RemoveUnitAt(1, (219), (181), (17));
[      2 ]                        PlayWAV("staredit\\wav\\Heart.wav");
                                  HealUnit(Hero,25600);
                              }
                              //ItemGet
                              //OnSomething
                              if(
                                  Bring((13), (0), 1, (HeroType), (21)) && 
[     46 ]                        Deaths((13), (10), 0, (92))
                              ){
                                  SetDeaths((13), (7), 1, (92));
                                  if(
                                      ForceNum == 0 || 
                                      Switch((26), (2)) || 
                                      Switch((37), (2))
                                  ){
                                      HealBeacon(HeroType);
                                  }
                              }
                              if(
                                  Bring((13), (0), 1, (HeroType), (22)) && 
                                  Deaths((13), (10), 0, (92)) && 
[     75 ]                        Switch((37), (3))
                              ){
                                  SetDeaths((13), (7), 2, (92));
                                  if(
                                      ForceNum != 0 || 
                                      Switch((26), (2))
                                  ){
                                      HealBeacon(HeroType);
                                  }
                              }
                              if(
                                  Bring((13), (0), 1, (HeroType), (137)) && 
[     61 ]                        Deaths((13), (10), 0, (92))
                              ){
                                  SetDeaths((13), (7), 3, (92));
                                  if(
                                      Switch((26), (2)) && 
                                      Switch((17), (3))
                                  ){
                                      HealBeacon(HeroType);
                                  }
                              }
                              if(
                                  Bring((13), (0), 1, (HeroType), (138)) && 
[     41 ]                        Deaths((13), (10), 0, (92))
                              ){
                                  SetDeaths((13), (7), 4, (92));
                                  if(
                                      Switch((26), (2)) && 
                                      Switch((18), (3))
                                  ){
                                      HealBeacon(HeroType);
                                  }
                              }
                              if(
                                  Bring((13), (0), 1, (HeroType), (122)) && 
[     49 ]                        Deaths((13), (10), 0, (92))
                              ){
                                  SetDeaths((13), (7), 5, (92));
                                  if(
                                      ForceNum == 0 && 
                                      Deaths((13), (10), 0, (198))
                                  ){
                                      KillUnitAt(0, (HeroType), (64), (13));
                                      SetDeaths((13), (7), 76, (204));
                                      SetDeaths((13), (7), 7, (212));
                                  }
                                  else{
                                      SetDeaths((13), (7), 110, (204));
                                  }
                              }
                              if(
                                  Bring((13), (0), 1, (HeroType), (123)) && 
[     38 ]                        Deaths((13), (10), 0, (92))
                              ){
                                  SetDeaths((13), (7), 6, (92));
                                  if(
                                      ForceNum != 0 && 
                                      Deaths((13), (10), 0, (198))
                                  ){
                                      KillUnitAt(0, (HeroType), (64), (13));
                                      SetDeaths((13), (7), 76, (204));
                                      SetDeaths((13), (7), 7, (212));
                                  }
                                  else{
                                      SetDeaths((13), (7), 110, (204));
                                  }
                              }
                              if(
                                  Bring((13), (0), 1, (HeroType), (203)) && 
[     37 ]                        Deaths((13), (10), 0, (92))
                              ){
                                  SetDeaths((13), (7), 7, (92));
                              }
                              if(
[     27 ]                        Deaths((7), (10), CP+1, (153))
                              ){
                                  if(
                                      Bring((13), (10), 0, (HeroType), (203))
                                  ){
                                      SetDeaths((7), (7), 7, (153));
                                  }
                                  MoveLocation((134), (HeroType), (13), (9));
                              }
                              if(
[      2 ]                        Deaths((13), (10), 1, (165))
                              ){
                                  if(
                                      Bring((13), (0), 1, (HeroType), (203)) && 
                                      Bring((13), (10), 0, (HeroType), (206))
                                  ){
                                      SetDeaths((13), (7), 2, (165));
                                  }
                                  else{
                                      SetDeaths((13), (7), 0, (165));
                                  }
                              }
                              if(
                                  Bring((13), (10), 0, (HeroType), (21)) && 
                                  Bring((13), (10), 0, (HeroType), (22)) && 
                                  Bring((13), (10), 0, (HeroType), (137)) && 
                                  Bring((13), (10), 0, (HeroType), (138)) && 
                                  Bring((13), (10), 0, (HeroType), (122)) && 
                                  Bring((13), (10), 0, (HeroType), (123)) && 
[    308 ]                        Bring((13), (10), 0, (HeroType), (203))
                              ){
[      4 ]                        SetDeaths((13), (7), 0, (92));
                              }
                              //OnSomething
                          }
                          //HeroSetting
                          //Special2
                          if(
                              Deaths((13), (10), 3, (121)) && 
[     17 ]                    Deaths((13), (0), 1, (192))
                          ){
[     47 ]                    bwrite(0x58D2B0 + 0x207C * ((15) / 46) + (getcurpl()) * (46 - 31 * ((15) / 46)) + ((15) % 46), 3);
                          }
                          else{
[    162 ]                    bwrite(0x58D2B0 + 0x207C * ((15) / 46) + (getcurpl()) * (46 - 31 * ((15) / 46)) + ((15) % 46), 0);
                          }
                          //Special2
                          //Hangang
                          if(
[     21 ]                    Command((13), (0), 1, (74))
                          ){
                              if(
[      3 ]                        Bring((13), (0), 1, (60), (61))
                              ){
                                  RemoveUnitAt(0, (60), (61), (13));
                                  var HeroType;
                                  HeroType = wread_epd(Hero + 0x064 / 4,  0x064 % 4);
                                  bwrite_epd(Hero + 0x117 / 4,  0x117 % 4, 15);
                                  MoveLocation((129), (HeroType), (13), (9));
                                  MoveUnit(1, (HeroType), (13), (9), (129));
                              }
                              if(
[      3 ]                        bread_epd(Hero + 0x117 / 4,  0x117 % 4) >= 1
                              ){
                                  if(
                                      bread_epd(Hero + 0x117 / 4,  0x117 % 4) <= 2 && 
                                      Deaths((13), (10), 0, (212))
                                  ){
                                      SetDeaths((13), (7), 8, (212));
                                  }
                              }
                          }
                          //Hangang
                          //Upgrade
                          if(
[    271 ]                    bread(0x58D2B0 + 0x207C * ((14) / 46) + (getcurpl()) * (46 - 31 * ((14) / 46)) + ((14) % 46)) > Upgrade.cast(Upgrades[CP]).atk
                          ){
                              Upgrade.cast(Upgrades[CP]).atk += 1;
[      3 ]                    DisplayText("\n\x13\x17[!] \x08공격력 \x1F업그레이드 \x07완료 \x17[!]\n", (0));
                          }
                          if(
[    229 ]                    bread(0x58D2B0 + 0x207C * ((6) / 46) + (getcurpl()) * (46 - 31 * ((6) / 46)) + ((6) % 46)) > Upgrade.cast(Upgrades[CP]).dfn
                          ){
                              Upgrade.cast(Upgrades[CP]).dfn += 1;
                              DisplayText("\n\x13\x17[!] \x0E방어력 \x1F업그레이드 \x07완료 \x17[!]\n", (0));
                          }
                          if(
[    228 ]                    bread(0x58D2B0 + 0x207C * ((12) / 46) + (getcurpl()) * (46 - 31 * ((12) / 46)) + ((12) % 46)) > Upgrade.cast(Upgrades[CP]).ckn
                          ){
                              Upgrade.cast(Upgrades[CP]).ckn += 1;
                              DisplayText("\n\x13\x17[!] \x1B닭둘기 \x1F업그레이드 \x07완료 \x17[!]\n", (0));
                          }
                          if(
[    234 ]                    bread(0x58D2B0 + 0x207C * ((4) / 46) + (getcurpl()) * (46 - 31 * ((4) / 46)) + ((4) % 46)) > Upgrade.cast(Upgrades[CP]).svp
                          ){
                              Upgrade.cast(Upgrades[CP]).svp += 1;
                              DisplayText("\n\x13\x17[!] \x10주문흡혈 \x1F업그레이드 \x07완료 \x17[!]\n", (0));
                          }
                          if(
[    245 ]                    bread(0x58D2B0 + 0x207C * ((8) / 46) + (getcurpl()) * (46 - 31 * ((8) / 46)) + ((8) % 46)) > Upgrade.cast(Upgrades[CP]).ref
                          ){
                              Upgrade.cast(Upgrades[CP]).ref += 1;
                              DisplayText("\n\x13\x17[!] \x04심판 \x0E매수 \x07완료 \x17[!]\n", (0));
                              CreateUnit(1, (42), (10), (13));
                              SetInvincibility((4), (42), (13), (10));
                              SetDeaths((13), (8), 1, (42));
                          }
                          if(
                              bread(0x58D2B0 + 0x207C * ((14) / 46) + (getcurpl()) * (46 - 31 * ((14) / 46)) + ((14) % 46)) >= 3 && 
[    115 ]                    Command((13), (10), 0, (159))
                          ){
                              GiveUnits(1, (159), (6), (35), (13));
                          }
                          if(
                              Upgrade.cast(Upgrades[CP]).ckn >= 1 && 
                              Deaths((13), (1), 0, (91)) && 
                              Deaths((13), (10), 0, (55)) && 
[    123 ]                    Deaths((13), (10), 0, (212))
                          ){
                              if(
                                  Command((13), (1), Upgrade.cast(Upgrades[CP]).ckn-1, (55))
                              ){
                                  CreateChicken(CP);
                              }
                          }
                          if(
                              bread(0x58D2B0 + 0x207C * ((6) / 46) + (getcurpl()) * (46 - 31 * ((6) / 46)) + ((6) % 46)) >= 3 && 
[    104 ]                    Command((13), (10), 0, (171))
                          ){
                              GiveUnits(1, (171), (6), (35), (13));
                          }
                          if(
                              Upgrade.cast(Upgrades[CP]).svp >= 1 && 
                              Deaths((13), (0), 1, (80)) && 
[    131 ]                    Deaths((13), (0), 1, (192))
                          ){
                              SetDeaths((13), (9), 1, (80));
                              var HeroType;
                              HeroType = wread_epd(Heroes[CP] + 0x064 / 4,  0x064 % 4);
                              var HeroHP;
                              HeroHP = dwread(0x65FD00 + 9808 + HeroType * 4);
                              if(
                                  Deaths((13), (10), 7, (121))
                              ){
                                  SetMemoryEPD(Heroes[CP] + 0x060 / 4, Add, 1280 + Upgrade.cast(Upgrades[CP]).svp * 426 * 1);
                              }
                              else{
                                  SetMemoryEPD(Heroes[CP] + 0x008 / 4, Add, 1280 + Upgrade.cast(Upgrades[CP]).svp * 426 * 1);
                              }
                              if(
                                  MemoryEPD(Heroes[CP] + 0x008 / 4, AtLeast, HeroHP)
                              ){
                                  SetMemoryEPD(Heroes[CP] + 0x008 / 4, SetTo, HeroHP);
                              }
                          }
                          else{
[      5 ]                    SetDeaths((13), (7), 0, (80));
                          }
                          if(
                              bread(0x58D2B0 + 0x207C * ((39) / 46) + (getcurpl()) * (46 - 31 * ((39) / 46)) + ((39) % 46)) == 1 && 
[    136 ]                    wread_epd(Scanner[CP] + 0x0A2 / 4,  0x0A2 % 4) < 51200
                          ){
                              SetMemoryEPD(Scanner[CP] + 0x0A2 / 4, Add, 8 * 65536);
                          }
                          if(
                              bread(0x58D2B0 + 0x207C * ((14) / 46) + (getcurpl()) * (46 - 31 * ((14) / 46)) + ((14) % 46)) >= 5 && 
                              bread(0x58D2B0 + 0x207C * ((6) / 46) + (getcurpl()) * (46 - 31 * ((6) / 46)) + ((6) % 46)) >= 5 && 
                              bread(0x58D2B0 + 0x207C * ((12) / 46) + (getcurpl()) * (46 - 31 * ((12) / 46)) + ((12) % 46)) >= 3 && 
                              bread(0x58D2B0 + 0x207C * ((4) / 46) + (getcurpl()) * (46 - 31 * ((4) / 46)) + ((4) % 46)) >= 3 && 
[    119 ]                    Command((13), (10), 0, (163))
                          ){
                              GiveUnits(1, (163), (6), (35), (13));
                          }
                          //Upgrade
                          //Info
                          if(
[     34 ]                    bread(0x596A18 + 123) == 1
                          ){
                              PlayWAV("staredit\\wav\\ComBeep0.ogg");
                              var InfoText;
                              tct.makeText(InfoText);
                              tct.makeText("\x04캐릭터 정보 - ");
                              var HeroNum;
                              HeroNum = dwread_epd((getcurpl()) + (121) * 12);
                              if(
                                  Bring((13), (10), 1, (74), (9)) || 
                                  Bring((13), (10), 1, (94), (9))
                              ){
                                  tct.addText("\x04영혼\n\n\x08[!]\x02 기지로 돌아가서 부활하세요! \x08[!]\n\n");
                              }
                              else{
                                  switch(HeroNum) {
                                      case 1:
                                          tct.addText("\x04딱총 마린\n빠른 장전 \x02(패시브): Q 쿨다운이 1초 감소합니다.\n");
                                      break;
                                      case 2:
                                          tct.addText("\x04가래침 히드라\n신경 재구성 \x02(패시브): 버로우를 하면 체력이 빠르게 회복됩니다.\n");
                                      break;
                                      case 3:
                                          tct.addText("\x04칼빵 찔럿\n강화 보호막 \x02(패시브): 쉴드 방어력이 3 붙습니다.\n");
                                      break;
                                      case 4:
                                          tct.addText("\x04쉐프 파이어뱃\n테러리스트 \x02(패시브): Q로 건물을 공격할 수 있습니다.\n");
                                      break;
                                      case 5:
                                          tct.addText("\x04케첩 초글링\n쥐구멍 \x02(패시브): 무적 버로우의 쿨다운이 2초 감소합니다.\n");
                                      break;
                                      case 6:
                                          tct.addText("\x04드라군맛 아이스크림\n고출력 펄스 \x02(패시브): W의 침묵 범위와 지속시간이 향상됩니다.\n");
                                      break;
                                      case 7:
                                          tct.addText("\x04한강 물귀신\n이미 죽은 몸 \x02(패시브): 체력 회복 효과를 받을 수 없습니다.\n");
                                      break;
                                      case 8:
                                          tct.addText("\x04스나 고스트\n고속충전기 \x02(패시브): 에너지 회복속도가 빠릅니다.\n");
                                      break;
                                      case 9:
                                          tct.addText("\x04똥침 럴커\n필살 똥침 \x02(패시브): 버로우한 뒤 첫번째 공격이 발악데미지를 줍니다.\n");
                                      break;
                                      case 10:
                                          tct.addText("\x04매너 프로브\n충격방패 \x02(패시브): W가 데미지를 입힙니다.\n");
                                      break;
                                      case 11:
                                          tct.addText("\x04결정장애 라그나사우르\n");
                                      break;
                                      case 12:
                                          tct.addText("\x04보스\n");
                                      break;
                                      case 13:
                                          tct.addText("\x04알파 골리앗\n목표물 고정 \x02(패시브): 이 유닛은 움직이면서 공격할 수 있습니다.");
                                      break;
                                      case 14:
                                          tct.addText("\x04파워후 울트라\n울트라 파워 \x02(패시브): 체력회복속도가 빠릅니다. 교전중엔 더 빠릅니다.\n");
                                      break;
                                      case 15:
                                          tct.addText("\x04헬로 템플러\n명상 (패시브): 실드를 회복하기 위해 필요한 비전투시간이 2.5초 줄어듭니다.\n");
                                      break;
                                  }
                                  if(
                                      Deaths((13), (10), 1, (121))
                                  ){
                                      tct.addText("\x08공격스킬 \x03[Q]\x02: 스커지가 날아가 적 유닛에 닿으면 데미지를 준다. 쿨다운 4초.\n");
                                  }
                                  else{
                                      tct.addText("\x08공격스킬 \x03[Q]\x02: 스커지가 날아가 적 유닛에 닿으면 데미지를 준다. 쿨다운 5초.\n");
                                  }
                              }
                              if(
                                  Deaths((13), (10), 7, (121)) || 
                                  Deaths((13), (10), 7, (121)) || 
                                  Bring((13), (10), 1, (74), (9)) || 
                                  Bring((13), (10), 1, (94), (9))
                              ){
                                  tct.addText("\x0E방어스킬 \x03[W]\x02: 적의 스커지를 반사하고 주변의 적을 3초간 침묵시킨다. 쿨다운 15초.\n");
                              }
                              else{
                                  if(
                                      Deaths((13), (10), 6, (121))
                                  ){
                                      tct.addText("\x0E방어스킬 \x03[W]\x02: 적의 스커지를 방어하고 주변의 적을 3초간 침묵시킨다. 쿨다운 15초.\n");
                                  }
                                  else{
                                      tct.addText("\x0E방어스킬 \x03[W]\x02: 적의 스커지를 방어하고 주변의 적을 1.5초간 침묵시킨다. 쿨다운 15초.\n");
                                  }
                              }
                              var ChickenLv;
                              ChickenLv = bread(0x58D2B0 + 12 + 46 * getcurpl());
                              var SpellHealLv;
                              SpellHealLv = bread(0x58D2B0 + 4 + 46 * getcurpl());
                              if(
                                  !Bring((13), (10), 1, (74), (9)) && 
                                  !Bring((13), (10), 1, (94), (9))
                              ){
                                  switch(HeroNum) {
                                      case 1:
                                          tct.addText("\x0F메딕 소환 \x03[E]\x02: 체력을 조금 회복하고 메딕을 잠깐 소환합니다. 쿨다운 12.5초.\n\x11스팀팩 \x03[T]\x02: 체력을 10 소모하고 잠시동안 이동속도와 공격속도가 빨라집니다.\n");
                                      break;
                                      case 2:
                                          tct.addText("\x0F히드라 웨이브 \x03[E]\x02: 히드라 5기를 소환합니다. 쿨다운: 총 45초 / 1기당 9초.\n");
                                      break;
                                      case 3:
                                          tct.addText("\x0F칼빵러쉬 \x03[E]\x02: 주변의 적 영웅들이 느려집니다. 일반공격마다 추가공격을 하며\n보호막을 조금 회복합니다. 6초 지속.쿨다운 18초.\n");
                                      break;
                                      case 4:
                                          tct.addText("\x0F폭파광 \x03[E]\x02: 5초동안 무적이 되면서 지뢰를 깝니다. 쿨다운 25초.\n\x11스팀팩 \x03[T]\x02: 체력을 10 소모하고 잠시동안 이동속도와 공격속도가 빨라집니다.\n");
                                      break;
                                      case 5:
                                          tct.addText("\x0F짬뽕 \x03[E]\x02: Q와 W를 동시에 사용합니다. 쿨다운 10초.\n");
                                      break;
                                      case 6:
                                          tct.addText("\x0F셔틀 전개 \x03[E]\x02: 스캐럽이 장전된 셔틀을 소환합니다. 쿨다운 20초.\n\x0F셔틀 회수 \x03[E]\x02: 스캐럽을 장전하기 위해 셔틀을 회수합니다. 스캐럽 개당 쿨다운 6초.\n");
                                      break;
                                      case 7:
                                          tct.addText("\x0F한강낚시 \x03[E]\x02: 적 하나를 끌어옵니다. 데미지 80, 공업당 8 증가. 쿨다운 15초.\n");
                                      break;
                                      case 8:
                                          tct.addText("\x0F레이저 샷 \x03[E]\x02: 대상에게 레이저를 쏩니다. 일반형 데미지 100 + 공업당 10.\n\x1E클로킹 \x03[C]\x02: 은신상태가 됩니다. 도중에 스킬을 쓰면 해제됩니다.\n");
                                      break;
                                      case 9:
                                          tct.addText("\x0F역병분충\x03 [E]\x02: 무적의 디파일러가 18초동안 싸웁니다. 본체와 멀어지면 무적이 풀립니다. \x02쿨다운 30초.\n");
                                      break;
                                      case 10:
                                          tct.addText("\x0F반격 쉴드 \x03[E]\x02: 3초동안 최대 200의 피해를 흡수하고 1.2배 + 공업당 +0.1배로 반격합니다.\n쉴드 100을 회복합니다. 쿨다운 8초.\n");
                                      break;
                                      case 11:
                                          if(
                                              bread(0x58CF44 + 0x21FC * ((3) / 24) + (getcurpl()) * (24 - 4 * ((3) / 24)) + ((3) % 24)) == 1
                                          ){
                                              tct.addText("\x0F폭발엔딩 \x03[E]\x02: 즉시 자폭합니다. 폭발형 데미지 3000.\n");
                                          }
                                      break;
                                      case 12:
                                          tct.addText("\x0F유체이탈 \x03[E]\x02: 보스에서 내리고 영혼이 됩니다.\n");
                                      break;
                                      case 13:
                                          tct.addText("\x0F인공지능 미사일 \x03[E]\x02: 공중무기로 적 지상유닛을 3회 공격합니다. 쿨다운 10초.\n");
                                      break;
                                      case 14:
                                          tct.addText("\x0F괴수돌진 \x03[E]\x02: 3초동안 이동속도가 증가하고 다음 공격시 데미지 80 + 공업당 8의 데미지와\n 애시드 스포어 5중첩을 줍니다. 쿨다운 15초.\n");
                                      break;
                                      case 15:
                                          tct.addText("\x0F초대박강화 \x03[E]\x02: 일반스킬 쿨다운이 초기화되고 다음에 쓰는 스킬이 강화됩니다. 쿨다운 15초.\n\x07100단콤보 미사일 \x03[E-Q]\x02: 기존 Q보다 데미지가 약 8.3배 증가합니다.\n\x07제압 방패 \x03[E-W]\x02: 주위 적들이 8초 침묵하고 3초동안 기절합니다.\n\x1F스톰 지지기 \x03[T]\x02: 방어력을 무시하는 지속적인 피해를 입힙니다. 데미지 112 + 공업당 8.\n");
                                      break;
                                  }
                                  if(
                                      Deaths((13), (10), 2, (121)) || 
                                      Deaths((13), (10), 5, (121)) || 
                                      Deaths((13), (10), 9, (121))
                                  ){
                                      if(
                                          Deaths((13), (10), 5, (121))
                                      ){
                                          tct.addText("\x15버로우 \x03[U]\x02: 1초동안 무적이 되며 체력을 서서히 회복합니다. 무적 쿨다운 3초.\n");
                                      }
                                      else{
                                          tct.addText("\x15버로우 \x03[U]\x02: 1초동안 무적이 되며 체력을 서서히 회복합니다. 무적 쿨다운 5초.\n");
                                      }
                                  }
                                  tct.addText("\x03회복키트 \x03[B]\x02: 7초동안 행동불능이 되고 체력을 전부 회복합니다.\n공격받으면 취소됩니다. 쿨다운 40초, 취소시 쿨다운 7초.\n");
                              }
                              switch(Upgrade.cast(Upgrades[CP]).ckn) {
                                  case 1:
                                      tct.addText("\x11닭둘기 Lv1 \x03(패시브)\x02: 뮤탈 최대 1기가 따라다니면서 같이 싸웁니다. 쿨다운 10초.\n");
                                  break;
                                  case 2:
                                      tct.addText("\x11닭둘기 Lv2 \x03(패시브)\x02: 뮤탈 최대 2기가 따라다니면서 같이 싸웁니다. 쿨다운 10초.\n");
                                  break;
                                  case 3:
                                      tct.addText("\x11닭둘기 Lv3 \x03(패시브)\x02: 뮤탈 최대 3기가 따라다니면서 같이 싸웁니다. 쿨다운 10초.\n");
                                  break;
                                  case 4:
                                      tct.addText("\x11닭둘기 Lv4 \x03(패시브)\x02: 뮤탈 최대 4기가 따라다니면서 같이 싸웁니다. 쿨다운 10초.\n");
                                  break;
                                  case 5:
                                      tct.addText("\x11닭둘기 Lv5 \x03(패시브)\x02: 뮤탈 최대 5기가 따라다니면서 같이 싸웁니다. 쿨다운 10초.\n");
                                  break;
                              }
                              if(
                                  Deaths((13), (10), 7, (121))
                              ){
                                  switch(Upgrade.cast(Upgrades[CP]).svp) {
                                      case 1:
                                          tct.addText("\x1D주문흡혈 Lv1 \x03(패시브)\x02: Q가 착탄했을때 영웅의 실드를 20 회복합니다.\n");
                                      break;
                                      case 2:
                                          tct.addText("\x1D주문흡혈 Lv2 \x03(패시브)\x02: Q가 착탄했을때 영웅의 실드를 40 회복합니다.\n");
                                      break;
                                      case 3:
                                          tct.addText("\x1D주문흡혈 Lv3 \x03(패시브)\x02: Q가 착탄했을때 영웅의 실드를 60 회복합니다.\n");
                                      break;
                                      case 4:
                                          tct.addText("\x1D주문흡혈 Lv4 \x03(패시브)\x02: Q가 착탄했을때 영웅의 실드를 70 회복합니다.\n");
                                      break;
                                      case 5:
                                          tct.addText("\x1D주문흡혈 Lv5 \x03(패시브)\x02: Q가 착탄했을때 영웅의 실드를 80 회복합니다.\n");
                                      break;
                                  }
                              }
                              else{
                                  switch(Upgrade.cast(Upgrades[CP]).svp) {
                                      case 1:
                                          tct.addText("\x1D주문흡혈 Lv1 \x03(패시브)\x02: Q가 착탄했을때 영웅의 체력을 40 회복합니다.\n");
                                      break;
                                      case 2:
                                          tct.addText("\x1D주문흡혈 Lv2 \x03(패시브)\x02: Q가 착탄했을때 영웅의 체력을 50 회복합니다.\n");
                                      break;
                                      case 3:
                                          tct.addText("\x1D주문흡혈 Lv3 \x03(패시브)\x02: Q가 착탄했을때 영웅의 체력을 60 회복합니다.\n");
                                      break;
                                      case 4:
                                          tct.addText("\x1D주문흡혈 Lv4 \x03(패시브)\x02: Q가 착탄했을때 영웅의 체력을 70 회복합니다.\n");
                                      break;
                                      case 5:
                                          tct.addText("\x1D주문흡혈 Lv5 \x03(패시브)\x02: Q가 착탄했을때 영웅의 체력을 80 회복합니다.\n");
                                      break;
                                  }
                              }
                              txtPtr = dwread_epd(EPD(0x640B58));
                              tct.displayText();
                              SetMemory(0x640B58, SetTo, txtPtr);
                          }
                          //Info
                          //Minion
                          if(
[     41 ]                    Bring((13), (0), 1, (230), (133))
                          ){
                              if(
                                  Bring((13), (0), 1, (104), (133))
                              ){
                                  DisplayText("잡몹을 병력에 편성했습니다. \x07-100G", (0));
                                  MinionWave.cast(MinionWaves[getcurpl()]).mob1 += 1;
                              }
                              if(
                                  Bring((13), (0), 1, (38), (133))
                              ){
                                  DisplayText("급식충을 병력에 편성했습니다. \x07-250G", (0));
                                  MinionWave.cast(MinionWaves[getcurpl()]).mob2 += 1;
                              }
                              if(
                                  Bring((13), (0), 1, (65), (133))
                              ){
                                  DisplayText("버틸 수가 없는 놈을 병력에 편성했습니다. \x07-350G", (0));
                                  MinionWave.cast(MinionWaves[getcurpl()]).mob3 += 1;
                              }
                              if(
                                  Bring((13), (0), 1, (66), (133))
                              ){
                                  DisplayText("니조랄을 병력에 편성했습니다. \x07-500G", (0));
                                  MinionWave.cast(MinionWaves[getcurpl()]).mob4 += 1;
                              }
                              if(
                                  Bring((13), (0), 1, (22), (133))
                              ){
                                  DisplayText("붕탁맨을 아주 찰지게 병력에 편성했습니다. \x07-800G", (0));
                                  MinionWave.cast(MinionWaves[getcurpl()]).mob5 += 1;
                              }
                              SetInvincibility((4), (230), (13), (133));
                              MoveUnit(0, (230), (0), (133), (25));
                              MoveUnit(0, (230), (1), (133), (38));
                              MoveUnit(0, (230), (2), (133), (36));
                              MoveUnit(0, (230), (3), (133), (39));
[      1 ]                    MoveUnit(0, (230), (4), (133), (37));
                              MoveUnit(0, (230), (5), (133), (40));
                          }
                          if(
[    130 ]                    Bring((13), (0), 1, (230), (35))
                          ){
                              if(
                                  Bring((13), (0), 1, (104), (35))
                              ){
                                  DisplayText("잡몹을 병력에서 뺏습니다. \x07+90G", (0));
                                  MinionWave.cast(MinionWaves[getcurpl()]).mob1 -= 1;
                                  KillUnitAt(1, (104), (35), (13));
                                  SetResources((13), (8), 90, (1));
                              }
                              if(
                                  Bring((13), (0), 1, (38), (35))
                              ){
                                  DisplayText("급식충을 병력에서 뺏습니다. \x07+225G", (0));
                                  MinionWave.cast(MinionWaves[getcurpl()]).mob2 -= 1;
                                  KillUnitAt(1, (38), (35), (13));
                                  SetResources((13), (8), 225, (1));
                              }
                              if(
                                  Bring((13), (0), 1, (65), (35))
                              ){
                                  DisplayText("버틸수가 없는 녀석을 병력에서 뺏습니다. \x07+315G", (0));
                                  MinionWave.cast(MinionWaves[getcurpl()]).mob3 -= 1;
                                  KillUnitAt(1, (65), (35), (13));
                                  SetResources((13), (8), 315, (1));
                              }
                              if(
                                  Bring((13), (0), 1, (66), (35))
                              ){
                                  DisplayText("니조랄을 병력에서 뺏습니다. \x07+450G", (0));
                                  MinionWave.cast(MinionWaves[getcurpl()]).mob4 -= 1;
                                  KillUnitAt(1, (66), (35), (13));
                                  SetResources((13), (8), 450, (1));
                              }
                              if(
                                  Bring((13), (0), 1, (22), (35))
                              ){
                                  DisplayText("붕탁맨을 딥 다크하게 병력에서 뺏습니다. \x07+720G", (0));
                                  MinionWave.cast(MinionWaves[getcurpl()]).mob5 -= 1;
                                  KillUnitAt(1, (22), (35), (13));
                                  SetResources((13), (8), 720, (1));
                              }
                          }
                          if(
                              Deaths((6), (10), 20, (211)) && 
                              Deaths((6), (10), 0, (173)) && 
[     11 ]                    Bring((13), (0), 1, (215), (26))
                          ){
                              if(
                                  Switch((37), (3))
                              ){
                                  for(var i = 0 ; i < 2 ; i++){
[      3 ]                            GenerateMobWave();
                                      if(
                                          getcurpl() % 2 == 0
                                      ){
[      1 ]                                GiveUnits(0, (104), (13), (10), (6));
[      1 ]                                GiveUnits(0, (38), (13), (10), (6));
                                          GiveUnits(0, (65), (13), (10), (6));
                                          GiveUnits(0, (66), (13), (10), (6));
                                          GiveUnits(0, (22), (13), (10), (6));
                                          if(
                                              i == 0
                                          ){
                                              MoveUnit(0, (104), (6), (10), (14));
                                              MoveUnit(0, (38), (6), (10), (14));
                                              MoveUnit(0, (65), (6), (10), (14));
                                              MoveUnit(0, (66), (6), (10), (14));
                                              MoveUnit(0, (22), (6), (10), (14));
                                          }
                                          else{
[      1 ]                                    MoveUnit(0, (104), (6), (10), (13));
                                              MoveUnit(0, (38), (6), (10), (13));
                                              MoveUnit(0, (65), (6), (10), (13));
                                              MoveUnit(0, (66), (6), (10), (13));
                                              MoveUnit(0, (22), (6), (10), (13));
                                          }
                                      }
                                      else{
                                          GiveUnits(0, (104), (13), (10), (7));
[      1 ]                                GiveUnits(0, (38), (13), (10), (7));
                                          GiveUnits(0, (65), (13), (10), (7));
[      1 ]                                GiveUnits(0, (66), (13), (10), (7));
                                          GiveUnits(0, (22), (13), (10), (7));
                                          if(
                                              i == 0
                                          ){
                                              MoveUnit(0, (104), (7), (10), (15));
                                              MoveUnit(0, (38), (7), (10), (15));
                                              MoveUnit(0, (65), (7), (10), (15));
                                              MoveUnit(0, (66), (7), (10), (15));
                                              MoveUnit(0, (22), (7), (10), (15));
                                          }
                                          else{
[      1 ]                                    MoveUnit(0, (104), (7), (10), (16));
                                              MoveUnit(0, (38), (7), (10), (16));
                                              MoveUnit(0, (65), (7), (10), (16));
                                              MoveUnit(0, (66), (7), (10), (16));
                                              MoveUnit(0, (22), (7), (10), (16));
                                          }
                                      }
                                  }
                              }
                              else{
                                  GenerateMobWave();
                                  GiveUnits(0, (104), (13), (10), (6));
                                  GiveUnits(0, (38), (13), (10), (6));
                                  GiveUnits(0, (65), (13), (10), (6));
                                  GiveUnits(0, (66), (13), (10), (6));
                                  GiveUnits(0, (22), (13), (10), (6));
                                  if(
                                      Bring((13), (0), 1, (215), (27))
                                  ){
                                      MoveUnit(0, (104), (6), (10), (14));
                                      MoveUnit(0, (38), (6), (10), (14));
                                      MoveUnit(0, (65), (6), (10), (14));
                                      MoveUnit(0, (66), (6), (10), (14));
                                      MoveUnit(0, (22), (6), (10), (14));
                                  }
                                  else{
                                      MoveUnit(0, (104), (6), (10), (13));
                                      MoveUnit(0, (38), (6), (10), (13));
                                      MoveUnit(0, (65), (6), (10), (13));
                                      MoveUnit(0, (66), (6), (10), (13));
                                      MoveUnit(0, (22), (6), (10), (13));
                                  }
                              }
                          }
                          //Minion
                      }
[     85 ]        EUDEndPlayerLoop();
                  //AstralCode: Color, Potential, Carrier
[    584 ]        astralcode.Color();
[     10 ]        astralcode.Potential();
[     11 ]        astralcode.Carrier();
                  //AstralCode: Color, Potential, Carrier
                  //Boss
                  if(
                      Deaths((6), (10), 22, (212)) && 
[      3 ]            Memory(0x6283F0, (1), 1699)
                  ){
                      Boss = epdread_epd(EPD(0x628438));
                      SetDeaths((6), (7), 0, (212));
                      CreateUnit(1, (76), (10), (6));
                      GiveUnits(0, (76), (13), (10), (9));
                      SetInvincibility((4), (76), (9), (10));
                      MoveUnit(0, (76), (9), (10), (98));
                  }
                  if(
                      Switch((37), (3)) && 
                      Command((9), (0), 1, (76)) && 
[      6 ]            Boss != 0
                  ){
                      SetMemoryEPD(Boss + 0x060 / 4, Add, 256 * 1);
                  }
                  //Boss
                  //Gateway
[     17 ]        EUDPlayerLoop()();
[     36 ]            if (getcurpl() == 6 || getcurpl() == 7) {
                          if(
                              Command((13), (0), 1, (160))
                          ){
                              if(
[     33 ]                        MemoryEPD(Gateway[getcurpl()] + 0x060 / 4, AtMost, 128)
                              ){
                                  if(
                                      Deaths((13), (10), 0, (141))
                                  ){
                                      SetDeaths((13), (7), 127, (204));
                                  }
                                  SetDeaths((13), (7), 180, (141));
                              }
                          }
                      }
[     41 ]        EUDEndPlayerLoop();
                  //Gateway
                  //LevelUp
                  if(
[      2 ]            Deaths((6), (10), 17, (212))
                  ){
                      SetDeaths((6), (7), 0, (212));
                      dwwrite(0x65FD00 + 9808 + 20 * 4, dwread(0x65FD00 + 9808 + 20 * 4) + 25600);
                      dwwrite(0x65FD00 + 9808 + 53 * 4, dwread(0x65FD00 + 9808 + 53 * 4) + 25600);
                      dwwrite(0x65FD00 + 9808 + 77 * 4, dwread(0x65FD00 + 9808 + 77 * 4) + 25600);
                      dwwrite(0x65FD00 + 9808 + 10 * 4, dwread(0x65FD00 + 9808 + 10 * 4) + 25600);
                      dwwrite(0x65FD00 + 9808 + 54 * 4, dwread(0x65FD00 + 9808 + 54 * 4) + 25600);
                      dwwrite(0x65FD00 + 9808 + 78 * 4, dwread(0x65FD00 + 9808 + 78 * 4) + 25600);
                      dwwrite(0x65FD00 + 9808 + 61 * 4, dwread(0x65FD00 + 9808 + 61 * 4) + 25600);
                      dwwrite(0x65FD00 + 9808 + 1 * 4, dwread(0x65FD00 + 9808 + 1 * 4) + 25600);
                      dwwrite(0x65FD00 + 9808 + 103 * 4, dwread(0x65FD00 + 9808 + 103 * 4) + 25600);
                      dwwrite(0x65FD00 + 9808 + 64 * 4, dwread(0x65FD00 + 9808 + 64 * 4) + 25600);
                      dwwrite(0x65FD00 + 9808 + 95 * 4, dwread(0x65FD00 + 9808 + 95 * 4) + 25600);
                      dwwrite(0x65FD00 + 9808 + 17 * 4, dwread(0x65FD00 + 9808 + 17 * 4) + 25600);
                      dwwrite(0x65FD00 + 9808 + 39 * 4, dwread(0x65FD00 + 9808 + 39 * 4) + 25600);
                      dwwrite(0x65FD00 + 9808 + 67 * 4, dwread(0x65FD00 + 9808 + 67 * 4) + 25600);
                      dwwrite(0x65FD00 + 9808 + 23 * 4, dwread(0x65FD00 + 9808 + 23 * 4) + 25600);
                      dwwrite(0x65FD00 + 9808 + 51 * 4, dwread(0x65FD00 + 9808 + 51 * 4) + 25600);
                      dwwrite(0x65FD00 + 9808 + 68 * 4, dwread(0x65FD00 + 9808 + 68 * 4) + 25600);
                      dwwrite(0x65FD00 + 9808 + 2 * 4, dwread(0x65FD00 + 9808 + 2 * 4) + 25600);
                      dwwrite(0x65FD00 + 9808 + 41 * 4, dwread(0x65FD00 + 9808 + 41 * 4) + 25600);
                      dwwrite(0x65FD00 + 9808 + 86 * 4, dwread(0x65FD00 + 9808 + 86 * 4) + 25600);
                      ModifyUnitHitPoints(0, (20), (17), (64), 100);
                      ModifyUnitHitPoints(0, (53), (17), (64), 100);
                      ModifyUnitHitPoints(0, (77), (17), (64), 100);
                      ModifyUnitHitPoints(0, (10), (17), (64), 100);
                      ModifyUnitHitPoints(0, (54), (17), (64), 100);
                      ModifyUnitHitPoints(0, (78), (17), (64), 100);
                      ModifyUnitHitPoints(0, (61), (17), (64), 100);
                      ModifyUnitHitPoints(0, (1), (17), (64), 100);
                      ModifyUnitHitPoints(0, (103), (17), (64), 100);
                      ModifyUnitHitPoints(0, (64), (17), (64), 100);
                      ModifyUnitHitPoints(0, (95), (17), (64), 100);
                      ModifyUnitHitPoints(0, (17), (17), (64), 100);
                      ModifyUnitHitPoints(0, (39), (17), (64), 100);
                      ModifyUnitHitPoints(0, (67), (17), (64), 100);
                  }
                  //LevelUp
                  //1v1Set
                  if(
[      1 ]            Deaths((6), (10), 25, (212))
                  ){
                      SetDeaths((6), (7), 0, (212));
                      dwwrite(0x65FD00 + 9808 + 162 * 4, 192000);
                      dwwrite(0x65FD00 + 9808 + 124 * 4, dwread(0x65FD00 + 9808 + 124 * 4) + -320000);
                      dwwrite(0x65FD00 + 9808 + 160 * 4, dwread(0x65FD00 + 9808 + 160 * 4) + -256000);
                      dwwrite(0x65FD00 + 9808 + 154 * 4, dwread(0x65FD00 + 9808 + 154 * 4) + -640000);
                      dwwrite(0x65FD00 + 9808 + 170 * 4, dwread(0x65FD00 + 9808 + 170 * 4) + -64000);
                      wwrite(0x65FD00 + 4352 + 170 * 2, wread(0x65FD00 + 4352 + 170 * 2) + -750);
                      wwrite(0x655700 + 1152 + 14 * 2, wread(0x655700 + 1152 + 14 * 2) + -750);
                      wwrite(0x655700 + 576 + 14 * 2, wread(0x655700 + 576 + 14 * 2) + -75);
                      wwrite(0x655700 + 1152 + 6 * 2, wread(0x655700 + 1152 + 6 * 2) + -750);
                      wwrite(0x655700 + 576 + 6 * 2, wread(0x655700 + 576 + 6 * 2) + -75);
                      wwrite(0x655700 + 1152 + 12 * 2, wread(0x655700 + 1152 + 12 * 2) + -750);
                      wwrite(0x655700 + 576 + 12 * 2, wread(0x655700 + 576 + 12 * 2) + -75);
                      wwrite(0x655700 + 1152 + 4 * 2, wread(0x655700 + 1152 + 4 * 2) + -750);
                      wwrite(0x655700 + 576 + 4 * 2, wread(0x655700 + 576 + 4 * 2) + -75);
                      ModifyUnitHitPoints(0, (231), (17), (9), 100);
                      ModifyUnitShields(0, (231), (17), (9), 100);
                  }
                  //1v1Set
                  //+4PSet
                  if(
[      1 ]            Deaths((6), (10), 24, (212))
                  ){
                      SetDeaths((6), (7), 0, (212));
                      dwwrite(0x65FD00 + 9808 + 162 * 4, 768000);
                      dwwrite(0x65FD00 + 9808 + 124 * 4, dwread(0x65FD00 + 9808 + 124 * 4) + 640000);
                      dwwrite(0x65FD00 + 9808 + 154 * 4, dwread(0x65FD00 + 9808 + 154 * 4) + 1280000);
                      ModifyUnitHitPoints(0, (231), (17), (9), 100);
                      ModifyUnitShields(0, (231), (17), (9), 100);
                  }
                  //+4PSet
                  //Random
[     67 ]        Random = dwrand() % (15 + 1);
                  SetDeaths((7), (7), Random, (189));
                  //Random
[     14 ]        EUDPlayerLoop()();
[     18 ]            if (getcurpl() == 7) {
                          if(
                              Switch((37), (3))
                          ){
[      2 ]                    break;
                          }
                          //HeroGen
                          if(
                              Deaths((13), (10), 26, (212)) && 
                              Memory(0x6283F0, (1), 1698)
                          ){
                              var index;
                              if(
                                  Bring((8), (0), 1, (23), (176))
                              ){
                                  SetDeaths((13), (7), 0, (212));
                                  SetDeaths((13), (8), 1, (150));
                                  SetDeaths((0), (7), 0, (150));
                                  index = 0;
                                  HeroPvE[index] = epdread_epd(EPD(0x628438));
                                  HeroPvEPtr[index] = dwread_epd(EPD(0x628438));
                                  CreateUnit(1, (23), (10), (7));
                                  MoveUnit(0, (23), (13), (10), (12));
                                  GiveUnits(0, (23), (17), (176), (10));
                                  var turret;
                                  turret = dwread_epd(HeroPvE[index] + 0x070 / 4);
                                  SetUnitColor(turret,10);
                                  SetUnitColor(HeroPvEPtr[index],10);
                              }
                              if(
                                  Bring((8), (0), 1, (51), (176))
                              ){
                                  SetDeaths((13), (7), 0, (212));
                                  SetDeaths((13), (8), 1, (150));
                                  SetDeaths((1), (7), 0, (150));
                                  index = 1;
                                  HeroPvE[index] = epdread_epd(EPD(0x628438));
                                  HeroPvEPtr[index] = dwread_epd(EPD(0x628438));
                                  CreateUnit(1, (51), (10), (7));
                                  MoveUnit(0, (51), (13), (10), (12));
                                  GiveUnits(0, (51), (17), (176), (10));
                                  SetUnitColor(HeroPvEPtr[index],10);
                              }
                              if(
                                  Bring((8), (0), 1, (68), (176))
                              ){
                                  SetDeaths((13), (7), 0, (212));
                                  SetDeaths((13), (8), 1, (150));
                                  SetDeaths((2), (7), 0, (150));
                                  index = 2;
                                  HeroPvE[index] = epdread_epd(EPD(0x628438));
                                  HeroPvEPtr[index] = dwread_epd(EPD(0x628438));
                                  CreateUnit(1, (68), (10), (7));
                                  MoveUnit(0, (68), (13), (10), (12));
                                  GiveUnits(0, (68), (17), (176), (10));
                                  SetUnitColor(HeroPvEPtr[index],10);
                              }
                              if(
                                  Bring((8), (0), 1, (2), (176))
                              ){
                                  SetDeaths((13), (7), 0, (212));
                                  SetDeaths((13), (8), 1, (150));
                                  SetDeaths((3), (7), 0, (150));
                                  index = 3;
                                  HeroPvE[index] = epdread_epd(EPD(0x628438));
                                  HeroPvEPtr[index] = dwread_epd(EPD(0x628438));
                                  CreateUnit(1, (2), (10), (7));
                                  MoveUnit(0, (2), (13), (10), (12));
                                  GiveUnits(0, (2), (17), (176), (10));
                                  SetUnitColor(HeroPvEPtr[index],10);
                              }
                              if(
                                  Bring((8), (0), 1, (41), (176))
                              ){
                                  SetDeaths((13), (7), 0, (212));
                                  SetDeaths((13), (8), 1, (150));
                                  SetDeaths((4), (7), 0, (150));
                                  index = 4;
                                  HeroPvE[index] = epdread_epd(EPD(0x628438));
                                  HeroPvEPtr[index] = dwread_epd(EPD(0x628438));
                                  CreateUnit(1, (41), (10), (7));
                                  MoveUnit(0, (41), (13), (10), (12));
                                  GiveUnits(0, (41), (17), (176), (10));
                                  SetUnitColor(HeroPvEPtr[index],10);
                                  DronePoisonTimer = 0;
                              }
                              if(
                                  Bring((8), (0), 1, (86), (176))
                              ){
                                  SetDeaths((13), (7), 0, (212));
                                  SetDeaths((13), (8), 1, (150));
                                  SetDeaths((5), (7), 0, (150));
                                  index = 5;
                                  HeroPvE[index] = epdread_epd(EPD(0x628438));
                                  HeroPvEPtr[index] = dwread_epd(EPD(0x628438));
                                  CreateUnit(1, (86), (10), (7));
                                  MoveUnit(0, (86), (13), (10), (12));
                                  GiveUnits(0, (86), (17), (176), (10));
                                  SetUnitColor(HeroPvEPtr[index],10);
                              }
                          }
                          //HeroGen
                          for(var i = 0 ; i < 6 ; i++){
                              if(
                                  HeroPvE[i] == 0 || 
                                  bread_epd(HeroPvE[i] + 0x04D / 4,  0x04D % 4) == 0 || 
                                  MemoryEPD(HeroPvE[i] + 0x00C / 4, Exactly, 0)
                              ){
                                  if(
                                      ObserverPvE[i] != 0 && 
                                      bread_epd(ObserverPvE[i] + 0x04D / 4,  0x04D % 4) != 0 && 
                                      !MemoryEPD(ObserverPvE[i] + 0x00C / 4, Exactly, 0)
                                  ){
                                      bwrite_epd(ObserverPvE[i] + 0x04D / 4,  0x04D % 4, 0);
                                      ObserverPvE[i] = 0;
                                  }
                                  if(
                                      i == 3
                                  ){
                                      for(var j = 0 ; j < 3 ; j++){
                                          if(
                                              !MemoryEPD(WidowMines[i] + 0x00C / 4, Exactly, 0) && 
                                              wread_epd(WidowMines[i] + 0x064 / 4,  0x064 % 4) == 57
                                          ){
                                              bwrite_epd(WidowMines[j] + 0x04D / 4,  0x04D % 4, 0);
                                          }
                                      }
                                  }
                                  HeroPvE[i] = 0;
                                  continue;
                              }
                              var HeroType;
                              var Range;
                              var Place;
                              var Hitbox;
                              var EngageHP;
                              var DangerHP;
                              var PlyrsInRange = 0;
                              HeroType = wread_epd(HeroPvE[i] + 0x064 / 4,  0x064 % 4);
                              var BehaviourNum;
                              BehaviourNum = dwread_epd((i) + (150) * 12);
                              //LocSettings
                              switch(i) {
                                  case 0:
                                      Range = 168;
                                      Place = 173;
                                      Hitbox = 188;
                                      EngageHP = 115200;
                                      DangerHP = 51200;
                                  break;
                                  case 1:
                                      Range = 169;
                                      Place = 174;
                                      Hitbox = 189;
                                      EngageHP = 102400;
                                      DangerHP = 51200;
                                  break;
                                  case 2:
                                      Range = 170;
                                      Place = 175;
                                      Hitbox = 190;
                                      EngageHP = 76800;
                                      DangerHP = 35840;
                                  break;
                                  case 3:
                                      Range = 182;
                                      Place = 185;
                                      Hitbox = 191;
                                      EngageHP = 121600;
                                      EngageHP = 25600;
                                  break;
                                  case 4:
                                      Range = 183;
                                      Place = 186;
                                      Hitbox = 192;
                                      EngageHP = 64000;
                                      DangerHP = 25600;
                                  break;
                                  case 5:
                                      Range = 184;
                                      Place = 187;
                                      Hitbox = 193;
                                      EngageHP = 76800;
                                      DangerHP = 38400;
                                  break;
                              }
                              MoveLocation((Range), (HeroType), (13), (9));
                              MoveLocation((Hitbox), (HeroType), (13), (9));
                              MoveLocation((181), (HeroType), (13), (9));
                              MoveLocation((194), (HeroType), (13), (9));
                              if(
                                  Bring((13), (0), 1, (HeroType), (9)) && 
                                  Bring((13), (10), 0, (HeroType), (Place))
                              ){
                                  MoveLocation((Place), (HeroType), (13), (9));
                              }
                              if(
                                  Deaths((6), (10), 0, (207))
                              ){
                                  PlyrsInRange = HeroBring(Range-1);
                              }
                              //LocSettings
                              //Observer
                              if(
                                  ObserverPvE[i] != 0 && 
                                  bread_epd(ObserverPvE[i] + 0x04D / 4,  0x04D % 4) != 0 && 
                                  !MemoryEPD(ObserverPvE[i] + 0x00C / 4, Exactly, 0)
                              ){
                                  if(
                                      Deaths((6), (10), 0, (207))
                                  ){
                                      COrderLocEPD(ObserverPvE[i],158,Hitbox-1);
                                  }
                              }
                              else{
                                  ObserverPvE[i] = 0;
                                  if(
                                      Deaths((6), (0), 30, (205)) && 
                                      Deaths((7), (10), 0, (190)) && 
                                      Memory(0x6283F0, (1), 1699)
                                  ){
                                      ObserverPvE[i] = epdread_epd(EPD(0x628438));
                                      CreateUnit(1, (84), (10), (7));
                                      MoveUnit(0, (84), (7), (10), (Place));
                                      SetDeaths((7), (7), 180, (190));
                                  }
                                  else{
                                      SetDeaths((7), (9), 1, (190));
                                  }
                              }
                              //Observer
                              //ZealotSlow
                              if(
                                  Deaths((i), (0), 1, (208))
                              ){
                                  AddStatusFlagsEPD(HeroPvE[i],262144);
                              }
                              //ZealotSlow
                              //Passive
                              if(
                                  i == 1 && 
                                  Deaths((6), (10), 6, (207))
                              ){
                                  if(
                                      MemoryEPD(HeroPvE[i] + 0x008 / 4, AtMost, DangerHP) && 
                                      bread_epd(HeroPvE[i] + 0x0A6 / 4,  0x0A6 % 4) != 109
                                  ){
                                      bwrite_epd(HeroPvE[i] + 0x0A6 / 4,  0x0A6 % 4, 109);
                                  }
                                  if(
                                      MemoryEPD(HeroPvE[i] + 0x008 / 4, AtLeast, EngageHP) && 
                                      bread_epd(HeroPvE[i] + 0x0A6 / 4,  0x0A6 % 4) == 109
                                  ){
                                      bwrite_epd(HeroPvE[i] + 0x0A6 / 4,  0x0A6 % 4, 110);
                                  }
                                  if(
                                      wread_epd(HeroPvE[i] + 0x0A2 / 4,  0x0A2 % 4) >= 12800 && 
                                      EskillCooldownPvE[i] <= 113
                                  ){
                                      wwrite_epd(HeroPvE[i] + 0x0A2 / 4,  0x0A2 % 4, 12800);
                                  }
                                  if(
                                      wread_epd(HeroPvE[i] + 0x0A2 / 4,  0x0A2 % 4) >= 6400 && 
                                      Bring((14), (0), 1, (230), (Range))
                                  ){
                                      if(
                                          Bring((18), (0), 1, (230), (Range)) || 
                                          Bring((19), (0), 1, (230), (Range))
                                      ){
                                          MoveLocation((97), (230), (14), (Range));
                                          if(
                                              wread_epd(HeroPvE[i] + 0x0A2 / 4,  0x0A2 % 4) >= 25600
                                          ){
                                              COrderLocEPD(HeroPvE[i],146,96);
                                          }
                                          else{
                                              COrderLocEPD(HeroPvE[i],142,96);
                                          }
                                      }
                                  }
                              }
                              if(
                                  i == 2
                              ){
                                  var MaxShield = 0;
                                  MaxShield = wread(0x65FD00 + 4352 + 68 * 2);
                                  MaxShield *= 256;
                                  SetMemoryEPD(HeroPvE[i] + 0x060 / 4, Add, 192 * 1);
                                  if(
                                      MemoryEPD(HeroPvE[i] + 0x060 / 4, AtLeast, MaxShield)
                                  ){
                                      SetMemoryEPD(HeroPvE[i] + 0x060 / 4, SetTo, MaxShield);
                                  }
                              }
                              //Passive
                              //Qskill
                              if(
                                  PlyrsInRange >= 1 && 
                                  QskillCooldownPvE[i] == 0 && 
                                  Bring((7), (10), 0, (47), (9)) && 
                                  Deaths((6), (0), 60, (205))
                              ){
                                  CreateUnit(1, (47), (10), (7));
                                  SetInvincibility((4), (47), (7), (10));
                                  MoveUnit(0, (47), (7), (10), (Hitbox));
                                  QskillCooldownPvE[i] = 90;
                              }
                              if(
                                  QskillCooldownPvE[i] >= 1 && 
                                  Bring((7), (10), 0, (47), (9))
                              ){
                                  QskillCooldownPvE[i] -= 1;
                              }
                              //Qskill
                              //Wskill
                              MoveLocation((107), (HeroType), (7), (9));
                              if(
                                  dwread_epd(EPD(0x58A364 + 48 * 207 + 4 * 6)) % 6 == i && 
                                  Bring((14), (0), 1, (47), (107)) && 
                                  Deaths((7), (10), 0, (126)) && 
                                  WskillCooldownPvE[i] == 0 && 
                                  Deaths((6), (0), 60, (205))
                              ){
                                  WskillCooldownPvE[i] = 180;
                                  CreateUnit(1, (82), (10), (7));
                                  MoveUnit(0, (82), (7), (10), (Hitbox));
                                  MoveLocation((107), (82), (7), (9));
                                  KillUnitAt(0, (82), (64), (13));
                                  KillUnitAt(0, (47), (107), (14));
                                  KillUnitAt(0, (98), (107), (18));
                                  KillUnitAt(0, (98), (107), (19));
                                  for(var j = 0 ; j < 6 ; j++){
                                      if(
                                          Heroes[j] != 0 && 
                                          FastDistanceUnit(HeroPvE[i],Heroes[j]) < 112
                                      ){
                                          if(
                                              Deaths((j), (1), 18, (191))
                                          ){
                                              SetDeaths((j), (7), 18, (191));
                                          }
                                      }
                                  }
                              }
                              if(
                                  WskillCooldownPvE[i] >= 1
                              ){
                                  WskillCooldownPvE[i] -= 1;
                              }
                              //Wskill
                              //Eskill
                              if(
                                  Deaths((6), (0), 150, (205))
                              ){
                                  if(
                                      EskillCooldownPvE[i] >= 1
                                  ){
                                      EskillCooldownPvE[i] -= 1;
                                  }
                                  switch(i) {
                                      case 0:
                                          if(
                                              EskillCooldownPvE[i] == 0 && 
                                              Bring((14), (0), 1, (231), (Range))
                                          ){
                                              CreateUnit(1, (28), (10), (7));
                                              MoveUnit(0, (28), (7), (10), (Hitbox));
                                              KillUnit((28), (7));
                                              CreateUnit(8, (30), (10), (7));
                                              MoveUnit(0, (30), (7), (10), (Hitbox));
                                              EskillCooldownPvE[i] = 240;
                                          }
                                          if(
                                              EskillCooldownPvE[i] == 200
                                          ){
                                              KillUnitAt(0, (30), (9), (7));
                                          }
                                      break;
                                      case 1:
                                          if(
                                              EskillCooldownPvE[i] == 0 && 
                                              PlyrsInRange >= 1
                                          ){
                                              EskillCooldownPvE[i] = 180;
                                              CreateUnit(1, (28), (10), (7));
                                              MoveUnit(0, (28), (7), (10), (Hitbox));
                                              KillUnit((28), (7));
                                              SetMemoryEPD(HeroPvE[i] + 0x0A2 / 4, Add, 28610 * 65536);
                                          }
                                          if(
                                              EskillCooldownPvE[i] == 114 && 
                                              wread_epd(HeroPvE[i] + 0x0A2 / 4,  0x0A2 % 4) >= 17920
                                          ){
                                              if(
                                                  wread_epd(HeroPvE[i] + 0x0A2 / 4,  0x0A2 % 4) >= 25600
                                              ){
                                                  SetMemoryEPD(HeroPvE[i] + 0x0A2 / 4, Add, -25600 * 65536);
                                              }
                                              else{
                                                  wwrite_epd(HeroPvE[i] + 0x0A2 / 4,  0x0A2 % 4, 0);
                                              }
                                          }
                                      break;
                                      case 2:
                                          if(
                                              EskillCooldownPvE[i] == 0 && 
                                              PlyrsInRange >= 1
                                          ){
                                              EskillCooldownPvE[i] = 180;
                                              CreateUnit(1, (28), (10), (7));
                                              MoveUnit(0, (28), (7), (10), (Hitbox));
                                              KillUnit((28), (7));
                                          }
                                          if(
                                              EskillCooldownPvE[i] >= 60 && 
                                              EskillCooldownPvE[i] % 6 == 0
                                          ){
                                              CreateUnit(1, (88), (10), (7));
                                              GiveUnits(0, (88), (7), (10), (9));
                                              MoveUnit(0, (88), (9), (10), (Hitbox));
                                              KillUnit((88), (9));
                                              DamageCircleUnit(HeroPvE[i],112,6,3,3840 + Upgrade.cast(Upgrades[7]).atk * 512);
                                              for(var j = 0 ; j < 6 ; j++){
                                                  if(
                                                      Heroes[j] != 0 && 
                                                      FastDistanceUnit(HeroPvE[i],Heroes[j]) < 112
                                                  ){
                                                      DamageUnitEPD(Heroes[j],3,3840 + Upgrade.cast(Upgrades[7]).atk * 512);
                                                  }
                                              }
                                              if(
                                                  EskillCooldownPvE[i] == 60
                                              ){
                                                  CreateUnit(1, (58), (10), (7));
                                                  MoveUnit(0, (58), (7), (10), (Hitbox));
                                                  KillUnit((58), (7));
                                              }
                                          }
                                      break;
                                      case 3:
                                          if(
                                              EskillCooldownPvE[i] == 0 && 
                                              Bring((14), (0), 1, (230), (Range))
                                          ){
                                              EskillCooldownPvE[i] = 96;
                                              if(
                                                  wread_epd(WidowMines[NewMineIndex] + 0x064 / 4,  0x064 % 4) == 57
                                              ){
                                                  bwrite_epd(WidowMines[NewMineIndex] + 0x04D / 4,  0x04D % 4, 0);
                                              }
                                              WidowMines[NewMineIndex] = epdread_epd(EPD(0x628438));
                                              WidowMinesPtr[NewMineIndex] = dwread_epd(EPD(0x628438));
                                              NewMineIndex += 1;
                                              NewMineIndex = NewMineIndex % 3;
                                              CreateUnit(1, (57), (10), (7));
                                              MoveUnit(0, (57), (7), (10), (Hitbox));
                                              CreateUnit(1, (28), (10), (7));
                                              MoveUnit(0, (28), (7), (10), (Hitbox));
                                              KillUnit((28), (7));
                                          }
                                          for(var j = 0 ; j < 3 ; j++){
                                              if(
                                                  MemoryEPD(WidowMines[j] + 0x00C / 4, AtLeast, 1) && 
                                                  wread_epd(WidowMines[j] + 0x064 / 4,  0x064 % 4) == 57
                                              ){
                                                  if(
                                                      bread_epd(WidowMines[j] + 0x119 / 4,  0x119 % 4) == 0 && 
                                                      !MemoryEPD(WidowMines[j] + 0x05C / 4, Exactly, 0)
                                                  ){
                                                      bwrite_epd(WidowMines[j] + 0x119 / 4,  0x119 % 4, 8);
                                                  }
                                                  if(
                                                      bread_epd(WidowMines[j] + 0x119 / 4,  0x119 % 4) >= 4
                                                  ){
                                                      var MineColor;
                                                      MineColor = dwread_epd(WidowMines[j] + 0x00C / 4);
                                                      MineColor = bread(MineColor + 0x0A);
                                                      if(
                                                          MineColor == 0 && 
                                                          bread_epd(WidowMines[j] + 0x119 / 4,  0x119 % 4) >= 6
                                                      ){
                                                          SetUnitColor(WidowMinesPtr[j],7);
                                                      }
                                                      else{
                                                          SetUnitColor(WidowMinesPtr[j],0);
                                                      }
                                                  }
                                                  if(
                                                      !MemoryEPD(WidowMines[j] + 0x05C / 4, Exactly, 0) && 
                                                      bread_epd(WidowMines[j] + 0x04D / 4,  0x04D % 4) != 0 && 
                                                      bread_epd(WidowMines[j] + 0x119 / 4,  0x119 % 4) == 4
                                                  ){
                                                      var TargetUnit;
                                                      TargetUnit = dwread_epd(WidowMines[j] + 0x05C / 4);
                                                      TargetUnit = EPD(TargetUnit);
                                                      if(
                                                          FastDistanceUnit(WidowMines[j],TargetUnit) <= 112
                                                      ){
                                                          CreateUnit(1, (28), (10), (7));
                                                          SetLocationToUnitEPD(218,WidowMines[j],0x028,0x02A);
                                                          MoveUnit(0, (28), (7), (10), (219));
                                                          KillUnit((28), (7));
                                                          for(var plyr = 0 ; plyr < 7 ; plyr++){
                                                              DamageCircleUnit(WidowMines[j],112,plyr,1,44800 + Upgrade.cast(Upgrades[7]).atk * 2560);
                                                          }
                                                          bwrite_epd(WidowMines[j] + 0x04D / 4,  0x04D % 4, 0);
                                                      }
                                                      bwrite_epd(WidowMines[j] + 0x119 / 4,  0x119 % 4, 2);
                                                      SetUnitColor(WidowMinesPtr[j],7);
                                                      SetMemoryEPD(WidowMines[j] + 0x05C / 4, SetTo, 0);
                                                  }
                                              }
                                          }
                                      break;
                                      case 4:
                                          if(
                                              EskillCooldownPvE[i] == 0 && 
                                              bread_epd(HeroPvE[i] + 0x090 / 4,  0x090 % 4) <= 7
                                          ){
                                              SetMemoryEPD(HeroPvE[i] + 0x090 / 4, Add, 8 * 1);
                                              bwrite_epd(HeroPvE[i] + 0x055 / 4,  0x055 % 4, 0);
                                              EskillCooldownPvE[i] = 120;
                                              CreateUnit(1, (28), (10), (7));
                                              MoveUnit(0, (28), (7), (10), (Hitbox));
                                              KillUnit((28), (7));
                                              DronePoisonTarget = 0;
                                              DronePoisonTimer = 0;
                                          }
                                          if(
                                              EskillCooldownPvE[i] >= 60
                                          ){
                                              if(
                                                  bread_epd(HeroPvE[i] + 0x055 / 4,  0x055 % 4) >= 1 && 
                                                  bread_epd(HeroPvE[i] + 0x04D / 4,  0x04D % 4) == 10 && 
                                                  !MemoryEPD(HeroPvE[i] + 0x05C / 4, Exactly, 0) && 
                                                  DronePoisonTimer == 0
                                              ){
                                                  DronePoisonTarget = dwread_epd(HeroPvE[i] + 0x05C / 4);
                                                  DronePoisonTarget = EPD(DronePoisonTarget);
                                                  DronePoisonTimer = 60;
                                                  EskillCooldownPvE[i] = 60;
                                                  HealUnit(HeroPvE[i],12800 + Upgrade.cast(Upgrades[7]).dfn * 1280);
                                              }
                                              if(
                                                  EskillCooldownPvE[i] == 60
                                              ){
                                                  CreateUnit(1, (58), (10), (7));
                                                  MoveUnit(0, (58), (7), (10), (Hitbox));
                                                  KillUnit((58), (7));
                                              }
                                          }
                                          if(
                                              MemoryEPD(DronePoisonTarget + 0x00C / 4, AtLeast, 1) && 
                                              bread_epd(DronePoisonTarget + 0x04D / 4,  0x04D % 4) != 0 && 
                                              DronePoisonTimer >= 12 && 
                                              DronePoisonTimer % 12 == 0
                                          ){
                                              DamageUnitEPD(DronePoisonTarget,3,3840 + Upgrade.cast(Upgrades[7]).atk * 512);
                                              CreateUnit(1, (104), (10), (7));
                                              SetLocationToUnitEPD(218,DronePoisonTarget,0x028,0x02A);
                                              GiveUnits(1, (104), (7), (10), (9));
                                              MoveUnit(1, (104), (9), (10), (219));
                                              KillUnit((104), (9));
                                          }
                                          if(
                                              MemoryEPD(DronePoisonTarget + 0x00C / 4, Exactly, 0) && 
                                              DronePoisonTimer >= 1
                                          ){
                                              DronePoisonTarget = 0;
                                              DronePoisonTimer = 0;
                                              EskillCooldownPvE[i] = 12;
                                          }
                                          if(
                                              DronePoisonTimer >= 1
                                          ){
                                              DronePoisonTimer -= 1;
                                          }
                                      break;
                                      case 5:
                                          if(
                                              EskillCooldownPvE[i] == 0 && 
                                              Bring((14), (0), 1, (230), (Range)) && 
                                              Bring((7), (0), 3, (230), (Range))
                                          ){
                                              CreateUnit(1, (28), (10), (7));
                                              MoveUnit(0, (28), (7), (10), (Hitbox));
                                              KillUnit((28), (7));
                                              EskillCooldownPvE[i] = 120;
                                          }
                                          if(
                                              EskillCooldownPvE[i] >= 61 && 
                                              EskillCooldownPvE[i] % 6 == 0
                                          ){
                                              foreach(ptr, epd : EUDLoopPlayerUnit(7) ) {
                                                  if(
                                                      dwread_epd(epd + 0x0DC / 4) & 0x800 >= 1
                                                  ){
                                                      HealUnit(epd,2560 + Upgrade.cast(Upgrades[7]).dfn * 256);
                                                  }
                                              }
                                          }
                                          if(
                                              EskillCooldownPvE[i] == 60
                                          ){
                                              CreateUnit(1, (58), (10), (7));
                                              MoveUnit(0, (58), (7), (10), (Hitbox));
                                              KillUnit((58), (7));
                                          }
                                      break;
                                  }
                              }
                              //Eskill
                              //ItemGet
                              if(
                                  Bring((13), (0), 1, (HeroType), (9)) && 
                                  Bring((13), (0), 1, (HeroType), (181)) && 
                                  Bring((17), (0), 1, (219), (181)) && 
                                  HeroType != 74 && 
                                  HeroType != 61
                              ){
                                  RemoveUnitAt(1, (219), (181), (17));
                                  var HeroHP;
                                  HeroHP = dwread(0x65FD00 + 9808 + HeroType * 4);
                                  SetMemoryEPD(HeroPvE[i] + 0x008 / 4, Add, 25600 * 1);
                                  if(
                                      MemoryEPD(HeroPvE[i] + 0x008 / 4, AtLeast, HeroHP)
                                  ){
                                      SetMemoryEPD(HeroPvE[i] + 0x008 / 4, SetTo, HeroHP);
                                  }
                              }
                              //ItemGet
                              if(
                                  Deaths((6), (10), 0, (207))
                              ){
                                  var HeroesInSight = 0;
                                  HeroesInSight = HeroBring(193);
                                  var UpdateBehaviour;
                                  UpdateBehaviour = dwread_epd((7) + (210) * 12);
                                  var UpdateBehaviour4;
                                  UpdateBehaviour4 = UpdateBehaviour & 0x3;
                                  var UpdateBehaviour8;
                                  UpdateBehaviour8 = UpdateBehaviour & 0x7;
                                  switch(BehaviourNum) {
                                      case 0:
                                          //Init
                                          SetSwitch((5), (11));
                                          switch(i) {
                                              case 0:
                                                  PushLaneCPU(i);
                                                  BackdoorCPU(i);
                                                  CenterCPU(i);
                                                  CapturePointCPU(i);
                                                  DefendBaseCPU(i);
                                              break;
                                              case 1:
                                                  SetDeaths((i), (7), 6, (150));
                                                  JungleCPU(i);
                                                  CenterCPU(i);
                                                  CapturePointCPU(i);
                                                  DefendBaseCPU(i);
                                              break;
                                              case 2:
                                                  PushLaneCPU(i);
                                                  JungleCPU(i);
                                                  BackdoorCPU(i);
                                                  CenterCPU(i);
                                                  CapturePointCPU(i);
                                              break;
                                              case 3:
                                                  SetDeaths((i), (7), 6, (150));
                                                  JungleCPU(i);
                                                  CenterCPU(i);
                                                  CapturePointCPU(i);
                                                  DefendBaseCPU(i);
                                              break;
                                              case 4:
                                                  SetDeaths((i), (7), 6, (150));
                                                  BackdoorCPU(i);
                                                  JungleCPU(i);
                                                  DefendBaseCPU(i);
                                              break;
                                              case 5:
                                                  SetDeaths((i), (7), 6, (150));
                                                  BackdoorCPU(i);
                                              break;
                                          }
                                          //Init
                                      break;
                                      case 1:
                                          //LanePushTop
                                          if(
                                              UpdateBehaviour4 == 0
                                          ){
                                              Order((HeroType), (13), (9), (0), (161));
                                              Order((HeroType), (13), (158), (2), (43));
                                              Order((HeroType), (13), (45), (2), (43));
                                              Order((HeroType), (13), (43), (2), (41));
                                              Order((HeroType), (13), (41), (2), (157));
                                              Order((HeroType), (13), (157), (2), (11));
                                              if(
                                                  i == 5
                                              ){
                                                  Order((HeroType), (13), (9), (2), (43));
                                              }
                                              Order((HeroType), (13), (205), (2), (11));
                                              if(
                                                  Bring((13), (10), 0, (HeroType), (158)) && 
                                                  Bring((13), (0), 1, (40), (194))
                                              ){
                                                  MoveLocation((97), (40), (7), (194));
                                                  Order((HeroType), (13), (9), (0), (97));
                                              }
                                              if(
                                                  i >= 3
                                              ){
                                                  if(
                                                      Bring((7), (0), 1, (23), (194)) || 
                                                      Bring((7), (0), 1, (51), (194)) || 
                                                      Bring((7), (0), 1, (68), (194))
                                                  ){
                                                      SetDeaths((i), (7), 6, (150));
                                                  }
                                              }
                                          }
                                          FindHealCPU(i,Range,HeroType,EngageHP);
                                          FallbackLowCPU(i,Range,DangerHP);
                                          //LanePushTop
                                      break;
                                      case 2:
                                          //LanePushBot
                                          if(
                                              UpdateBehaviour4 == 0
                                          ){
                                              Order((HeroType), (13), (9), (0), (167));
                                              Order((HeroType), (13), (158), (2), (44));
                                              Order((HeroType), (13), (42), (2), (44));
                                              Order((HeroType), (13), (44), (2), (46));
                                              Order((HeroType), (13), (46), (2), (157));
                                              Order((HeroType), (13), (157), (2), (11));
                                              if(
                                                  i == 5
                                              ){
                                                  Order((HeroType), (13), (9), (2), (44));
                                              }
                                              Order((HeroType), (13), (218), (2), (11));
                                              if(
                                                  Bring((13), (10), 0, (HeroType), (158)) && 
                                                  Bring((13), (0), 1, (40), (194))
                                              ){
                                                  MoveLocation((97), (40), (7), (194));
                                                  Order((HeroType), (13), (9), (0), (97));
                                              }
                                              if(
                                                  i >= 3
                                              ){
                                                  if(
                                                      Bring((7), (0), 1, (23), (194)) || 
                                                      Bring((7), (0), 1, (51), (194)) || 
                                                      Bring((7), (0), 1, (68), (194))
                                                  ){
                                                      SetDeaths((i), (7), 6, (150));
                                                  }
                                              }
                                          }
                                          FindHealCPU(i,Range,HeroType,EngageHP);
                                          FallbackLowCPU(i,Range,DangerHP);
                                          //LanePushBot
                                      break;
                                      case 3:
                                          //AttackCenter
                                          if(
                                              UpdateBehaviour4 == 0
                                          ){
                                              Order((HeroType), (13), (9), (0), (98));
                                              Order((HeroType), (13), (98), (2), (98));
                                              if(
                                                  Bring((13), (0), 1, (HeroType), (98)) && 
                                                  Bring((14), (0), 1, (230), (194))
                                              ){
                                                  MoveLocation((97), (230), (14), (194));
                                                  Order((HeroType), (13), (9), (2), (97));
                                              }
                                              if(
                                                  Bring((7), (10), 0, (231), (98)) && 
                                                  Bring((14), (10), 0, (230), (98))
                                              ){
                                                  SetDeaths((i), (7), 0, (150));
                                              }
                                              if(
                                                  HeroBring(97) == 0 && 
                                                  Bring((14), (10), 0, (230), (194))
                                              ){
                                                  SetDeaths((i), (7), 13, (150));
                                              }
                                              Order((HeroType), (13), (164), (0), (98));
                                          }
                                          FallbackLowCPU(i,Range,DangerHP);
                                          //AttackCenter
                                      break;
                                      case 4:
                                          //DefendBase
                                          if(
                                              UpdateBehaviour4 == 0
                                          ){
                                              Order((HeroType), (13), (9), (2), (166));
                                              if(
                                                  Bring((13), (0), 1, (HeroType), (166)) && 
                                                  Bring((14), (0), 1, (230), (194))
                                              ){
                                                  MoveLocation((97), (230), (14), (194));
                                                  Order((HeroType), (13), (9), (2), (97));
                                              }
                                              if(
                                                  HeroBring(157) == 0 && 
                                                  Bring((14), (10), 0, (230), (194))
                                              ){
                                                  SetDeaths((i), (7), 13, (150));
                                              }
                                              if(
                                                  Bring((13), (10), 0, (HeroType), (166))
                                              ){
                                                  Order((HeroType), (13), (9), (0), (166));
                                              }
                                          }
                                          //DefendBase
                                      break;
                                      case 5:
                                          //FallBack
                                          Order((HeroType), (13), (9), (0), (22));
                                          if(
                                              MemoryEPD(HeroPvE[i] + 0x008 / 4, AtLeast, EngageHP)
                                          ){
                                              SetDeaths((i), (7), 13, (150));
                                          }
                                          //FallBack
                                      break;
                                      case 6:
                                          //Reinforce
                                          if(
                                              UpdateBehaviour8 == 0
                                          ){
                                              var MinDistance = 4500;
                                              var FollowIndex = i;
                                              for(var j = 0 ; j < 6 ; j++){
                                                  var NewDistance = FastDistanceUnit(HeroPvE[i],HeroPvE[j]);
                                                  if(
                                                      HeroPvE[j] != 0 && 
                                                      !MemoryEPD(HeroPvE[j] + 0x00C / 4, Exactly, 0) && 
                                                      i != j && 
                                                      dwread_epd(EPD(0x58A364 + 48 * 150 + 4 * j)) != 6 && 
                                                      dwread_epd(EPD(0x58A364 + 48 * 150 + 4 * j)) != 14+i && 
                                                      NewDistance <= 720 && 
                                                      NewDistance < MinDistance
                                                  ){
                                                      MinDistance = NewDistance;
                                                      FollowIndex = j;
                                                  }
                                              }
                                              if(
                                                  i != FollowIndex
                                              ){
                                                  SetDeaths((i), (7), 14 + FollowIndex, (150));
                                              }
                                              if(
                                                  Bring((7), (0), 1, (74), (Range))
                                              ){
                                                  SetDeaths((i), (7), 10, (150));
                                              }
                                              if(
                                                  Bring((14), (0), 1, (74), (194))
                                              ){
                                                  if(
                                                      i == 3 || 
                                                      i == 5
                                                  ){
                                                      SetDeaths((i), (7), 11, (150));
                                                  }
                                              }
                                              Order((HeroType), (7), (9), (2), (158));
                                              if(
                                                  Bring((14), (0), 1, (230), (Range))
                                              ){
                                                  MoveLocation((97), (230), (14), (Range));
                                                  Order((HeroType), (7), (9), (2), (97));
                                              }
                                              if(
                                                  Bring((7), (0), 1, (HeroType), (158)) && 
                                                  FollowIndex == i
                                              ){
                                                  PushLaneCPU(i);
                                              }
                                          }
                                          FallbackLowCPU(i,Range,DangerHP);
                                          //Reinforce
                                      break;
                                      case 7:
                                          //SecureCPA
                                          if(
                                              UpdateBehaviour % 4 == 0
                                          ){
                                              Order((HeroType), (13), (9), (2), (127));
                                              if(
                                                  Bring((13), (0), 1, (HeroType), (127)) && 
                                                  Bring((14), (0), 1, (230), (Range))
                                              ){
                                                  MoveLocation((97), (230), (14), (Range));
                                                  Order((HeroType), (13), (9), (2), (97));
                                              }
                                          }
                                          FindHealCPU(i,Range,HeroType,EngageHP);
                                          //SecureCPA
                                      break;
                                      case 8:
                                          //SecureCPB
                                          if(
                                              UpdateBehaviour % 4 == 0
                                          ){
                                              Order((HeroType), (13), (9), (2), (126));
                                              if(
                                                  Bring((13), (0), 1, (HeroType), (126)) && 
                                                  Bring((14), (0), 1, (230), (Range))
                                              ){
                                                  MoveLocation((97), (230), (14), (Range));
                                                  Order((HeroType), (13), (9), (2), (97));
                                              }
                                          }
                                          FindHealCPU(i,Range,HeroType,EngageHP);
                                          //SecureCPB
                                      break;
                                      case 9:
                                          //HarassJungle
                                          if(
                                              UpdateBehaviour % 4 == 0
                                          ){
                                              Order((HeroType), (13), (158), (0), (72));
                                              if(
                                                  Bring((17), (0), 1, (19), (9)) || 
                                                  Bring((17), (0), 1, (79), (9))
                                              ){
                                                  if(
                                                      Bring((17), (0), 1, (79), (194))
                                                  ){
                                                      MoveLocation((97), (79), (17), (194));
                                                  }
                                                  else{
                                                      if(
                                                          Bring((17), (0), 1, (19), (194))
                                                      ){
                                                          MoveLocation((97), (19), (17), (194));
                                                      }
                                                      else{
                                                          if(
                                                              Bring((17), (0), 1, (19), (9))
                                                          ){
                                                              MoveLocation((97), (19), (17), (9));
                                                          }
                                                          else{
                                                              MoveLocation((97), (79), (17), (9));
                                                          }
                                                      }
                                                  }
                                                  Order((HeroType), (13), (9), (2), (97));
                                              }
                                              else{
                                                  SetDeaths((i), (7), 13, (150));
                                              }
                                          }
                                          if(
                                              Bring((13), (0), 1, (HeroType), (127)) || 
                                              Bring((13), (0), 1, (HeroType), (126))
                                          ){
                                              FindHealCPU(i,Range,HeroType,EngageHP);
                                          }
                                          FallbackLowCPU(i,Range,DangerHP);
                                          //HarassJungle
                                      break;
                                      case 10:
                                          //EscortSoul
                                          if(
                                              UpdateBehaviour % 4 == 0
                                          ){
                                              if(
                                                  Bring((13), (0), 1, (74), (194))
                                              ){
                                                  MoveLocation((97), (74), (7), (194));
                                                  Order((HeroType), (13), (9), (0), (97));
                                                  if(
                                                      Bring((7), (0), 1, (74), (Range)) && 
                                                      Bring((14), (0), 1, (230), (Range))
                                                  ){
                                                      Order((HeroType), (13), (9), (2), (97));
                                                  }
                                              }
                                              else{
                                                  SetDeaths((i), (7), 13, (150));
                                                  Order((HeroType), (13), (9), (0), (158));
                                              }
                                          }
                                          FallbackLowCPU(i,Range,DangerHP);
                                          //EscortSoul
                                      break;
                                      case 11:
                                          //Ambush
                                          if(
                                              Bring((14), (0), 1, (74), (194))
                                          ){
                                              MoveLocation((97), (74), (14), (194));
                                              Order((HeroType), (13), (9), (0), (97));
                                              if(
                                                  Bring((14), (0), 1, (74), (Hitbox))
                                              ){
                                                  Order((HeroType), (13), (9), (2), (97));
                                              }
                                          }
                                          else{
                                              if(
                                                  Bring((14), (0), 1, (230), (Range))
                                              ){
                                                  Order((HeroType), (13), (9), (0), (158));
                                                  if(
                                                      Bring((7), (0), 1, (HeroType), (158))
                                                  ){
                                                      SetDeaths((i), (7), 0, (150));
                                                  }
                                              }
                                              else{
                                                  SetDeaths((i), (7), 13, (150));
                                              }
                                              FallbackLowCPU(i,Range,DangerHP);
                                          }
                                          //Ambush
                                      break;
                                      case 12:
                                          //Backdoor
                                          Order((HeroType), (13), (9), (0), (71));
                                          if(
                                              Command((6), (0), 1, (160))
                                          ){
                                              Order((HeroType), (13), (164), (2), (71));
                                          }
                                          else{
                                              if(
                                                  Bring((6), (10), 2, (162), (66))
                                              ){
                                                  Order((HeroType), (13), (164), (2), (66));
                                              }
                                              else{
                                                  if(
                                                      Bring((6), (10), 2, (162), (67))
                                                  ){
                                                      Order((HeroType), (13), (164), (2), (67));
                                                  }
                                                  else{
                                                      Order((HeroType), (13), (164), (2), (11));
                                                  }
                                              }
                                          }
                                          //Backdoor
                                      break;
                                      case 13:
                                          //AltInit
                                          if(
                                              Bring((13), (10), 0, (HeroType), (158))
                                          ){
                                              Order((HeroType), (13), (9), (0), (158));
                                          }
                                          else{
                                              SetDeaths((i), (7), 0, (150));
                                          }
                                          //AltInit
                                      break;
                                      case 14:
                                          //FollowTank
                                          if(
                                              UpdateBehaviour % 4 == 0
                                          ){
                                              Order((HeroType), (7), (9), (1), (188));
                                              if(
                                                  Bring((14), (0), 1, (230), (168))
                                              ){
                                                  MoveLocation((97), (230), (14), (168));
                                                  Order((HeroType), (7), (9), (1), (97));
                                              }
                                              if(
                                                  Bring((7), (10), 0, (23), (194))
                                              ){
                                                  SetDeaths((i), (7), 6, (150));
                                              }
                                              if(
                                                  Bring((14), (0), 1, (74), (194))
                                              ){
                                                  if(
                                                      i == 3 || 
                                                      i == 5
                                                  ){
                                                      SetDeaths((i), (7), 11, (150));
                                                  }
                                              }
                                          }
                                          FallbackLowCPU(i,Range,DangerHP);
                                          //FollowTank
                                      break;
                                      case 15:
                                          //FollowKerrigan
                                          if(
                                              UpdateBehaviour % 4 == 0
                                          ){
                                              Order((HeroType), (7), (9), (1), (189));
                                              if(
                                                  Bring((14), (0), 1, (230), (169))
                                              ){
                                                  MoveLocation((97), (230), (14), (169));
                                                  Order((HeroType), (7), (9), (1), (97));
                                              }
                                              if(
                                                  Bring((7), (10), 0, (51), (194))
                                              ){
                                                  SetDeaths((i), (7), 6, (150));
                                              }
                                          }
                                          FallbackLowCPU(i,Range,DangerHP);
                                          //FollowKerrigan
                                      break;
                                      case 16:
                                          //FollowArchon
                                          if(
                                              UpdateBehaviour % 4 == 0
                                          ){
                                              Order((HeroType), (7), (9), (1), (190));
                                              if(
                                                  Bring((14), (0), 1, (230), (170))
                                              ){
                                                  MoveLocation((97), (230), (14), (170));
                                                  Order((HeroType), (7), (9), (1), (97));
                                              }
                                              if(
                                                  Bring((7), (10), 0, (68), (194))
                                              ){
                                                  SetDeaths((i), (7), 6, (150));
                                              }
                                              if(
                                                  Bring((14), (0), 1, (74), (194))
                                              ){
                                                  if(
                                                      i == 3 || 
                                                      i == 5
                                                  ){
                                                      SetDeaths((i), (7), 11, (150));
                                                  }
                                              }
                                          }
                                          FallbackLowCPU(i,Range,DangerHP);
                                          //FollowArchon
                                      break;
                                      case 17:
                                          //FollowVulture
                                          if(
                                              UpdateBehaviour % 4 == 0
                                          ){
                                              Order((HeroType), (7), (9), (1), (191));
                                              if(
                                                  Bring((14), (0), 1, (230), (182))
                                              ){
                                                  MoveLocation((97), (230), (14), (182));
                                                  Order((HeroType), (7), (9), (1), (97));
                                              }
                                              if(
                                                  Bring((7), (10), 0, (2), (194))
                                              ){
                                                  SetDeaths((i), (7), 6, (150));
                                              }
                                          }
                                          FallbackLowCPU(i,Range,DangerHP);
                                          //FollowVulture
                                      break;
                                      case 18:
                                          //FollowDrone
                                          if(
                                              UpdateBehaviour % 4 == 0
                                          ){
                                              Order((HeroType), (7), (9), (1), (192));
                                              if(
                                                  Bring((7), (10), 0, (41), (194))
                                              ){
                                                  SetDeaths((i), (7), 6, (150));
                                              }
                                          }
                                          FallbackLowCPU(i,Range,DangerHP);
                                          //FollowDrone
                                      break;
                                      case 19:
                                          //FollowArbiter
                                          if(
                                              UpdateBehaviour % 4 == 0
                                          ){
                                              Order((HeroType), (7), (9), (1), (193));
                                              if(
                                                  Bring((7), (10), 0, (86), (194))
                                              ){
                                                  SetDeaths((i), (7), 6, (150));
                                              }
                                          }
                                          FallbackLowCPU(i,Range,DangerHP);
                                          //FollowArbiter
                                      break;
                                  }
                              }
                          }
                          astralraidboss.RaidBoss();
                          //Upgrade
                          if(
                              dwread_epd(EPD(0x58A364 + 48 * 205 + 4 * 6)) / 240 != Upgrade.cast(Upgrades[7]).atk
                          ){
                              SetMemoryEPD(EPD(0x58D2B0 + 0x207C * ((14) / 46) + (7) * (46 - 31 * ((14) / 46)) + ((14) % 46)), (8), bitlshift(1, 8 * (((7) * (46 - 31 * ((14) / 46)) + ((14) % 46)) % 4)));
                              Upgrade.cast(Upgrades[7]).atk += 1;
                          }
                          if(
                              Deaths((6), (0), 360, (205)) && 
                              (dwread_epd(EPD(0x58A364 + 48 * 205 + 4 * 6)) - 120)/ 240 != Upgrade.cast(Upgrades[7]).dfn
                          ){
                              SetMemoryEPD(EPD(0x58D2B0 + 0x207C * ((6) / 46) + (7) * (46 - 31 * ((6) / 46)) + ((6) % 46)), (8), bitlshift(1, 8 * (((7) * (46 - 31 * ((6) / 46)) + ((6) % 46)) % 4)));
                              Upgrade.cast(Upgrades[7]).dfn += 1;
                          }
                          if(
                              Deaths((6), (10), 300, (205))
                          ){
                              bwrite(0x58D2B0 + 0x207C * ((39) / 46) + (7) * (46 - 31 * ((39) / 46)) + ((39) % 46), 1);
                          }
                          //Upgrade
                          //MinionPvE
                          if(
                              Deaths((6), (0), 19, (211))
                          ){
                              if(
                                  Deaths((8), (0), 1, (104))
                              ){
                                  SetDeaths((8), (9), 1, (104));
                                  MinionWave.cast(MinionWaves[getcurpl()]).mob1 += 1;
                              }
                              if(
                                  Deaths((8), (0), 1, (38))
                              ){
                                  SetDeaths((8), (9), 1, (38));
                                  MinionWave.cast(MinionWaves[getcurpl()]).mob2 += 1;
                              }
                              if(
                                  Deaths((8), (0), 1, (65))
                              ){
                                  SetDeaths((8), (9), 1, (65));
                                  MinionWave.cast(MinionWaves[getcurpl()]).mob3 += 1;
                              }
                              if(
                                  Deaths((8), (0), 1, (66))
                              ){
                                  SetDeaths((8), (9), 1, (66));
                                  MinionWave.cast(MinionWaves[getcurpl()]).mob4 += 1;
                              }
                              if(
                                  Deaths((8), (0), 1, (22))
                              ){
                                  SetDeaths((8), (9), 1, (22));
                                  MinionWave.cast(MinionWaves[getcurpl()]).mob5 += 1;
                              }
                          }
                          if(
                              Deaths((6), (10), 20, (211)) && 
                              Deaths((6), (10), 0, (173)) && 
                              Switch((37), (2))
                          ){
                              for(var i = 0 ; i < 2 ; i++){
                                  GenerateMobWave();
                                  if(
                                      i == 0
                                  ){
                                      MoveUnit(0, (104), (7), (10), (15));
                                      MoveUnit(0, (38), (7), (10), (15));
                                      MoveUnit(0, (65), (7), (10), (15));
                                      MoveUnit(0, (66), (7), (10), (15));
                                      MoveUnit(0, (22), (7), (10), (15));
                                  }
                                  else{
                                      MoveUnit(0, (104), (7), (10), (16));
                                      MoveUnit(0, (38), (7), (10), (16));
                                      MoveUnit(0, (65), (7), (10), (16));
                                      MoveUnit(0, (66), (7), (10), (16));
                                      MoveUnit(0, (22), (7), (10), (16));
                                  }
                              }
                          }
                          //MinionPvE
                      }
[     38 ]        EUDEndPlayerLoop();
              }
              function afterTriggerExec() {
[     24 ]        EUDPlayerLoop()();
[     71 ]            if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4 || getcurpl() == 5) {
                          //Wskill
                          if(
[      5 ]                    Bring((13), (0), 1, (82), (9))
                          ){
                              MoveLocation((107), (82), (13), (9));
                              if(
                                  Bring((13), (10), 1, (74), (9)) || 
                                  Bring((13), (10), 1, (61), (9))
                              ){
                                  if(
                                      Bring((13), (10), 0, (47), (9)) && 
                                      Bring((13), (10), 0, (98), (9))
                                  ){
                                      if(
                                          Switch((37), (3))
                                      ){
                                          for(var i = 0 ; i < 4 ; i++){
                                              var EnemyPlayer = (i * 2) + (1 - getcurpl() % 2);
                                              if(
                                                  Bring((EnemyPlayer), (0), 1, (47), (107))
                                              ){
                                                  GiveUnits(1, (47), (EnemyPlayer), (107), (13));
                                                  QskillInit(Qskill.cast(Qskills[EnemyPlayer]).type);
                                                  break;
                                              }
                                          }
                                      }
                                      else{
                                          if(
                                              Bring((7), (0), 1, (47), (107))
                                          ){
                                              GiveUnits(1, (47), (7), (107), (13));
                                              QskillInit(6);
                                          }
                                          else{
                                              if(
                                                  Bring((9), (0), 1, (47), (107))
                                              ){
                                                  GiveUnits(1, (47), (9), (107), (13));
                                                  QskillInit(6);
                                              }
                                          }
                                      }
                                      SetDeaths((13), (7), 6, (153));
                                  }
                              }
                              KillUnitAt(0, (47), (107), (14));
                              KillUnitAt(0, (47), (107), (9));
                              KillUnit((82), (13));
                              var SuperchargedW = 0;
                              var SilenceRange = 112;
                              var SilenceTimer = 18;
                              if(
                                  Bring((13), (10), 1, (74), (9)) || 
                                  Bring((13), (10), 1, (61), (9)) || 
                                  Command((13), (0), 1, (78))
                              ){
                                  SilenceTimer += 18;
                              }
                              if(
                                  Command((13), (0), 1, (78))
                              ){
                                  SilenceRange += 64;
                              }
                              if(
                                  Deaths((13), (10), 15, (121)) && 
                                  Deaths((13), (10), 1, (119))
                              ){
                                  SetDeaths((13), (7), 0, (119));
                                  SuperchargedW = 1;
                                  SilenceTimer = 96;
                              }
                              if(
                                  Switch((37), (3))
                              ){
                                  for(var i = 0 ; i < 4 ; i++){
[      1 ]                            var EnemyPlayer = i * 2 +(1 - getcurpl() % 2);
                                      if(
[      1 ]                                Command((13), (0), 1, (64))
                                      ){
[      3 ]                                DamageCircleUnit(Heroes[getcurpl()],SilenceRange,EnemyPlayer,3,12800 + 1280 * Upgrade.cast(Upgrades[getcurpl()]).atk);
                                      }
                                      if(
                                          EnemyPlayer <= 5 && 
                                          Heroes[EnemyPlayer] != 0 && 
[      3 ]                                FastDistanceUnit(Heroes[getcurpl()],Heroes[EnemyPlayer]) < SilenceRange
                                      ){
                                          if(
                                              SuperchargedW >= 1 && 
                                              Deaths((EnemyPlayer), (10), 1, (192))
                                          ){
                                              var HeroType;
                                              HeroType = wread_epd(Heroes[EnemyPlayer] + 0x064 / 4,  0x064 % 4);
                                              MoveUnit(0, (HeroType), (EnemyPlayer), (9), (23));
                                              bwrite_epd(Heroes[EnemyPlayer] + 0x119 / 4,  0x119 % 4, 9);
                                          }
                                          if(
                                              Deaths((EnemyPlayer), (1), SilenceTimer, (191))
                                          ){
                                              SetDeaths((EnemyPlayer), (7), SilenceTimer, (191));
                                          }
                                      }
                                  }
                              }
                              else{
                                  if(
                                      Command((13), (0), 1, (64))
                                  ){
                                      DamageCircleUnit(Heroes[getcurpl()],SilenceRange,7,3,12800 + 1280 * Upgrade.cast(Upgrades[getcurpl()]).atk);
                                  }
                                  for(var i = 0 ; i < 6 ; i++){
                                      if(
                                          HeroPvE[i] != 0 && 
                                          bread_epd(HeroPvE[i] + 0x04D / 4,  0x04D % 4) != 0 && 
                                          !MemoryEPD(HeroPvE[i] + 0x00C / 4, Exactly, 0) && 
                                          FastDistanceUnit(Heroes[getcurpl()],HeroPvE[i]) < SilenceRange
                                      ){
                                          if(
                                              SuperchargedW >= 1
                                          ){
                                              var HeroType;
                                              HeroType = wread_epd(HeroPvE[i] + 0x064 / 4,  0x064 % 4);
                                              MoveUnit(0, (HeroType), (7), (9), (23));
                                              bwrite_epd(HeroPvE[i] + 0x119 / 4,  0x119 % 4, 9);
                                          }
                                          if(
                                              QskillCooldownPvE[i] <= SilenceTimer
                                          ){
                                              QskillCooldownPvE[i] = SilenceTimer;
                                          }
                                          if(
                                              WskillCooldownPvE[i] <= SilenceTimer
                                          ){
                                              WskillCooldownPvE[i] = SilenceTimer;
                                          }
                                          if(
                                              SuperchargedW == 0 && 
                                              EskillCooldownPvE[i] <= SilenceTimer
                                          ){
                                              EskillCooldownPvE[i] = SilenceTimer;
                                          }
                                      }
                                  }
                              }
                          }
                          //Wskill
                          if(
                              Deaths((13), (10), 14, (121)) && 
                              Deaths((13), (0), 1, (192)) && 
[      9 ]                    Deaths((13), (0), 144, (200))
                          ){
[      2 ]                    RemoveStatusFlagsEPD(Heroes[getcurpl()],262144);
                          }
                      }
[     51 ]        EUDEndPlayerLoop();
              }




[File "C:\Users\하늘바라군\Desktop\만능폴더\게임\Scmdraft 2\EUD Editor2 0.17.9.7\Data\eudplibdata\astralcode.eps"]
-------------------------------------------------

              import TriggerEditor as TE;
              function Color(){
                  //Color
[     12 ]        switch(dwread_epd(EPD(0x58A364 + 48 * 213 + 4 * 6))) {
                      case 0:
                          TE.SetPColor(8,111,0);
                      break;
                      case 2:
[      4 ]                TE.SetPColor(8,156,0);
                      break;
                      case 4:
[      4 ]                TE.SetPColor(8,135,0);
                      break;
                      case 6:
[      5 ]                TE.SetPColor(8,117,0);
                      break;
                      case 8:
[      3 ]                TE.SetPColor(8,185,0);
                      break;
                      case 10:
                          TE.SetPColor(8,128,0);
                      break;
                      case 12:
                          TE.SetPColor(8,51,0);
                      break;
                      case 14:
[      5 ]                TE.SetPColor(8,53,0);
                      break;
                      case 16:
[      8 ]                TE.SetPColor(8,164,0);
                      break;
                      case 18:
[      2 ]                TE.SetPColor(8,8,0);
                      break;
                      case 20:
[      3 ]                TE.SetPColor(8,111,0);
                          SetDeaths((6), (7), 0, (213));
                      break;
                  }
[      2 ]        SetDeaths((6), (8), 1, (213));
                  if(
[      1 ]            Switch((19), (2))
                  ){
                      foreach(ptr, epd : EUDLoopPlayerUnit(11) ) {
                          SetSwitch((19), (5));
                          TE.SetUnitColor(ptr,11);
                          if(
                              Switch((26), (2)) && 
                              wread(ptr + 0x064) == 198
                          ){
                              TE.SetUnitColor(ptr,8);
                          }
                      }
                      foreach(ptr, epd : EUDLoopPlayerUnit(9) ) {
                          if(
                              wread(ptr + 0x064) == 87
                          ){
                              TE.SetUnitColor(ptr,8);
                          }
                      }
                  }
                  if(
[      3 ]            Deaths((6), (10), 0, (207))
                  ){
                      if(
                          Switch((17), (2)) || 
[      2 ]                Switch((18), (2))
                      ){
                          foreach(ptr, epd : EUDLoopPlayerUnit(11) ) {
                              if(
                                  wread(ptr + 0x064) == 195 || 
                                  wread(ptr + 0x064) == 111 || 
                                  wread(ptr + 0x064) == 113
                              ){
                                  TE.SetUnitColor(ptr,11);
                              }
                          }
                      }
                      foreach(ptr, epd : EUDLoopPlayerUnit(9) ) {
                          if(
                              wread(ptr + 0x064) == 19 || 
                              wread(ptr + 0x064) == 79 || 
                              wread(ptr + 0x064) == 76 || 
[    515 ]                    wread(ptr + 0x064) == 115
                          ){
[     13 ]                    TE.SetUnitColor(ptr,9);
                          }
                      }
                  }
                  //Color
              }
              function Potential(){
                  //Potential
                  if(
                      Deaths((6), (10), 9, (212))
                  ){
                      SetDeaths((6), (7), 0, (212));
                      bwrite(0x58D2B0 + 0x207C * ((9) / 46) + (6) * (46 - 31 * ((9) / 46)) + ((9) % 46), 5);
                      bwrite(0x58D2B0 + 0x207C * ((2) / 46) + (6) * (46 - 31 * ((2) / 46)) + ((2) % 46), 5);
                      bwrite(0x58D2B0 + 0x207C * ((13) / 46) + (6) * (46 - 31 * ((13) / 46)) + ((13) % 46), 5);
                      bwrite(0x58D2B0 + 0x207C * ((3) / 46) + (6) * (46 - 31 * ((3) / 46)) + ((3) % 46), 5);
                      bwrite(0x58D2B0 + 0x207C * ((9) / 46) + (7) * (46 - 31 * ((9) / 46)) + ((9) % 46), 5);
                      bwrite(0x58D2B0 + 0x207C * ((2) / 46) + (7) * (46 - 31 * ((2) / 46)) + ((2) % 46), 5);
                      bwrite(0x58D2B0 + 0x207C * ((13) / 46) + (7) * (46 - 31 * ((13) / 46)) + ((13) % 46), 5);
                      bwrite(0x58D2B0 + 0x207C * ((3) / 46) + (7) * (46 - 31 * ((3) / 46)) + ((3) % 46), 5);
                      bwrite(0x58D2B0 + 0x207C * ((9) / 46) + (9) * (46 - 31 * ((9) / 46)) + ((9) % 46), 5);
                      bwrite(0x58D2B0 + 0x207C * ((2) / 46) + (9) * (46 - 31 * ((2) / 46)) + ((2) % 46), 5);
                      bwrite(0x58D2B0 + 0x207C * ((13) / 46) + (9) * (46 - 31 * ((13) / 46)) + ((13) % 46), 5);
                      bwrite(0x58D2B0 + 0x207C * ((3) / 46) + (9) * (46 - 31 * ((3) / 46)) + ((3) % 46), 5);
                  }
                  if(
[      1 ]            Deaths((6), (10), 12, (212))
                  ){
                      SetDeaths((6), (7), 0, (212));
                      bwrite(0x65FD00 + 16592 + 87 * 1, 18);
                  }
                  if(
[      2 ]            Deaths((6), (10), 19, (212))
                  ){
                      SetDeaths((6), (7), 0, (212));
                      SetMemoryEPD(EPD(0x58D2B0 + 0x207C * ((32) / 46) + (6) * (46 - 31 * ((32) / 46)) + ((32) % 46)), (8), bitlshift(1, 8 * (((6) * (46 - 31 * ((32) / 46)) + ((32) % 46)) % 4)));
                      SetMemoryEPD(EPD(0x58D2B0 + 0x207C * ((32) / 46) + (7) * (46 - 31 * ((32) / 46)) + ((32) % 46)), (8), bitlshift(1, 8 * (((7) * (46 - 31 * ((32) / 46)) + ((32) % 46)) % 4)));
                      dwwrite(0x65FD00 + 9808 + 76 * 4, dwread(0x65FD00 + 9808 + 76 * 4) + 51200);
                      wwrite(0x65FD00 + 4352 + 76 * 2, wread(0x65FD00 + 4352 + 76 * 2) + 500);
                      bwrite(0x65FD00 + 456 + 76 * 1, bread(0x65FD00 + 456 + 76 * 1) + 2);
                      bwrite(0x65FD00 + 16592 + 76 * 1, bread(0x65FD00 + 16592 + 76 * 1) + 1);
                      wwrite(0x6564E0 + 2512 + 71 * 2, wread(0x6564E0 + 2512 + 71 * 2) + 10);
                      wwrite(0x6564E0 + 4504 + 71 * 2, wread(0x6564E0 + 4504 + 71 * 2) + 1);
                      bwrite(0x6564E0 + 2776 + 52 * 1, bread(0x6564E0 + 2776 + 52 * 1) + -15);
                      ModifyUnitHitPoints(0, (76), (9), (9), 100);
                      wwrite(0x65FD00 + 4352 + 115 * 2, wread(0x65FD00 + 4352 + 115 * 2) + -100);
                      dwwrite(0x65FD00 + 9808 + 3 * 4, dwread(0x65FD00 + 9808 + 3 * 4) + 25600);
                  }
                  if(
[      1 ]            Deaths((6), (10), 20, (212))
                  ){
                      SetDeaths((6), (7), 0, (212));
                      bwrite(0x58CF44 + 0x21FC * ((3) / 24) + (0) * (24 - 4 * ((3) / 24)) + ((3) % 24), 1);
                      bwrite(0x58CF44 + 0x21FC * ((3) / 24) + (1) * (24 - 4 * ((3) / 24)) + ((3) % 24), 1);
                      bwrite(0x58CF44 + 0x21FC * ((3) / 24) + (2) * (24 - 4 * ((3) / 24)) + ((3) % 24), 1);
                      bwrite(0x58CF44 + 0x21FC * ((3) / 24) + (3) * (24 - 4 * ((3) / 24)) + ((3) % 24), 1);
                      bwrite(0x58CF44 + 0x21FC * ((3) / 24) + (4) * (24 - 4 * ((3) / 24)) + ((3) % 24), 1);
                      bwrite(0x58CF44 + 0x21FC * ((3) / 24) + (5) * (24 - 4 * ((3) / 24)) + ((3) % 24), 1);
                  }
                  if(
[      1 ]            Deaths((6), (10), 21, (212))
                  ){
                      SetDeaths((6), (7), 0, (212));
                      bwrite(0x58CF44 + 0x21FC * ((16) / 24) + (0) * (24 - 4 * ((16) / 24)) + ((16) % 24), 1);
                      bwrite(0x58CF44 + 0x21FC * ((16) / 24) + (1) * (24 - 4 * ((16) / 24)) + ((16) % 24), 1);
                      bwrite(0x58CF44 + 0x21FC * ((16) / 24) + (2) * (24 - 4 * ((16) / 24)) + ((16) % 24), 1);
                      bwrite(0x58CF44 + 0x21FC * ((16) / 24) + (3) * (24 - 4 * ((16) / 24)) + ((16) % 24), 1);
                      bwrite(0x58CF44 + 0x21FC * ((16) / 24) + (4) * (24 - 4 * ((16) / 24)) + ((16) % 24), 1);
                      bwrite(0x58CF44 + 0x21FC * ((16) / 24) + (5) * (24 - 4 * ((16) / 24)) + ((16) % 24), 1);
                  }
                  //Potential
              }
              function Carrier(){
                  //Carrier
                  if(
                      Command((6), (0), 1, (72)) || 
[      4 ]            Command((7), (0), 1, (72))
                  ){
                      if(
                          Deaths((6), (10), 0, (210))
                      ){
                          foreach(ptr, epd : EUDLoopPlayerUnit(6) ) {
                              if(
                                  wread_epd(epd + 0x064 / 4,  0x064 % 4) == 72 && 
                                  MemoryEPD(epd + 0x060 / 4, AtMost, 255) && 
                                  MemoryEPD(epd + 0x008 / 4, AtLeast, 2560) && 
                                  bread_epd(epd + 0x04D / 4,  0x04D % 4) != 0
                              ){
                                  TE.COrderLocEPD(epd,158,10);
                              }
                          }
                          foreach(ptr, epd : EUDLoopPlayerUnit(7) ) {
                              if(
                                  wread_epd(epd + 0x064 / 4,  0x064 % 4) == 72 && 
                                  MemoryEPD(epd + 0x060 / 4, AtMost, 255) && 
                                  MemoryEPD(epd + 0x008 / 4, AtLeast, 2560) && 
                                  bread_epd(epd + 0x04D / 4,  0x04D % 4) != 0
                              ){
                                  TE.COrderLocEPD(epd,158,11);
                              }
                          }
                      }
                  }
                  //Carrier
              }




