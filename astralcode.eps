import TriggerEditor as TE;
/*function MissileGen(Hitbox){
                    //MissileGen
                if(
                    Deaths((13), (0), 1, (47)) && 
                    Deaths((13), (1), 9, (47))
                ){
                    var MissileType = dwread_epd(EPD(0x58A364 + 48 * 47 + 4 * CP));
                    TE.QskillInit(MissileType);
                    if(
                        MissileType != 5
                    ){
                        CreateUnit(1, (47), (10), (13));
                        SetInvincibility((4), (47), (13), (10));
                        MoveUnit(0, (47), (13), (10), (Hitbox));
                    }
                    else{
                        CreateUnit(1, (98), (10), (13));
                        SetInvincibility((4), (98), (13), (10));
                        MoveUnit(0, (98), (13), (10), (Hitbox));
                    }
                }
                //MissileGen
}
function MissileAim(CP,EnemyCPU){
                    //MissileAim
                if(
                    TE.Qskill.cast(TE.Qskills[CP]).expire >= 1
                ){
                    var LockOnStatus = dwread_epd(EPD(0x58A364 + 48 * 153 + 4 * CP));
                    switch(LockOnStatus) {
                        case 0:
                            //FollowPlyr
                            MoveLocation((Target), (HeroType), (13), (Range));
                            Qskill.cast(Qskills[CP]).expire -= 1;
                            if(
                                Bring((14), (0), 1, (230), (Range))
                            ){
                                SetDeaths((13), (7), 6, (153));
                            }
                            //FollowPlyr
                        break;
                        case 1:
                            //CPU
                            if(
                                Command((13), (0), 1, (10))
                            ){
                                MoveLocation((Target), (230), (EnemyCPU), (Target));
                                if(
                                    Bring((EnemyCPU), (10), 0, (230), (Target))
                                ){
                                    MoveLocation((Target), (231), (EnemyCPU), (Target));
                                    if(
                                        Bring((EnemyCPU), (10), 0, (231), (Target))
                                    ){
                                    }
                                    SetDeaths((13), (7), 6, (153));
                                }
                            }
                            else{
                                MoveLocation((Target), (230), (EnemyCPU), (Target));
                                if(
                                    Bring((EnemyCPU), (10), 0, (230), (Target))
                                ){
                                    SetDeaths((13), (7), 6, (153));
                                }
                            }
                            //CPU
                        break;
                        case 2:
                            //EnemyUnit
                            MoveLocation((Target), (230), (EnemyForce), (Target));
                            if(
                                Bring((EnemyForce), (10), 0, (230), (Target))
                            ){
                                SetDeaths((13), (7), 6, (153));
                            }
                            //EnemyUnit
                        break;
                        case 3:
                            //RaidBoss
                            MoveLocation((Target), (Qskill.cast(Qskills[CP]).target), (14), (Target));
                            if(
                                Bring((14), (10), 0, (Qskill.cast(Qskills[CP]).target), (Target))
                            ){
                                SetDeaths((13), (7), 6, (153));
                            }
                            //RaidBoss
                        break;
                        case 4:
                            //Hero
                            MoveLocation((Target), (Qskill.cast(Qskills[CP]).target), (14), (Target));
                            if(
                                Bring((14), (10), 0, (Qskill.cast(Qskills[CP]).target), (Target))
                            ){
                                SetDeaths((13), (7), 6, (153));
                            }
                            //Hero
                        break;
                        case 5:
                            //Soul
                            MoveLocation((Target), (74), (14), (Target));
                            if(
                                Bring((14), (10), 0, (74), (Target))
                            ){
                                SetDeaths((13), (7), 6, (153));
                            }
                            //Soul
                        break;
                        case 6:
                            //LockOn
                            MoveLocation((Target), (HeroType), (13), (Range));
                            //Priority 5: Soul
                            if(
                                Bring((14), (0), 1, (74), (Range))
                            ){
                                SetDeaths((13), (7), 5, (153));
                                MoveLocation((Target), (74), (14), (Range));
                                break;
                            }
                            //Priority 5: Soul
                            //Priority 4: Hero
                            var MinDis = 720;
                            if(
                                Switch((37), (3))
                            ){
                                for(var i = 0 ; i < 3 ; i++){
                                    var EnemyPlayer = (i * 2) + 1 - (CP % 2);
                                    if(
                                        Heroes[EnemyPlayer] != 0 && 
                                        MemoryEPD(Heroes[EnemyPlayer] + 0x00C / 4, AtLeast, 1)
                                    ){
                                        var Dis = FastDistanceUnit(Hero,Heroes[EnemyPlayer]);
                                        var EnemyType;
                                        EnemyType = wread_epd(Heroes[EnemyPlayer] + 0x064 / 4,  0x064 % 4);
                                        if(
                                            Bring((EnemyPlayer), (0), 1, (EnemyType), (Range)) && 
                                            Dis < MinDis
                                        ){
                                            MinDis = Dis;
                                            Qskill.cast(Qskills[CP]).target = EnemyType;
                                            MoveLocation((Target), (EnemyType), (EnemyPlayer), (Range));
                                            SetDeaths((13), (7), 4, (153));
                                        }
                                    }
                                }
                            }
                            else{
                                for(var i = 0 ; i < 6 ; i++){
                                    if(
                                        HeroPvE[i] != 0 && 
                                        MemoryEPD(HeroPvE[i] + 0x00C / 4, AtLeast, 1)
                                    ){
                                        var Dis = FastDistanceUnit(Heroes[CP],HeroPvE[i]);
                                        var EnemyType;
                                        EnemyType = wread_epd(HeroPvE[i] + 0x064 / 4,  0x064 % 4);
                                        if(
                                            Bring((7), (0), 1, (EnemyType), (Range)) && 
                                            Dis < MinDis
                                        ){
                                            SetDeaths((13), (7), 4, (153));
                                            MinDis = Dis;
                                            Qskill.cast(Qskills[CP]).target = EnemyType;
                                            MoveLocation((Target), (EnemyType), (7), (Range));
                                        }
                                    }
                                }
                            }
                            if(
                                Deaths((13), (10), 4, (153))
                            ){
                                break;
                            }
                            //Priority 4: Hero
                            //Priority 3: RaidBoss
                            SetDeaths((13), (7), 3, (153));
                            if(
                                Switch((37), (2))
                            ){
                                if(
                                    Bring((7), (0), 1, (114), (Range))
                                ){
                                    MoveLocation((Target), (114), (7), (Range));
                                    break;
                                }
                                if(
                                    Bring((7), (0), 1, (132), (Range))
                                ){
                                    MoveLocation((Target), (132), (7), (Range));
                                    break;
                                }
                            }
                            if(
                                Bring((EnemyCPU), (0), 1, (87), (Range))
                            ){
                                MoveLocation((Target), (87), (EnemyCPU), (Range));
                                break;
                            }
                            if(
                                Bring((EnemyCPU), (0), 1, (76), (Range))
                            ){
                                MoveLocation((Target), (76), (EnemyCPU), (Range));
                                break;
                            }
                            if(
                                Bring((EnemyCPU), (0), 1, (79), (Range))
                            ){
                                MoveLocation((Target), (79), (EnemyCPU), (Range));
                                break;
                            }
                            if(
                                Bring((EnemyCPU), (0), 1, (19), (Range))
                            ){
                                MoveLocation((Target), (19), (EnemyCPU), (Range));
                                break;
                            }
                            //Priority 3: RaidBoss
                            //Priority 2: EnemyUnit
                            if(
                                Switch((37), (3)) && 
                                Bring((EnemyForce), (0), 1, (230), (Range))
                            ){
                                MoveLocation((Target), (230), (EnemyForce), (Range));
                                SetDeaths((13), (7), 2, (153));
                                break;
                            }
                            //Priority 2: EnemyUnit
                            //Priority 1: CPU
                            if(
                                Bring((14), (0), 1, (230), (Range))
                            ){
                                MoveLocation((Target), (230), (EnemyCPU), (Range));
                                SetDeaths((13), (7), 1, (153));
                            }
                            else{
                                if(
                                    Command((13), (0), 1, (10))
                                ){
                                    if(
                                        Bring((EnemyCPU), (0), 1, (231), (Range))
                                    ){
                                        MoveLocation((Target), (231), (EnemyCPU), (Range));
                                        SetDeaths((13), (7), 1, (153));
                                    }
                                    else{
                                        SetDeaths((13), (7), 0, (153));
                                    }
                                }
                                else{
                                    SetDeaths((13), (7), 0, (153));
                                }
                            }
                            //Priority 1: CPU
                            //LockOn
                        break;
                    }
                    if(
                        Qskill.cast(Qskills[CP]).type == 5 && 
                        LockOnStatus <= 3 && 
                        Qskill.cast(Qskills[CP]).expire >= 1
                    ){
                        Qskill.cast(Qskills[CP]).expire -= 1;
                    }
                    if(
                        Qskill.cast(Qskills[CP]).expire >= 1
                    ){
                        Order((47), (13), (9), (0), (Target));
                        Order((98), (13), (9), (0), (Target));
                    }
                    else{
                        KillUnitAt(0, (47), (9), (13));
                        KillUnitAt(0, (98), (9), (13));
                        if(
                            Qskill.cast(Qskills[CP]).type == 5
                        ){
                            SetDeaths((13), (7), 13, (47));
                        }
                    }
                }
                //MissileAim
}
function MissileHit(){
                //MissileHit
                if(
                    Bring((13), (0), 1, (47), (9)) && 
                    TE.Qskill.cast(TE.Qskills[CP]).expire >= 1
                ){
                    MoveLocation((62), (47), (13), (9));
                    if(
                        Bring((14), (0), 1, (230), (62)) || 
                        Bring((14), (0), 1, (114), (62)) || 
                        Bring((14), (0), 1, (132), (62)) || 
                        (Command((13), (0), 1, (10)) && Bring((14), (0), 1, (231), (62))) // 파이어뱃이면서 미사일이 건물에 닿았을때
                    ){
                        var MissileType = TE.Qskill.cast(TE.Qskills[CP]).type;
                        switch(MissileType) {
                            case 1:
                                SetDeaths((13), (7), 10, (47));
                            break;
                            case 2:
                                SetDeaths((13), (7), 11, (47));
                            break;
                            case 3:
                                SetDeaths((13), (7), 12, (47));
                            break;
                            case 4:
                                SetDeaths((13), (7), 10, (47));
                            break;
                            case 6:
                                SetDeaths((13), (7), 10, (47));
                            break;
                        }
                    }
                }
                //MissileHit
}*/
function Color(){
    switch(dwread_epd(EPD(0x58A364 + 48 * 213 + 4 * 6))) {
        case 0:
            TE.SetPColor(8,111,0);
        break;
        case 2:
            TE.SetPColor(8,156,0);
        break;
        case 4:
            TE.SetPColor(8,135,0);
        break;
        case 6:
            TE.SetPColor(8,117,0);
        break;
        case 8:
            TE.SetPColor(8,185,0);
        break;
        case 10:
            TE.SetPColor(8,128,0);
        break;
        case 12:
            TE.SetPColor(8,51,0);
        break;
        case 14:
            TE.SetPColor(8,53,0);
        break;
        case 16:
            TE.SetPColor(8,164,0);
        break;
        case 18:
            TE.SetPColor(8,8,0);
        break;
        case 20:
            TE.SetPColor(8,111,0);
            SetDeaths((6), (7), 0, (213));
        break;
    }
    SetDeaths((6), (8), 1, (213));
    if(
        Switch((19), (2))
    ){
        foreach(ptr, epd : EUDLoopPlayerUnit(11) ) {
            SetSwitch((19), (5));
            TE.SetUnitColor(ptr,11);
            if(
                Switch((26), (2)) && 
                wread_epd(epd + 0x064 / 4,  0x064 % 4) == 198
            ){
                TE.SetUnitColor(ptr,8);
            }
        }
        foreach(ptr, epd : EUDLoopPlayerUnit(9) ) {
            if(
                wread_epd(epd + 0x064 / 4,  0x064 % 4) == 87
            ){
                TE.SetUnitColor(ptr,8);
            }
        }
    }
    if(
        Deaths((6), (10), 0, (207))
    ){
        if(
            Switch((17), (2)) || 
            Switch((18), (2))
        ){
            foreach(ptr, epd : EUDLoopPlayerUnit(11) ) {
                if(
                    wread_epd(epd + 0x064 / 4,  0x064 % 4) == 195 || 
                    wread_epd(epd + 0x064 / 4,  0x064 % 4) == 111 || 
                    wread_epd(epd + 0x064 / 4,  0x064 % 4) == 113
                ){
                    TE.SetUnitColor(ptr,11);
                }
            }
        }
        foreach(ptr, epd : EUDLoopPlayerUnit(9) ) {
            if(
                wread_epd(epd + 0x064 / 4,  0x064 % 4) == 19 || 
                wread_epd(epd + 0x064 / 4,  0x064 % 4) == 79 || 
                wread_epd(epd + 0x064 / 4,  0x064 % 4) == 76 || 
                wread_epd(epd + 0x064 / 4,  0x064 % 4) == 115
            ){
                TE.SetUnitColor(ptr,9);
            }
        }
    }
}
function Potential(){
    //Potential
    if(
        Deaths((6), (10), 9, (212))
    ){
        SetDeaths((6), (7), 0, (212));
        bwrite(0x58D2B0 + 0x207C * ((9) / 46) + (6) * (46 - 31 * ((9) / 46)) + ((9) % 46), 5);
        bwrite(0x58D2B0 + 0x207C * ((2) / 46) + (6) * (46 - 31 * ((2) / 46)) + ((2) % 46), 5);
        bwrite(0x58D2B0 + 0x207C * ((13) / 46) + (6) * (46 - 31 * ((13) / 46)) + ((13) % 46), 5);
        bwrite(0x58D2B0 + 0x207C * ((3) / 46) + (6) * (46 - 31 * ((3) / 46)) + ((3) % 46), 5);
        bwrite(0x58D2B0 + 0x207C * ((9) / 46) + (7) * (46 - 31 * ((9) / 46)) + ((9) % 46), 5);
        bwrite(0x58D2B0 + 0x207C * ((2) / 46) + (7) * (46 - 31 * ((2) / 46)) + ((2) % 46), 5);
        bwrite(0x58D2B0 + 0x207C * ((13) / 46) + (7) * (46 - 31 * ((13) / 46)) + ((13) % 46), 5);
        bwrite(0x58D2B0 + 0x207C * ((3) / 46) + (7) * (46 - 31 * ((3) / 46)) + ((3) % 46), 5);
        bwrite(0x58D2B0 + 0x207C * ((9) / 46) + (9) * (46 - 31 * ((9) / 46)) + ((9) % 46), 5);
        bwrite(0x58D2B0 + 0x207C * ((2) / 46) + (9) * (46 - 31 * ((2) / 46)) + ((2) % 46), 5);
        bwrite(0x58D2B0 + 0x207C * ((13) / 46) + (9) * (46 - 31 * ((13) / 46)) + ((13) % 46), 5);
        bwrite(0x58D2B0 + 0x207C * ((3) / 46) + (9) * (46 - 31 * ((3) / 46)) + ((3) % 46), 5);
    }
    if(
        Deaths((6), (10), 12, (212))
    ){
        SetDeaths((6), (7), 0, (212));
        bwrite(0x65FD00 + 16592 + 87 * 1, 18);
    }
    if(
        Deaths((6), (10), 19, (212))
    ){
        SetDeaths((6), (7), 0, (212));
        SetMemoryEPD(EPD(0x58D2B0 + 0x207C * ((32) / 46) + (6) * (46 - 31 * ((32) / 46)) + ((32) % 46)), (8), bitlshift(1, 8 * (((6) * (46 - 31 * ((32) / 46)) + ((32) % 46)) % 4)));
        SetMemoryEPD(EPD(0x58D2B0 + 0x207C * ((32) / 46) + (7) * (46 - 31 * ((32) / 46)) + ((32) % 46)), (8), bitlshift(1, 8 * (((7) * (46 - 31 * ((32) / 46)) + ((32) % 46)) % 4)));
        dwwrite(0x65FD00 + 9808 + 76 * 4, dwread(0x65FD00 + 9808 + 76 * 4) + 51200);
        wwrite(0x65FD00 + 4352 + 76 * 2, wread(0x65FD00 + 4352 + 76 * 2) + 500);
        bwrite(0x65FD00 + 456 + 76 * 1, bread(0x65FD00 + 456 + 76 * 1) + 2);
        bwrite(0x65FD00 + 16592 + 76 * 1, bread(0x65FD00 + 16592 + 76 * 1) + 1);
        wwrite(0x6564E0 + 2512 + 71 * 2, wread(0x6564E0 + 2512 + 71 * 2) + 10);
        wwrite(0x6564E0 + 4504 + 71 * 2, wread(0x6564E0 + 4504 + 71 * 2) + 1);
        bwrite(0x6564E0 + 2776 + 52 * 1, bread(0x6564E0 + 2776 + 52 * 1) + -15);
        ModifyUnitHitPoints(0, (76), (9), (9), 100);
        wwrite(0x65FD00 + 4352 + 115 * 2, wread(0x65FD00 + 4352 + 115 * 2) + -100);
        dwwrite(0x65FD00 + 9808 + 3 * 4, dwread(0x65FD00 + 9808 + 3 * 4) + 25600);
    }
    if(
        Deaths((6), (10), 20, (212))
    ){
        SetDeaths((6), (7), 0, (212));
        bwrite(0x58CF44 + 0x21FC * ((3) / 24) + (0) * (24 - 4 * ((3) / 24)) + ((3) % 24), 1);
        bwrite(0x58CF44 + 0x21FC * ((3) / 24) + (1) * (24 - 4 * ((3) / 24)) + ((3) % 24), 1);
        bwrite(0x58CF44 + 0x21FC * ((3) / 24) + (2) * (24 - 4 * ((3) / 24)) + ((3) % 24), 1);
        bwrite(0x58CF44 + 0x21FC * ((3) / 24) + (3) * (24 - 4 * ((3) / 24)) + ((3) % 24), 1);
        bwrite(0x58CF44 + 0x21FC * ((3) / 24) + (4) * (24 - 4 * ((3) / 24)) + ((3) % 24), 1);
        bwrite(0x58CF44 + 0x21FC * ((3) / 24) + (5) * (24 - 4 * ((3) / 24)) + ((3) % 24), 1);
    }
    if(
        Deaths((6), (10), 21, (212))
    ){
        SetDeaths((6), (7), 0, (212));
        bwrite(0x58CF44 + 0x21FC * ((16) / 24) + (0) * (24 - 4 * ((16) / 24)) + ((16) % 24), 1);
        bwrite(0x58CF44 + 0x21FC * ((16) / 24) + (1) * (24 - 4 * ((16) / 24)) + ((16) % 24), 1);
        bwrite(0x58CF44 + 0x21FC * ((16) / 24) + (2) * (24 - 4 * ((16) / 24)) + ((16) % 24), 1);
        bwrite(0x58CF44 + 0x21FC * ((16) / 24) + (3) * (24 - 4 * ((16) / 24)) + ((16) % 24), 1);
        bwrite(0x58CF44 + 0x21FC * ((16) / 24) + (4) * (24 - 4 * ((16) / 24)) + ((16) % 24), 1);
        bwrite(0x58CF44 + 0x21FC * ((16) / 24) + (5) * (24 - 4 * ((16) / 24)) + ((16) % 24), 1);
    }
    //Potential
}
function Carrier(){
    //Carrier
    if(
        Command((6), (0), 1, (72)) || 
        Command((7), (0), 1, (72))
    ){
        if(
            Deaths((6), (10), 0, (210))
        ){
            foreach(ptr, epd : EUDLoopPlayerUnit(6) ) {
                if(
                    wread_epd(epd + 0x064 / 4,  0x064 % 4) == 72 && 
                    MemoryEPD(epd + 0x060 / 4, AtMost, 255) && 
                    MemoryEPD(epd + 0x008 / 4, AtLeast, 2560) && 
                    bread_epd(epd + 0x04D / 4,  0x04D % 4) != 0
                ){
                    TE.COrderLocEPD(epd,158,10);
                }
            }
            foreach(ptr, epd : EUDLoopPlayerUnit(7) ) {
                if(
                    wread_epd(epd + 0x064 / 4,  0x064 % 4) == 72 && 
                    MemoryEPD(epd + 0x060 / 4, AtMost, 255) && 
                    MemoryEPD(epd + 0x008 / 4, AtLeast, 2560) && 
                    bread_epd(epd + 0x04D / 4,  0x04D % 4) != 0
                ){
                    TE.COrderLocEPD(epd,158,11);
                }
            }
        }
    }
    //Carrier
}